// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webcast/im/Message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// 更新时间 : 2023-01-09
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Message)
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:Message.method)
    pub method: ::std::string::String,
    // @@protoc_insertion_point(field:Message.payload)
    pub payload: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Message.msgId)
    pub msgId: i64,
    // @@protoc_insertion_point(field:Message.msgType)
    pub msgType: i32,
    // @@protoc_insertion_point(field:Message.offset)
    pub offset: i64,
    // @@protoc_insertion_point(field:Message.needWrdsStore)
    pub needWrdsStore: bool,
    // @@protoc_insertion_point(field:Message.wrdsVersion)
    pub wrdsVersion: i64,
    // @@protoc_insertion_point(field:Message.wrdsSubKey)
    pub wrdsSubKey: ::std::string::String,
    // @@protoc_insertion_point(field:Message.messageExtraMap)
    pub messageExtraMap: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "method",
            |m: &Message| { &m.method },
            |m: &mut Message| { &mut m.method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &Message| { &m.payload },
            |m: &mut Message| { &mut m.payload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msgId",
            |m: &Message| { &m.msgId },
            |m: &mut Message| { &mut m.msgId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msgType",
            |m: &Message| { &m.msgType },
            |m: &mut Message| { &mut m.msgType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &Message| { &m.offset },
            |m: &mut Message| { &mut m.offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "needWrdsStore",
            |m: &Message| { &m.needWrdsStore },
            |m: &mut Message| { &mut m.needWrdsStore },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wrdsVersion",
            |m: &Message| { &m.wrdsVersion },
            |m: &mut Message| { &mut m.wrdsVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wrdsSubKey",
            |m: &Message| { &m.wrdsSubKey },
            |m: &mut Message| { &mut m.wrdsSubKey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "messageExtraMap",
            |m: &Message| { &m.messageExtraMap },
            |m: &mut Message| { &mut m.messageExtraMap },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.method = is.read_string()?;
                },
                18 => {
                    self.payload = is.read_bytes()?;
                },
                24 => {
                    self.msgId = is.read_int64()?;
                },
                32 => {
                    self.msgType = is.read_int32()?;
                },
                40 => {
                    self.offset = is.read_int64()?;
                },
                48 => {
                    self.needWrdsStore = is.read_bool()?;
                },
                56 => {
                    self.wrdsVersion = is.read_int64()?;
                },
                66 => {
                    self.wrdsSubKey = is.read_string()?;
                },
                74 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.messageExtraMap.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.method);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        if self.msgId != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.msgId);
        }
        if self.msgType != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.msgType);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.offset);
        }
        if self.needWrdsStore != false {
            my_size += 1 + 1;
        }
        if self.wrdsVersion != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.wrdsVersion);
        }
        if !self.wrdsSubKey.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.wrdsSubKey);
        }
        for (k, v) in &self.messageExtraMap {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.method.is_empty() {
            os.write_string(1, &self.method)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        if self.msgId != 0 {
            os.write_int64(3, self.msgId)?;
        }
        if self.msgType != 0 {
            os.write_int32(4, self.msgType)?;
        }
        if self.offset != 0 {
            os.write_int64(5, self.offset)?;
        }
        if self.needWrdsStore != false {
            os.write_bool(6, self.needWrdsStore)?;
        }
        if self.wrdsVersion != 0 {
            os.write_int64(7, self.wrdsVersion)?;
        }
        if !self.wrdsSubKey.is_empty() {
            os.write_string(8, &self.wrdsSubKey)?;
        }
        for (k, v) in &self.messageExtraMap {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(74)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.method.clear();
        self.payload.clear();
        self.msgId = 0;
        self.msgType = 0;
        self.offset = 0;
        self.needWrdsStore = false;
        self.wrdsVersion = 0;
        self.wrdsSubKey.clear();
        self.messageExtraMap.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::Lazy<Message> = ::protobuf::rt::Lazy::new();
        instance.get(Message::new)
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18webcast/im/Message.proto\"\xf8\x02\n\x07Message\x12\x16\n\x06metho\
    d\x18\x01\x20\x01(\tR\x06method\x12\x18\n\x07payload\x18\x02\x20\x01(\
    \x0cR\x07payload\x12\x14\n\x05msgId\x18\x03\x20\x01(\x03R\x05msgId\x12\
    \x18\n\x07msgType\x18\x04\x20\x01(\x05R\x07msgType\x12\x16\n\x06offset\
    \x18\x05\x20\x01(\x03R\x06offset\x12$\n\rneedWrdsStore\x18\x06\x20\x01(\
    \x08R\rneedWrdsStore\x12\x20\n\x0bwrdsVersion\x18\x07\x20\x01(\x03R\x0bw\
    rdsVersion\x12\x1e\n\nwrdsSubKey\x18\x08\x20\x01(\tR\nwrdsSubKey\x12G\n\
    \x0fmessageExtraMap\x18\t\x20\x03(\x0b2\x1d.Message.MessageExtraMapEntry\
    R\x0fmessageExtraMap\x1aB\n\x14MessageExtraMapEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\
    \x028\x01B=\n9cool.scx.live_room_watcher.douyin.proto_entity.webcast.imP\
    \x01J\xe0\x04\n\x06\x12\x04\0\0\x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\n\x12\x03\x02\0\"\n\x08\n\
    \x01\x08\x12\x03\x03\0R\n\t\n\x02\x08\x01\x12\x03\x03\0R\n'\n\x02\x04\0\
    \x12\x04\x06\0\x10\x01\x1a\x1b\xe6\x9b\xb4\xe6\x96\xb0\xe6\x97\xb6\xe9\
    \x97\xb4\x20:\x202023-01-09\r\n\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x0f\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x02\x14\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\t\x0f\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x07\x12\x13\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x08\x02\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x08\x02\x07\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x08\x08\x0f\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x08\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03\t\x02\x12\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\t\x02\x07\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\t\x08\r\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\t\x10\x11\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\n\x02\x14\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\n\x08\x0f\n\x0c\
    \n\x05\x04\0\x02\x03\x03\x12\x03\n\x12\x13\n\x0b\n\x04\x04\0\x02\x04\x12\
    \x03\x0b\x02\x13\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0b\x02\x07\n\x0c\
    \n\x05\x04\0\x02\x04\x01\x12\x03\x0b\x08\x0e\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03\x0b\x11\x12\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0c\x02\x19\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0c\x02\x06\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x0c\x07\x14\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0c\
    \x17\x18\n\x0b\n\x04\x04\0\x02\x06\x12\x03\r\x02\x18\n\x0c\n\x05\x04\0\
    \x02\x06\x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\r\
    \x08\x13\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\r\x16\x17\n\x0b\n\x04\x04\
    \0\x02\x07\x12\x03\x0e\x02\x18\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x0e\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0e\t\x13\n\x0c\n\x05\x04\
    \0\x02\x07\x03\x12\x03\x0e\x16\x17\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x0f\
    \x02*\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03\x0f\x02\x15\n\x0c\n\x05\x04\
    \0\x02\x08\x01\x12\x03\x0f\x16%\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\
    \x0f()b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Message::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
