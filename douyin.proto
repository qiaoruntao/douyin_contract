syntax = "proto2";
message ImHighlightComment {
  optional ImCommon common = 1;
  optional int64 id = 2;
  optional int64 eventTime = 3;
  optional int64 commentMsgId = 4;
  optional int32 reviewResult = 5;
  optional string reviewComment = 6;
  optional string content = 7;
  optional DataUser user = 8;
  optional int32 actionType = 9;
  optional int64 msgTime = 10;
  optional int64 endTime = 11;
  optional int32 countdownStyle = 12;
  optional int32 trigger = 13;
  optional int64 operatorId = 14;
  optional string operatorNickname = 15;
}
message ImHighlightCommentPosition {
  optional ImCommon common = 1;
  optional int64 eventTime = 3;
  optional double x = 4;
  optional double y = 5;
}
message ImHotChatMessage {
  optional ImCommon common = 1;
  optional string title = 2;
  optional string content = 3;
  repeated int64 num = 4;
  optional int64 duration = 5;
  repeated int64 showDuration = 6;
  optional int64 sequenceId = 7;
  repeated string hotList = 8;
}
message ImHotRoomMessage {
  optional ImCommon common = 1;
  optional DataHotRoomInfo info = 2;
}
message ImImDeleteMessage {
  optional ImCommon common = 1;
  repeated int64 deleteMsgIds = 2;
}
message ImInRoomBannerMessage {
  optional ImCommon common = 1;
  optional string extra = 2;
  optional int32 position = 3;
  optional int32 actionType = 4;
  optional string containerUrl = 5;
  optional string lynxContainerUrl = 6;
  optional int32 containerType = 7;
  optional int32 opType = 8;
}
message ImInRoomBannerEvent {
  optional ImCommon common = 1;
  optional int32 position = 2;
  optional DataBannerData data = 3;
}
message ImInRoomBannerRedPoint {
  optional ImCommon common = 1;
  optional int64 count = 2;
  optional int64 bannerId = 3;
  optional int64 showType = 4;
}
message ImInRoomBannerRefreshMessage {
  optional ImCommon common = 1;
  optional int64 maxDelaySeconds = 2;
  optional int32 position = 3;
}
message ImOpenSchemaCommand {
  optional string url = 1;
}
message ImInstantCommandMessage {
  optional ImCommon common = 1;
  optional int32 commandType = 2;
  optional ImOpenSchemaCommand openSchemaCommand = 11;
}
message ImPopBoxContent {
  optional int32 largeType = 1;
  optional int32 iconType = 2;
  optional string controlType = 3;
  optional string title = 4;
  optional string description = 5;
  optional string url = 6;
  optional int32 countDownSec = 7;
  optional string buttonDesc = 8;
}
message ImClientOperation {
  optional string appId = 1;
  optional int32 operationType = 2;
  optional ImPopBoxContent popBoxContent = 3;
  optional int32 showTime = 4;
}
message ImInteractControlMessage {
  optional ImCommon common = 1;
  optional string roomId = 2;
  optional string timeStamp = 3;
  repeated ImClientOperation anchorOperation = 4;
  repeated ImClientOperation audienceOperation = 5;
}
message ImInteractOpenDevelopMessage {
  optional ImCommon common = 1;
  optional string appId = 2;
  optional int32 develop = 3;
  optional string sign = 4;
  optional int64 gameId = 5;
  optional int64 appKind = 6;
}
message ImIntercomInviteMessage {
  optional ImCommon common = 1;
  optional int64 channelId = 2;
}
message ImIntercomReplyMessage {
  optional ImCommon common = 1;
  optional int64 channelId = 2;
  optional int64 replyStatus = 3;
  optional string toast = 4;
}
message ImEcomBuyIntentionMessage {
  optional ImCommon common = 1;
  repeated ImEcomBuyIntentionMessageCount counts = 2;
  optional int64 unixTime = 3;
}
message ImEcomBuyIntentionMessageCount {
  optional int64 id = 1;
  optional string title = 2;
  optional int64 count = 3;
}
message ImKTVContestSupportMessage {
  optional ImCommon common = 1;
  optional int64 supportCount = 2;
  optional int64 supporteeId = 3;
  optional int64 supportorId = 4;
  optional int64 songId = 5;
  optional int64 songUniqueId = 6;
}
message ImKtvGrabSongResultMessage {
  optional ImCommon common = 1;
  optional int64 songId = 2;
  optional int64 termId = 3;
  optional bool success = 4;
  optional string prompt = 5;
}
message ImKtvMessage {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  optional ImSetSettingOrderSongContent setSettingOrderSongContent = 3;
  optional ImAudienceOrderSongContent audienceOrderSongContent = 4;
  optional ImAudienceOrderSongChatContent audienceOrderSongChatContent = 5;
  optional ImPausePlaySongContent pausePlaySongContent = 6;
}
message ImSetSettingOrderSongContent {
  optional bool canOrderSong = 1;
}
message ImAudienceOrderSongContent {
  optional int64 orderSongCount = 1;
}
message ImAudienceOrderSongChatContent {
  optional DataUser user = 1;
  optional DataText displayText = 2;
  optional bool displayUserRole = 3;
}
message ImPausePlaySongContent {
  optional int64 songId = 1;
  optional int32 actionType = 2;
  optional int64 fromUserId = 3;
  optional int64 singerId = 4;
}
message ImKTVPlayModeStartMessage {
  optional ImCommon common = 1;
  optional string prompt = 2;
  optional int32 playModeType = 3;
  repeated int32 linkmicPlayModes = 4;
}
message ImKTVShortVideoCreatedMessage {
  optional ImCommon common = 1;
  optional ImKTVShortVideoCreatedMessageShortVideoStruct shortVideoInfo = 2;
}
message ImKTVShortVideoCreatedMessageShortVideoStruct {
  optional string shortVideoUrl = 1;
}
message ImKTVSingerHotRankPosMessage {
  optional ImCommon common = 1;
  optional int64 hot = 2;
  optional int64 rank = 3;
  optional int64 singer = 4;
}
message ImKtvChallengeConfigMessage {
  optional ImCommon common = 1;
  optional int64 switchStatus = 2;
  optional int64 targetScore = 3;
  optional int64 targetDurationSecond = 4;
}
message ImKTVChallengeRankMessage {
  optional ImCommon common = 1;
  repeated ImKTVChallengeRankMessageChallengeRankUser userList = 2;
  optional int64 singerId = 3;
  optional string singerNickname = 4;
  optional DataImage singerAvatarThumb = 5;
}
message ImKTVChallengeRankMessageChallengeRankUser {
  optional int64 userId = 1;
  optional string nickname = 2;
  optional int64 score = 3;
  optional DataImage avatarThumb = 4;
  optional DataImage avatarMedium = 5;
  optional DataImage avatarLarge = 6;
}
message ImKTVChallengeStatusMessage {
  optional ImCommon common = 1;
  optional int64 challengeId = 2;
  optional int64 status = 3;
  optional int64 currentScore = 4;
  optional int64 targetScore = 5;
  optional int64 countdownSecond = 6;
  optional int64 targetDurationSecond = 7;
  optional int64 incrementDurationSecond = 8;
  optional int32 giftType = 9;
  optional int32 emojiLocation = 10;
}
message ImKTVStartGrabSongMessage {
  optional ImCommon common = 1;
  optional bool isstart = 2;
}
message ImKTVUserSingingHotMessage {
  optional ImCommon common = 1;
  optional int64 hot = 2;
  optional int32 hotStatus = 3;
  optional int32 hotLevel = 4;
  optional int64 songId = 5;
  optional int64 userId = 6;
  optional int64 level2Threshold = 7;
  optional int64 level3Threshold = 8;
}
message ImNabobImNoticeMessage {
  optional ImCommon common = 1;
}
message ImNobleEnterLeaveMessage {
  optional ImCommon common = 1;
  optional int64 nobleCount = 2;
}
message ImNobleToastMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional DataImage toastIcon = 3;
}
message ImNobleUpgradeMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string openUrl = 3;
  optional DataImage backgroundPop = 4;
  optional DataImage backgroundNormal = 5;
  optional int32 displayStyle = 6;
  optional DataGiftIMPriority priority = 7;
}
message ImNoticeMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional int64 noticeType = 3;
  optional string style = 4;
  optional DataText title = 5;
  optional DataText violationReason = 6;
  optional DataText displayText = 7;
  optional DataText tipsTitle = 8;
  optional string tipsUrl = 9;
  optional DataText noticeTitle = 10;
  optional DataText noticeContent = 11;
  optional int64 noticeTime = 12;
  optional string limitNoticeKey = 13;
  optional DataText buttonConfirm = 14;
  optional DataText buttonCancel = 15;
  optional string eventName = 16;
  optional string topIconUrl = 17;
  optional string decorationAuditedContent = 18;
}
message ImNotifyEffectMessage {
  optional ImCommon common = 1;
  repeated DataImage icons = 2;
  optional DataText text = 3;
  optional ImNotifyEffectMessageBackground background = 4;
  optional ImNotifyEffectMessageDynamicConfig dynamicConfig = 5;
  optional DataCombinedText textV2 = 6;
  optional ImNotifyEffectMessageSceneConfig sceneConfig = 10;
  map<string, string> buriedPointMap = 20;
}
message ImNotifyEffectMessageBackground {
  optional DataImage backgroundImage = 1;
  optional string backgroundColor = 10;
}
message ImNotifyEffectMessageDynamicConfig {
  optional int32 stayTime = 1;
  optional int32 maxStayTime = 2;
  optional int32 displayEffectType = 3;
}
message ImNotifyEffectMessageSceneConfig {
  optional string scene = 1;
  optional int64 priority = 2;
  optional bool needAggregate = 3;
  optional int64 aggregateNum = 4;
  optional DataText aggregateText = 5;
  optional string subScene = 6;
}
message ImNotifyMessage {
  optional ImCommon common = 1;
  optional string schema = 2;
  optional int64 notifyType = 3;
  optional string content = 4;
  optional DataUser user = 5;
  optional ImNotifyMessageExtra extra = 6;
  optional int64 notifyClass = 7;
  repeated int64 flexSetting = 8;
  optional string bizScene = 100;
}
message ImNotifyMessageBackground {
  optional int32 width = 1;
  optional int32 height = 2;
  repeated string urlList = 3;
  optional string uri = 4;
}
message ImNotifyMessageContent {
  optional string content = 1;
  optional bool needHighLight = 2;
}
message ImNotifyMessageContentList {
  repeated ImNotifyMessageContent contents = 1;
  optional string highLightColor = 2;
}
message ImNotifyMessageExtra {
  optional int64 duration = 1;
  optional ImNotifyMessageBackground background = 2;
  optional ImNotifyMessageContentList contentList = 3;
  map<string, string> paramsMap = 5;
  optional bool needGiftFrequency = 6;
}
message ImOChannelAnchorMessage {
  optional ImCommon common = 1;
  optional int64 startTimestamp = 2;
  optional int64 endTimestamp = 3;
  optional string content = 4;
  optional int64 roomId = 5;
  optional DataUser channelUser = 6;
}
message ImOChannelUserMessage {
  optional ImCommon common = 1;
  optional int64 startTimestamp = 2;
  optional int64 endTimestamp = 3;
  optional int64 maxEnterTime = 4;
  optional int64 roomId = 5;
  optional int64 maxNextTime = 6;
}
message ImOChannelModifyMessage {
  optional ImCommon common = 1;
  optional int64 startTimestamp = 2;
  optional int64 endTimestamp = 3;
  optional int64 channelUid = 4;
  optional string showlistSchema = 5;
}
message ImOChannelLastestShowMessage {
  optional ImCommon common = 1;
  optional int64 startTs = 2;
  optional string showlistSchema = 5;
}
message ImOChannelGrabMicShowMessage {
  optional ImCommon common = 1;
  optional int64 showId = 2;
  optional string text = 3;
  optional int64 startTimestamp = 4;
  optional int64 endTimestamp = 5;
  optional DataUser channelUser = 6;
  optional string showlistName = 7;
}
message ImPkActivePush {
  optional ImPkActivePushMatcher matcherR = 1;
  optional string matchReason = 2;
  optional int64 waitSeconds = 3;
  optional string signExtra = 4;
}
message ImPkActivePushMatcher {
  optional int64 userId = 1;
  optional DataRoom room = 2;
  repeated DataBattleRivalTag tags = 3;
}
message ImPkActivePushMessage {
  optional ImCommon common = 1;
  optional ImPkActivePush pkActivePush = 2;
}
message ImPKIconBubbleMessage {
  optional ImCommon common = 1;
  optional ImPKIconBubble bubbleInfo = 2;
}
message ImPKIconBubble {
  optional DataImage displayIcon = 1;
  optional DataText displayText = 2;
  optional string schema = 3;
  optional int32 bubbleType = 4;
  optional string activityName = 5;
  optional int64 showTime = 6;
}
message ImPopularCardMessage {
  optional ImCommon common = 1;
  optional ImPopularCardMessagePopularCardInfo popularCardInfo = 2;
}
message ImPopularCardMessagePopularCardInfo {
  optional int32 status = 1;
  optional int64 startTime = 2;
  optional int64 endTime = 3;
  optional int32 enterNumber = 4;
}
message ImPortalMessage {
  optional ImCommon common = 1;
  optional int64 type = 2;
  optional int64 portalId = 3;
  optional int64 roomId = 4;
  optional ImPortalBuy portalBuy = 5;
  optional ImPortalInvite portalInvite = 6;
  optional ImPortalFinish portalFinish = 7;
  optional DataPortal portal = 8;
  optional int64 nextPingTime = 9;
}
message ImPortalBuy {
  optional DataUser sugarDaddy = 1;
}
message ImPortalInvite {
  optional int64 inviteCountDown = 1;
  optional int64 rewardCountDown = 2;
  optional DataUser sugarDaddy = 3;
  optional DataUser anchor = 4;
  optional DataImage cover = 5;
}
message ImPortalFinish {
  optional DataUser luckyPerson = 1;
}
message ImPrivilegeScreenChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string content = 3;
  optional ImPublicAreaCommon publicAreaCommon = 4;
  optional int64 style = 5;
  optional int64 activityDanmuBackground = 6;
  optional DataText rtfContent = 7;
}
message ImPrivilegeVoiceWaveMessage {
  optional ImCommon common = 1;
  optional int64 userId = 2;
  optional DataImage lowImg = 3;
  optional DataImage mediumImg = 4;
  optional DataImage highImg = 5;
  optional int64 dressId = 6;
}
message ImProfileViewMessage {
  optional ImCommon common = 1;
  optional DataText title = 2;
  optional DataText subTitle = 3;
  optional int64 showDuration = 4;
  optional int32 source = 5;
}
message ImPromptMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional DataUser user = 3;
  optional int32 duration = 4;
}
message ImPropertyNoticeMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional int64 userId = 3;
  optional int64 propertyEventType = 4;
}
message ImPropsBGImgMessage {
  optional ImCommon common = 1;
  optional DataPropsBGData bg = 2;
  optional int32 reviewstatus = 3;
  optional string prompts = 4;
}
message ImPullStreamUpdateMessage {
  optional ImCommon common = 1;
  optional int32 pushStreamLevel = 2;
  optional int32 randomSeconds = 3;
}
message ImPushMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional string color = 3;
  optional string traceid = 4;
  optional DataImage icon = 5;
  optional string actionContent = 6;
  optional int64 actionType = 7;
  optional int64 pushMessageDisplayTime = 8;
  optional ImFlexImageStruct backgroundImage = 9;
  optional DataImage actionIcon = 10;
  optional ImFlexImageStruct newBackgroundImage = 11;
  optional string source = 12;
}
message ImFansclubV1PushMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional string color = 3;
  optional string traceid = 4;
  optional DataImage icon = 5;
  optional string actionContent = 6;
  optional int64 actionType = 7;
  optional int64 pushMessageDisplayTime = 8;
  optional ImFlexImageStruct backgroundImage = 9;
  optional DataImage actionIcon = 10;
  optional ImFlexImageStruct newBackgroundImage = 11;
  optional string source = 12;
}
message DataBanner {
  optional int64 id = 1;
  optional string title = 2;
  optional DataImage image = 3;
  optional int64 height = 4;
  optional int64 width = 5;
  optional string schemaUrl = 6;
  optional int64 actionType = 7;
  optional int64 bannerType = 8;
  optional int64 priority = 9;
  optional string text = 10;
  optional int64 frameType = 11;
  optional string extra = 12;
  optional int64 status = 13;
  optional int64 uid = 14;
  optional int64 roomid = 15;
  optional int64 appointmentStartTimestamp = 16;
  optional int64 appointmentEndTimestamp = 17;
  optional int64 appointmentId = 18;
}
message DataBannerCollapse {
  optional DataText collapseTitle = 1;
  optional DataImage collapseImage = 2;
  optional bool enable = 3;
  optional string backgroundColor = 4;
  optional int64 collapseHeight = 5;
  optional string verticalLineColor = 6;
}
message DataBannerContainer {
  optional string containerUrl = 1;
  repeated DataBanner bannerList = 2;
  optional DataImage animationImage = 3;
  optional DataBannerCollapse collapse = 4;
  optional int64 containerHeight = 5;
  optional int64 containerWidth = 6;
  optional string lynxContainerUrl = 7;
  optional int64 containerType = 8;
}
message DataBannerData {
  optional DataBannerContainer topRight = 1;
  optional DataBannerContainer bottomRight = 2;
  optional DataBannerContainer giftPanel = 3;
  optional DataBannerContainer middle = 4;
  optional DataBannerContainer activityTopRight = 5;
  optional DataBannerContainer topLeft = 6;
  optional DataBannerContainer liveScene = 7;
  optional DataBannerContainer activityVsInteractive = 8;
  optional DataBannerContainer activityInteractive = 9;
  optional DataBannerContainer activityVsBottomRight = 10;
}
message DataBattleStarActivityGrade {
  optional string grade = 1;
  optional int64 level = 2;
  optional int64 starCount = 3;
  optional int64 targetStarCount = 4;
  optional DataBattleStarActivityGradeMedal starActivityGradeMedal = 5;
  optional int32 gradeEnum = 6;
}
message DataBattleStarActivityGradeMedal {
  optional DataImage gradeMedal = 1;
  optional DataImage levelImage = 2;
  optional DataImage badgeImage = 3;
}
message DataBattleBuffBonusCardEffect {
  optional int64 bonusRatio = 1;
  optional int64 effectDurationMs = 2;
}
message DataBattleBuffCardMeta {
  optional int32 battleBuffCardType = 1;
  optional string effectJson = 2;
  optional int64 effectStartTimeMs = 3;
  optional int64 effectDurationMs = 4;
  optional int64 createTimeMs = 5;
  optional string cardExtraInfo = 6;
}
message DataBattleBuffCardInfo {
  optional int32 battleBuffCardType = 1;
  repeated DataBattleBuffCardMeta effectiveBuffCards = 2;
  optional int64 waitingBuffCardsCount = 3;
  optional int64 bonusScore = 4;
}
message DataBattleStarActivityUserInfo {
  optional string userIdStr = 1;
  optional string secUserId = 2;
  optional string nickName = 3;
  optional DataImage avatarThumb = 4;
  optional string roomIdStr = 5;
  optional DataBattleStarActivityGrade grade = 6;
}
message DataBattleStarActivityTask {
  optional int64 level = 1;
  optional DataBattleStarActivityTaskProgress progress = 2;
  optional int64 rewardStarCount = 3;
}
message DataBattleStarActivityTaskProgress {
  optional int64 current = 1;
  optional int64 target = 2;
}
message DataBattleStarActivityRankList {
  optional int32 tab = 1;
  optional int64 rank = 2;
  optional int64 score = 3;
  optional int64 rewardLimit = 4;
  optional int64 showLimit = 5;
  optional int64 deltaScore = 6;
}
message DataBattleStarActivityEffect {
  optional int32 effectType = 1;
  optional int64 starRewardCount = 2;
  optional int64 targetBattleScore = 3;
  repeated DataImage upgradeRewardIcon = 4;
  optional int64 effectTime = 5;
  optional int64 effectDuration = 6;
}
message DataBattleStarActivityMeta {
  optional int64 starttime = 1;
  optional int64 endtime = 2;
  optional int64 showendtime = 3;
  optional int64 nowtime = 4;
}
message DataBattleStarActivityBanner {
  optional DataBattleStarActivityRankList rankList = 1;
  optional DataBattleStarActivityGrade grade = 2;
  optional DataBattleStarActivityTask task = 3;
  repeated DataBattleBuffCardInfo battleBuffCardInfos = 4;
  optional DataBattleStarActivityEffect effect = 5;
  optional DataBattleStarActivityMeta meta = 6;
}
message DataBattleBuffCardRefreshMessage {
  optional int64 anchorId = 1;
  optional int64 liveId = 2;
  optional int64 appId = 3;
}
message DataBattleStarActivityGradeChange {
  optional int64 star = 1;
  optional int64 score = 2;
  optional string beforeGrade = 3;
  optional int64 beforeLevel = 4;
  optional string currentGrade = 5;
  optional int64 currentLevel = 6;
}
message DataAwardInfo {
  optional string name = 1;
  optional string count = 2;
  optional DataImage image = 3;
}
message DataGradeAwardInfo {
  optional int64 awardId = 1;
  repeated DataAwardInfo awardInfos = 2;
  optional int32 status = 3;
  optional DataBattleStarActivityGradeMedal descImage = 4;
  optional string description = 5;
  optional int64 countdown = 6;
  optional string awardTime = 7;
  optional string title = 8;
}
message DataRankAwardInfo {
  optional string name = 1;
  repeated DataGradeAwardInfo gradeAwardInfos = 2;
}
message DataItemCardInfo {
  optional int32 itemCardType = 1;
  optional int32 cardPlayType = 2;
  optional string cardValue = 3;
  optional int64 restDuration = 4;
  optional int64 failureTime = 5;
  optional string progressText = 6;
  optional int32 itemCardStatus = 7;
  optional int64 mysteryRankN = 8;
  optional int64 totalDuration = 9;
  optional string cardName = 10;
}
message DataBattleMode {
  optional int32 mode = 1;
  optional DataBattleModeStealTowerData stealTowerData = 2;
}
message DataBattleModeStealTowerData {
  optional int64 triggerTime = 1;
  optional int64 duration = 2;
  optional int64 targetScore = 3;
  optional int64 startTime = 4;
  optional int64 attackerId = 5;
  optional int64 finishTime = 6;
  optional int64 win = 7;
  optional int64 count = 8;
  optional int64 openScore = 9;
  optional bool finish = 10;
}
message DataBattleSettings {
  optional int64 battleId = 1;
  optional int64 startTimeMs = 2;
  optional int64 duration = 3;
  optional string theme = 4;
  optional int64 channelId = 5;
  optional int64 matchType = 6;
  optional int64 finished = 7;
  optional string bannerUrl = 8;
  optional int32 mode = 9;
  optional string config = 10;
  optional string notifySchemeUrl = 11;
  optional string hotsoonNotifySchemeUrl = 12;
  optional DataBattleTitleConfig titleConfig = 13;
  optional DataBattleTitleConfig punishConfig = 14;
  optional int64 punishDuration = 15;
  optional int64 punishStartTimeMs = 16;
  optional int32 optimizeVersion = 17;
  optional bool punishOptimizeOn = 18;
  optional int64 bloodDisplayDuration = 19;
  optional int64 statusDisplayDuration = 20;
  optional string toast = 21;
  optional bool needCloseLinkmic = 22;
  optional bool displayLastResult = 23;
  optional string normalActivityName = 24;
  optional int32 inviteType = 25;
  optional DataBattleConfigSetting battleConfigSetting = 27;
}
message DataBattleTitleConfig {
  optional DataImage icon = 1;
  optional string content = 2;
  optional string scheme = 3;
  optional string hotsoonScheme = 4;
  optional DataImage newIcon = 7;
}
message DataBattleTask {
  optional bool enableTask = 1;
}
message DataBattleArmy {
  optional int64 anchorId = 1;
  repeated DataBattleArmyRankUser rankList = 2;
  optional string anchorIdStr = 3;
}
message DataBattleArmyRankUser {
  optional int64 userId = 1;
  optional string nickname = 2;
  optional DataImage avatarThumb = 3;
  optional int64 score = 4;
  optional string userIdStr = 5;
}
message DataChannelInfo {
  optional int32 vendor = 1;
  optional int32 layout = 2;
  optional int32 dimension = 3;
}
message DataBattleScore {
  optional int32 score = 1;
  optional int64 userId = 2;
  optional int32 rankBonusScore = 3;
  optional int32 weeklyRank = 4;
  optional int32 winningStreak = 5;
  optional int32 winningStreakBonusScore = 6;
  optional int32 battleCountBonusScore = 7;
  optional string userIdStr = 8;
  optional int32 currentBonus = 9;
  optional DataBattleStarActivityGrade grade = 10;
  optional bool scoreRelative = 11;
  optional string scoreRelativeText = 12;
  optional bool isLargePkScore = 13;
  optional bool roomLikeTrigger = 14;
  optional string scoreBlurText = 15;
  optional int64 battleRank = 16;
  optional bool newScoreOpen = 17;
  optional string multiPkTeamScoreText = 18;
  optional int64 multiPkTeamScore = 19;
  optional int64 multiPkTeamRank = 20;
  optional bool isMultiPkRelativeText = 21;
}
message DataBattleTaskInfo {
  optional int64 taskType = 1;
  optional int64 startTime = 2;
  optional int64 duration = 3;
  optional int64 endTime = 4;
  optional int64 taskRound = 5;
  optional int64 collectedCount = 6;
  optional int64 goalCount = 7;
  optional int64 finished = 8;
  optional int64 success = 9;
  optional int64 bonusRatio = 10;
  optional int64 hasNextTask = 11;
}
message DataChijiResult {
  optional string timeStr = 1;
  optional int64 winningStreak = 2;
  optional int64 bonus = 3;
}
message DataChijiHistory {
  optional int64 userId = 1;
  optional bool canParticipate = 2;
  optional int64 originalBonus = 3;
  optional int64 totalParticipations = 4;
  optional int64 participationsThisMonth = 5;
  optional int64 maxWinningStreak = 6;
  optional int64 maxBattleScore = 7;
  optional int64 totalBonus = 8;
  optional int64 bonusThisMonth = 9;
  optional int64 maxBonus = 10;
  repeated DataChijiResult resultList = 11;
}
message DataScheduleItem {
  optional int64 startTime = 1;
  optional int64 duration = 2;
}
message DataBattleStatsMeta {
  optional int64 channelId = 1;
  optional int64 battleId = 2;
  optional DataBattleMode battleMode = 3;
  optional DataBattleSettings battleSettings = 4;
  repeated DataBattleArmy battleArmies = 5;
  optional DataChannelInfo channelInfo = 6;
  repeated DataBattleScore battleScores = 7;
  repeated DataUser anchors = 8;
  optional int64 loserId = 9;
  optional int32 battleType = 10;
  map<int64, DataBattleStatsMetaMultiTeamInfo> multiPkTeamMap = 11;
  optional DataBattleTitleConfig titleConfig = 12;
  optional DataBattleTitleConfig punishConfig = 13;
  optional int32 skinType = 14;
  optional DataTeamTask teamTask = 15;
  optional string teamTaskJson = 16;
}
message DataBattleStatsMetaMultiTeamInfo {
  repeated int64 multiAnchorList = 1;
}
message DataIssueCategory {
  optional string category = 1;
  repeated string issues = 2;
}
message DataIssueCategoryV2 {
  optional string content = 1;
  optional int64 reportSerialId = 2;
  optional int32 inputType = 3;
  repeated DataIssueCategoryV2 subCategories = 4;
  optional int32 feedbackType = 5;
}
message DataBattleGameConfig {
  optional int64 gameId = 1;
  optional int64 propId = 2;
  optional string extra = 3;
}
message DataBattleConsecutiveRecordInfo {
  optional int32 battleResultType = 1;
  optional int64 consecutiveCount = 2;
}
message DataBattleUserInfo {
  optional DataBattleUserInfoBaseUserInfo user = 1;
  repeated DataBattleRivalTag tags = 2;
  optional DataBattleConsecutiveRecordInfo consecutiveRecord = 3;
  optional DataBattleStarActivityGrade grade = 4;
  optional DataBattleStarActivityGradeChange gradeChange = 5;
  optional string teamCoachScore = 6;
  optional int32 pkRole = 7;
  optional int32 pkResult = 8;
  optional DataActivityUser activityUser = 9;
  optional int64 multiPkTeamId = 10;
}
message DataBattleUserInfoBaseUserInfo {
  optional int64 userId = 1;
  optional string nickName = 2;
  optional DataImage avatarThumb = 3;
  optional int32 gender = 4;
}
message DataBattleLinkerInviteMessageExtra {
  optional int64 matchType = 1;
  optional string tips = 2;
  optional int64 inviteType = 3;
  optional int64 subType = 4;
  optional int64 scene = 5;
  optional string theme = 6;
  optional int64 duration = 7;
  optional DataBattleLinkerInviteMessageExtraInviterRivalExtra extra = 8;
  repeated DataBattleRivalTag tags = 9;
  optional DataRoom inviteRoom = 10;
  optional bool previewLiveStream = 11;
  repeated DataBattleRivalTag roomTags = 12;
  repeated DataBattleRivalTag userTags = 13;
  optional string recommendReason = 14;
  optional string activityName = 15;
  optional DataActivityUser activityUser = 16;
  optional DataBattleLinkerInviteMessageExtraGameInfo gameInfo = 17;
  optional int32 anchorPkCheck = 18;
  repeated int64 canNotPassAnchorIds = 19;
  optional int32 switchPlayMode = 20;
  optional DataVoteSetting voteSetting = 21;
}
message DataBattleLinkerInviteMessageExtraInviterRivalExtra {
  optional int64 texttype = 1;
  optional string text = 2;
  optional string label = 3;
}
message DataBattleLinkerInviteMessageExtraGameInfo {
  optional string gameText = 1;
}
message DataBattleLinkerReplyMessageExtra {
  optional int64 inviteType = 1;
}
message DataBattleRivalTag {
  optional DataImage bgImage = 1;
  optional DataImage iconImage = 2;
  optional string content = 3;
  optional string fontColor = 4;
  optional int32 tagType = 5;
}
message DataBattleRival {
  optional DataRoom room = 1;
  optional DataRivalExtraInfo extraInfo = 2;
  repeated DataBattleRivalTag tags = 3;
  repeated DataBattleRivalTag roomTags = 4;
  repeated DataBattleRivalTag userTags = 5;
  optional string recommendReason = 6;
  optional bool isHighlight = 7;
  optional DataBattleStarActivityGradeMedal activityMedal = 8;
  optional DataBattleRivalInviteButton inviteButton = 9;
  optional DataActivityUser activityUser = 10;
  optional bool isNewAnchor = 11;
  optional string signExtra = 12;
  optional int32 fromServerInviteType = 13;
  repeated DataRoom participantRooms = 14;
  optional int32 scene = 15;
  optional int64 linkStatus = 16;
  optional string linkText = 17;
  optional string recommendInfo = 18;
}
message DataBattleRivalInviteButton {
  optional string description = 1;
  optional bool forbidden = 2;
  optional int64 type = 3;
}
message DataTeamTask {
  optional DataTeamTaskConfig config = 1;
  map<string, DataTeamTaskInfo> infoMap = 2;
  optional string battleId = 3;
  optional string triggerUserId = 4;
}
message DataTeamTaskExtraConfig {
  optional DataTeamTaskSpecialGiftCountConfig specialGiftCountConfig = 5;
}
message DataTeamTaskPeriodConfig {
  optional int64 beginSecondRelativeBattleFinish = 1;
  optional int64 endSecondRelativeBattleFinish = 2;
}
message DataTeamTaskSpecialGiftCountConfig {
  optional int64 giftId = 1;
  optional string giftName = 2;
  optional DataImage icon = 3;
  optional int64 maxGiftCountPerUser = 4;
  optional int64 currentGiftCount = 5;
}
message DataTeamTaskConfig {
  map<int64, DataTeamTaskPeriodConfig> periodConfigMap = 1;
  optional int64 rewardBuffMultiple = 2;
  optional int32 taskType = 3;
  optional DataTeamTaskExtraConfig extraConfig = 4;
  optional int32 targetType = 5;
  optional int32 rewardType = 6;
}
message DataTeamTaskInfo {
  optional int64 targetUserCount = 1;
  optional int64 finishUserCount = 2;
  optional int32 result = 3;
  optional DataTeamTaskReward reward = 4;
  optional int64 ratio = 5;
  optional int32 role = 6;
  optional DataItemCardInfo itemCardInfo = 7;
  optional string valueText = 8;
}
message DataTeamTaskReward {
  optional int64 beginSecondRelativeBattleFinish = 1;
  optional int64 endSecondRelativeBattleFinish = 2;
  optional int64 rewardScore = 3;
}
message DataBattleRankUser {
  optional DataUser user = 1;
  optional int64 score = 2;
  optional int64 rank = 3;
  optional int64 gradeBuffScore = 4;
  optional string subDes = 5;
}
message DataBattleAnchorContributors {
  repeated DataBattleRankUser ranks = 1;
  optional int64 totalCount = 2;
  repeated DataBattleBuffCardInfo buffCardInfos = 3;
}
message DataBattleContributorsRankListV2 {
  map<string, DataBattleAnchorContributors> anchorContributorsMap = 1;
  optional DataTeamTask teamTask = 2;
  optional DataBattleSettings battleSettings = 3;
  optional int64 loserId = 4;
  optional string loserIdStr = 5;
}
message DataPrecisionMatchSettings {
  optional bool acceptPrecisionMatch = 1;
  optional int64 precisionMatchPreferGender = 2;
  optional int64 precisionMatchFrequency = 3;
}
message DataOperationalPlay {
  optional int32 operationalPlayType = 1;
  optional DataMultipleMatches3 multipleMatches3 = 2;
}
message DataMultipleMatches3 {
  map<int64, DataMultipleMatchesUserInfo> userInfosMap = 1;
  optional int64 currentMatch = 2;
  optional bool end = 3;
  optional int64 winnerUid = 4;
  optional int64 currentWinnerUid = 5;
}
message DataMultipleMatchesUserInfo {
  optional int64 winCount = 1;
}
message DataActivityUser {
  optional string activityName = 1;
  optional DataText displayTabText = 2;
  optional int64 userId = 3;
  optional string userIdStr = 4;
  repeated DataBattleRivalTag labels = 5;
  optional string subTabText = 6;
  optional bool isValid = 7;
  optional string message = 8;
  optional DataImage buttonImage = 9;
  repeated DataImage backGroundImages = 10;
}
message DataActivityPKConf {
  optional string activityName = 1;
  optional int64 startTime = 2;
  optional int64 endTime = 3;
  optional DataText displayTabText = 4;
  repeated DataImage displayTabImages = 5;
  optional string searchTabText = 6;
  optional string rulePageUrl = 7;
  optional DataImage randomBattleButtonImage = 8;
  optional string randomBattleButtonText = 9;
  optional DataImage inviteBattleButtonImage = 10;
  optional string inviteBattleButtonText = 11;
  repeated DataImage backGroundImages = 12;
  optional DataImage topRightImage = 13;
  optional string topRightImageTabUrl = 14;
  optional string historyPageUrl = 15;
  optional string step = 16;
}
message DataBattleSelfData {
  optional int64 pkDurationTime = 1;
  optional int32 pkValueType = 2;
  optional int64 likeType = 3;
  optional int64 giftValueType = 4;
  optional int64 giftUvType = 5;
  optional int64 ticketType = 6;
  optional int64 setUid = 7;
}
message DataBattleConfigSetting {
  optional int32 modType = 1;
  optional DataBattleSelfData selfData = 2;
  optional DataVoteSetting voteData = 3;
  optional DataBattleSelfSettingRate selfSettingRate = 4;
}
message DataBattleSelfSettingRate {
  optional int64 pkValueType = 1;
  optional int64 pk2LikeRate = 2;
  optional int64 gift2PkRate = 3;
  optional int64 giftUv2PkRate = 4;
  optional int64 ticket2PkRate = 5;
  optional int64 setUid = 6;
}
message DataSelfDataConfig {
  repeated DataSelfSetData singleLikeConfig = 1;
  repeated DataSelfSetData singleTicketConfig = 2;
  repeated DataSelfSetData composeLikeConfig = 3;
  repeated DataSelfSetData giftConfig = 4;
  repeated DataSelfSetData giftUvConfig = 5;
  repeated DataVoteSetting voteConfig = 6;
}
message DataSelfSetData {
  optional int64 rateType = 1;
  optional int64 rate = 2;
  optional bool rateDirectionPositive = 3;
  optional string setDataDes = 4;
}
message DataVoteSetting {
  optional int64 voteType = 1;
  optional string voteDes = 2;
}
message DataPanelTitle {
  optional string title = 1;
  optional string desc = 2;
  optional DataImage iconBgImage = 3;
}
message DataCircleInfo {
  optional int64 id = 1;
  optional string name = 2;
  optional DataImage coverImg = 3;
  optional string description = 4;
}
message DataStageStruct {
  optional string title = 1;
  optional string desc = 2;
  optional string iconUrlLock = 3;
  optional string iconUrlUnlock = 4;
  optional int64 type = 5;
  optional int64 subType = 6;
  optional int64 unlockCount = 7;
  optional DataHiddenGiftExtra giftExtra = 8;
  optional DataShootExtra shootExtra = 9;
  optional DataPosterExtra posterExtra = 10;
}
message DataHiddenGiftExtra {
  optional string giftId = 1;
}
message DataShootExtra {
  optional int64 shootTimes = 1;
  repeated string text = 2;
  optional int64 assetId = 3;
}
message DataPosterExtra {
  optional string posterId = 1;
}
message DataEasterEggData {
  optional bool hasEasterEgg = 1;
  optional int64 stage = 2;
  optional int64 totalStage = 3;
  optional int64 effectsNum = 4;
  optional int64 startCount = 5;
  optional int64 endCount = 6;
  optional int64 count = 7;
  optional string panelUrl = 8;
  optional DataImage entranceIcon = 9;
}
message DataEcomLiveCard {
  optional DataEcomProduct product = 1;
  optional DataEcomIcon icon = 2;
  optional DataEcomCampaign campaign = 3;
}
message DataEcomProduct {
  optional int64 promotionId = 1;
  optional int64 productId = 2;
  optional string title = 3;
  optional string coverImage = 4;
  optional DataEcomPrice price = 5;
  optional int64 regularPrice = 6;
  optional int64 depositPrice = 7;
}
message DataEcomPrice {
  optional string prefix = 1;
  optional string suffix = 2;
  optional int64 byCent = 3;
  optional string formatPrice = 4;
}
message DataEcomIcon {
  optional string url = 1;
}
message DataEcomCampaign {
  optional int64 remainingSeconds = 1;
  optional DataEcomAuction auction = 2;
  optional int64 type = 3;
}
message DataEcomAuction {
  optional int64 price = 1;
  optional string priceLabel = 2;
  optional string buttonLabel = 3;
  optional DataEcomBidder user = 4;
  optional int64 status = 5;
}
message DataEcomBidder {
  optional string name = 1;
  optional DataEcomAvatar avatar = 2;
}
message DataEcomAvatar {
  optional string url = 1;
  optional int64 width = 2;
  optional int64 height = 3;
}
message DataEcomPop {
  optional int64 productId = 1;
  optional int64 promotionId = 2;
  optional string title = 3;
  optional string cover = 4;
  optional DataEcomPrice minPrice = 5;
  optional string sellingPoint = 6;
  optional string jumanjiJson = 7;
}
message DataCoupon {
  optional string icon = 1;
  optional string startTime = 2;
  optional string expireTime = 3;
  optional string couponName = 4;
  optional string url = 5;
  optional string couponString = 6;
  optional int64 countdown = 7;
  optional int64 showType = 8;
  optional string couponMetaId = 9;
  optional string couponType = 10;
}
message DataRedpack {
  optional int64 redpackType = 1;
  optional int64 redpackActivityId = 2;
  optional string redpackActivityDisplayText = 3;
  optional int64 startApplyTime = 4;
  optional int64 endApplyTime = 5;
  optional int64 preheatTime = 6;
  optional int64 serverTime = 7;
  optional int64 hasApplied = 8;
  optional string iconUrl = 9;
}
message DataEcomGoodsCard {
  optional int64 productId = 1;
  optional string title = 2;
  optional string cover = 3;
  optional DataEcomPrice minPrice = 4;
  optional DataCoupon coupon = 5;
  optional int64 promotionId = 6;
  optional int64 jumpDestination = 7;
  optional int64 cardType = 8;
  optional DataRedpack redpack = 9;
}
message DataRedsShowInfo {
  optional int32 dataType = 1;
  optional string fullText = 2;
}
message DataEpisode {
  optional int64 episodeId = 1;
  optional string episodeIdStr = 2;
  optional string itemId = 3;
  optional int32 status = 4;
  optional DataUser owner = 5;
  optional int64 ownerUserId = 6;
  optional string title = 7;
  optional DataWatchInfo watchInfo = 8;
  optional DataImage background = 9;
  optional string releaseTime = 10;
  optional int64 attachRoomId = 11;
  optional string attachRoomIdStr = 12;
  optional int64 liveId = 13;
  optional string currentPeriod = 14;
  optional int64 seasonId = 15;
  optional DataImage cover = 16;
  optional DataImage coverVertical = 17;
  optional DataShare share = 18;
  optional DataVideoInfo videoInfo = 19;
  repeated DataEpisodeHighLight highlights = 20;
  optional DataMoreHighLightList moreHighLightList = 21;
  optional DataStatistics statistics = 22;
  optional DataEpisodeMod episodeType = 23;
  optional DataUserStatistics userStatistics = 24;
  optional DataOnlyTaInfo onlyTa = 25;
  optional string selectionUrl = 26;
  repeated DataToolbarItemConfig toolbarList = 27;
  optional string relationPlaceText = 28;
  repeated string operationPlaceTextList = 29;
  optional string showName = 30;
  optional string briefInfoJson = 31;
  repeated DataTopicInfo topicList = 32;
  optional DataRoomAuthStatus roomAuth = 33;
  optional bool collected = 34;
  optional int64 roomId = 35;
  optional string topicInfoUrl = 36;
  optional int64 watchPeriod = 37;
  optional int64 latestPeriod = 38;
  optional DataCommentTcsInfo commentTcsInfo = 39;
  optional string seasonIdStr = 40;
  optional int32 currentPeriodRaw = 41;
  optional bool hasCommerceGoods = 42;
  optional DataRoomCart roomCart = 43;
  optional int32 lastWatchPeriod = 44;
  optional string watchPvRaw = 45;
  optional int64 nextSpecialEpisodeId = 46;
  optional int32 style = 47;
  optional DataEpisodePremierePlay playControl = 48;
  optional DataEpisodePreviewImage previewImage = 49;
  optional DataVSGiftPannel giftPannel = 50;
  optional DataVSPannelIcon pannelIcon = 51;
  optional DataTopicMeta topicMeta = 52;
  optional string lynxTopicInfoUrl = 53;
  repeated DataToolbarItemConfig pannelToolbar = 54;
  optional DataEpisodePreviewBottom previewBottom = 55;
  optional string drawSubTitle = 56;
  optional int64 seasonPv = 57;
  optional DataImage seasonCoverVertical = 58;
  optional string playerExtentionConfig = 59;
  repeated DataVSCameraInfo cameraInfos = 60;
  optional int64 defaultCameraId = 61;
  optional string defaultCameraIdStr = 62;
  optional string playerExtentionConfigH5 = 63;
  optional DataImage previewBackground = 64;
  optional bool startHlFirst = 65;
  optional DataEpisodeStartHighLight startHl = 66;
  optional string watchPeriodTextV2 = 67;
  optional int64 priorityCameraId = 68;
  optional DataVSCameraInfo priorityCamera = 69;
  optional string multiSeasonTag = 70;
  optional DataImage seasonCover = 71;
  optional string latestPeriodStr = 72;
  optional int32 seasonUpdateStatus = 73;
  optional DataImage itemCommentIcon = 74;
  optional DataItemComment itemComment = 75;
  optional DataWatermark watermark = 76;
  optional DataVSWatermark vsWatermark = 77;
  optional int64 versionForWebcastRoom = 78;
  optional DataEpisodePaidInfo paidInfo = 79;
  optional bool extentionUsingCollect = 80;
  optional string seasonTypeName = 81;
  optional DataToolbarBackgroundConfig toolbarBackgroundConfig = 82;
  optional DataVSBar vsBar = 83;
  optional DataSearchInfo searchInfo = 84;
  optional DataWatchInfo seasonWatchInfo = 85;
  optional bool isForceInsert = 86;
  optional int64 indexInAlbumList = 87;
  optional DataPCInfo pcInfo = 88;
  optional DataVSLinkInfo linkRoomInfo = 89;
  optional DataEpisodeCorrelationSeasonInfo episodeCorrelationSeasonInfo = 90;
  optional DataCommentConfig commentConfig = 91;
  optional string cameraInfosTableTitle = 92;
  optional bool needRecord = 93;
  optional DataEpisodeBasicInfo episodeBasicInfo = 100;
  optional DataEpisodeExtraBasicInfo episodeExtraBasicInfo = 200;
  optional DataSeasonBasicInfo seasonBasicInfo = 300;
  optional DataSeasonExtraBasicInfo seasonExtraBasicInfo = 400;
  optional DataShowGeneralInfo showGeneralInfo = 500;
  optional DataShowExperienceInfo showExperienceInfo = 600;
  optional DataShowDistributionInfo showDistributionInfo = 700;
  optional DataShowSupplyInfo showSupplyInfo = 800;
}
message DataEpisodeBasicInfo {
  repeated DataMatchTab tabs = 1;
  repeated DataMatchTab replayTabs = 2;
  optional DataMatchTitle matchTitle = 3;
  optional DataToutiaoMatchData matchData = 4;
  optional DataPlayByPlayInfo playByPlayInfo = 5;
  optional DataMultiCameraBasicInfo multiCameraBasicInfo = 6;
  optional string tabColor = 7;
  map<int64, int64> matchHostChannelMap = 8;
  optional int64 mainReplayId = 9;
  optional int64 replayCameraId = 10;
  optional int32 replayType = 11;
  optional bool isRoomFinish = 12;
  optional string matchHashTag = 13;
  optional DataSharePosterInfo sharePosterInfo = 14;
  optional DataMatchShareBackground matchShareBackground = 15;
  optional DataShareResource shareResource = 16;
  optional DataImage shareIcon = 17;
}
message DataEpisodeExtraBasicInfo {

}
message DataSeasonBasicInfo {
  optional int32 seasonType = 1;
}
message DataSeasonExtraBasicInfo {

}
message DataShowGeneralInfo {
  optional float ratingScore = 2;
  optional DataImage horizontalCoverX2 = 20;
  optional DataImage verticalCoverX2 = 21;
  optional DataImage horizontalCoverX3 = 22;
  optional DataImage verticalCoverX3 = 23;
  optional bool syncFromXigua = 1000;
}
message DataShowExperienceInfo {
  optional DataPlayerProgressBarSkin playerProgressBarSkin = 1;
  optional int64 xiguaTvCastConfig = 2;
  optional int32 vsCommentStyle = 101;
  optional bool vsCommentSwitcher = 102;
}
message DataShowDistributionInfo {
  optional string recommendText = 1;
  optional DataEpisodeStartHighLight modelMatchedHl = 2;
}
message DataShowSupplyInfo {

}
message DataPlayerProgressBarSkin {
  optional string barColor = 1;
  optional DataImage sliderStaticIcon = 2;
  optional DataImage sliderDynamicIcon = 3;
}
message DataShowCenterShowInfo {
  optional DataImage horizontalCover = 1;
  optional DataImage verticalCover = 2;
  optional string mainTitle = 3;
  optional string subTitle = 4;
  optional string tag = 5;
  optional bool lastSeen = 6;
  optional string updateStatusDesc = 7;
  optional string cardColor = 8;
}
message DataEpisodeCorrelationSeasonInfo {
  optional DataSeasonBriefInfo seasonBriefInfo = 1;
  optional DataShowCenterShowInfo showInfo = 2;
}
message DataPCInfo {
  optional string firstDisplayBackgroundColorLeft = 1;
  optional string firstDisplayBackgroundColorMiddle = 2;
  optional string firstDisplayBackgroundColorRight = 3;
}
message DataSearchInfo {
  optional string seasonAssistInfo = 1;
  optional string searchBackgroundColor = 2;
  repeated int64 albumListEpisodeIds = 3;
  repeated DataSearchRelationSeasonInfo relationSeasonInfo = 4;
  optional int64 albumListShowTitle = 5;
  optional string actorsInfo = 6;
}
message DataSearchRelationSeasonInfo {
  optional int32 seasonUpdateStatus = 1;
  optional int64 seasonId = 2;
  repeated int64 episodeIds = 3;
}
message DataToolbarBackgroundConfig {
  optional string color = 1;
  optional DataImage image = 2;
  optional int64 switch = 3;
}
message DataFreeViewRange {
  optional int64 startTime = 1;
  optional int64 endTime = 2;
}
message DataEpisodePaidInfo {
  optional int32 paidType = 1;
  optional int32 viewRight = 2;
  optional int64 duration = 3;
  optional DataVideoInfo videoInfo = 4;
  optional DataOrderData orderData = 5;
  repeated DataTicketData goodsInfos = 6;
  optional int64 feedDuration = 7;
  optional bool isdelivery = 8;
  repeated DataItemDetail goodsInfosV2 = 9;
  repeated DataFreeViewRange freeViewRanges = 10;
}
message DataWatermark {
  optional int64 position = 1;
  optional int64 landscapeDis = 2;
  optional int64 verticalDis = 3;
  repeated DataWatermarkIcon watermarkIcon = 4;
}
message DataWatermarkIcon {
  optional DataImage icon = 1;
  optional int64 iconWidth = 2;
  optional int64 iconType = 3;
}
message DataItemComment {
  optional DataImage itemCommentIconDark = 1;
  optional DataImage itemCommentIconLight = 2;
}
message DataEpisodeHighLight {
  optional int64 location = 1;
  optional string description = 2;
  optional DataImage image = 3;
  optional DataImage smallImage = 4;
  optional int64 locationEnd = 5;
  optional bool hot = 6;
  optional int64 collectionId = 7;
}
message DataEpisodeStartHighLight {
  optional bool standard = 1;
  optional string description = 2;
  optional int64 location = 3;
}
message DataCommentTcsInfo {
  optional int64 commentTcsType = 1;
  optional int64 commentTcsProject = 2;
  repeated int64 banAntidirtTables = 3;
  repeated int64 selfVisibleAntidirtTables = 4;
}
message DataShare {
  optional string shareUrl = 1;
  optional string anchorShareText = 2;
  optional string userShareText = 3;
}
message DataMoreHighlight {
  optional string title = 1;
  optional string desc = 2;
  repeated DataAlbumItem episodes = 3;
  repeated string backgroundColors = 4;
  optional DataMoreSeason moreSeasons = 5;
  optional int64 total = 6;
  optional int64 extensionType = 7;
  repeated DataMoreEntry moreEntryList = 8;
  optional int64 normalEpisodeCount = 9;
}
message DataMoreEntry {
  optional string title = 1;
  optional string desc = 2;
  repeated DataAlbumItem episodes = 3;
  repeated string backgroundColors = 4;
  optional int64 total = 6;
  optional int64 extensionType = 7;
  optional int64 displayType = 8;
  repeated int64 episodeIds = 9;
  optional int64 batchSize = 10;
  optional string secondTitle = 11;
  repeated string episodeIdsStr = 12;
}
message DataMoreHighLightList {
  optional string subTitle = 1;
  optional string desc = 2;
  repeated int64 episodeIds = 3;
  repeated string backgroundColors = 4;
  optional string introductionUrl = 5;
  optional int64 extensionType = 6;
  optional int64 normalEpisodeCount = 7;
}
message DataUserStatistics {
  optional int64 watchDuration = 1;
  optional float watchRatio = 2;
  optional int64 watchStatTime = 3;
  optional string watchPeriod = 4;
  optional string watchEpisodeId = 5;
}
message DataSegmentFlowTime {
  optional int64 startOffset = 1;
  optional int64 endOffset = 2;
  optional int64 startOffsetFlowTime = 3;
}
message DataStatistics {
  optional string id = 1;
  optional int64 commentCount = 2;
  optional int64 diggCount = 3;
  optional int64 downloadCount = 4;
  optional int64 playCount = 5;
  optional int64 shareCount = 6;
  optional int64 forwardCount = 7;
  optional int32 loseCount = 8;
  optional int32 loseCommentCount = 9;
}
message DataVideoModelContainer {
  optional string json = 1;
}
message DataVideoPlayInfo {
  optional string format = 1;
  repeated DataVideoPlayInfoUrl playUrls = 2;
  optional string postUrl = 3;
}
message DataVideoPlayInfoUrl {
  optional string definition = 1;
  optional string main = 2;
  optional string backup = 3;
  optional int64 height = 4;
  optional int64 width = 5;
}
message DataDefinitionInfo {
  optional string definition = 1;
  optional int32 fps = 2;
  optional int32 disable = 3;
}
message DataVideoInfo {
  optional DataVideoModelContainer playInfo = 1;
  optional DataVideoInfoStartLocation startPosition = 2;
  optional DataVideoModelContainer castInfo = 3;
  optional DataVideoModelContainer watermarkedEncrypt = 4;
  optional string vid = 5;
  repeated DataSegmentFlowTime segmentFlowTimeList = 6;
  optional int64 duration = 7;
  repeated DataVideoInfoSize downloadSizes = 8;
  optional int32 videoCode = 9;
  optional DataVideoPlayInfo unfoldPlayInfo = 10;
  optional int32 videoModelType = 11;
  optional DataStreamVideoMeta streamVideoMetaInfo = 12;
  optional DataStreamUrl streamUrl = 13;
  optional DataCommentSpecialEffectData commentSpecialEffectData = 14;
  optional DataReplayStreamUrl replayStreamUrl = 15;
  optional bool refresh = 16;
  optional string playAuthToken = 17;
  repeated DataDefinitionInfo definitionInfos = 18;
}
message DataVideoInfoStartLocation {
  optional int64 loc = 1;
  optional int64 time = 2;
}
message DataVideoInfoSize {
  optional string key = 1;
  optional string text = 2;
}
message DataCommentSpecialEffectData {
  optional int32 commentSpecialEffectType = 1;
  repeated string effectsDataUrls = 2;
  repeated DataCommentSpecialEffectDataTimeRange maskedOffsetList = 3;
  optional int64 specialEffectInterval = 4;
  optional string effectTypeSdkKey = 5;
  optional int64 maxCommentCountPerEffect = 6;
}
message DataCommentSpecialEffectDataTimeRange {
  optional int64 startOffset = 1;
  optional int64 endOffset = 2;
}
message DataStreamVideoMeta {
  optional int64 streamId = 1;
  optional DataStreamVideoMetaStreamLocation startLocation = 2;
  optional DataStreamVideoMetaStreamLocation endLocation = 3;
}
message DataStreamVideoMetaStreamLocation {
  optional int64 offset = 1;
  optional int64 timestamp = 2;
}
message DataReplayStreamUrl {
  map<string, string> tlsPullUrlMapMap = 1;
  map<string, string> resolutionNameMapMap = 2;
  optional string defaultResolutionKey = 3;
  optional int64 playAlignOffset = 4;
  repeated DataStreamAddr streamAddrList = 5;
}
message DataStreamAddr {
  optional string resolutionKey = 1;
  optional string resolutionName = 2;
  optional string tslPullUrl = 3;
}
message DataOnlyTaSegment {
  optional int64 startOffset = 1;
  optional int64 stopOffset = 2;
}
message DataOnlyTaSegments {
  optional int64 taId = 1;
  optional string taNickName = 2;
  optional DataImage avatar = 3;
  repeated DataOnlyTaSegment segments = 4;
}
message DataOnlyTaInfo {
  optional string fullText = 1;
  optional DataImage fullAvatar = 2;
  repeated DataOnlyTaSegments tas = 3;
}
message DataEpisodeExtra {

}
message DataAlbumItem {
  optional DataEpisode episode = 1;
  optional DataRoom room = 2;
  optional int32 itemType = 3;
  optional bool isPlaying = 4;
  optional bool isHide = 5;
}
message DataSeasonAlbumTab {
  repeated DataAlbumItem episodes = 1;
  repeated DataAlbumItem specialEpisodes = 2;
  optional string briefInfo = 3;
  optional string premiereTime = 4;
  optional int64 episodeTotal = 5;
  optional int64 specialEpisodeTotal = 6;
}
message DataEpisodeActors {
  optional int64 userId = 1;
  optional string name = 2;
  optional DataImage avatar = 3;
  optional int64 verifyType = 4;
  optional string label = 5;
}
message DataSeasonBriefInfo {
  optional int32 seasonType = 1;
  optional int32 updatingStatus = 2;
  optional int64 episodeCount = 3;
  optional string releaseTime = 4;
  optional string runningTime = 5;
  optional string directors = 6;
  optional string actors = 7;
  optional string previewtText = 8;
  optional DataImage background = 9;
  repeated DataUser users = 10;
  repeated DataEpisodeActors episodeActors = 11;
  optional string introduce = 12;
  optional int64 multiSeasonOrder = 13;
  optional string multiSeasonTag = 14;
}
message DataSeason {
  optional string id = 1;
  optional string title = 2;
  optional string desc = 3;
  optional int64 ownerId = 4;
  optional DataImage cover = 5;
  optional DataImage coverVertical = 6;
  optional int32 status = 7;
  repeated DataEpisode episodes = 8;
  repeated DataEpisode specialEpisodes = 9;
  optional DataStatistics statistics = 10;
  optional DataUser owner = 11;
  optional DataSeasonBriefInfo briefInfo = 12;
  repeated DataAlbumItem albumItems = 13;
  optional string actorIntroTitle = 14;
  optional DataUserStatistics userStatistics = 101;
}
message DataMultiSeasonInfo {
  repeated DataSeasonTag seasonTags = 1;
}
message DataSeasonTag {
  optional int64 seasonId = 1;
  optional string seasonTag = 2;
  optional string seasonIdStr = 3;
}
message DataVarietyShow {
  optional string id = 1;
  optional string title = 2;
  optional string desc = 3;
  optional DataImage cover = 4;
  optional DataImage dynamicCover = 5;
  optional DataImage dynamicCoverLow = 6;
  repeated DataSeason seasons = 7;
  optional DataStatistics statistics = 8;
  optional DataUser owner = 9;
}
message DataTopicInfo {
  optional int64 challengeId = 1;
  optional string challengeName = 2;
  optional bool isCommerce = 3;
  optional int64 playCount = 4;
  optional DataImage cover = 5;
  optional DataTimePoint seeTime = 6;
  optional string challengeDesc = 7;
  optional int64 subType = 8;
  optional string highlightTime = 9;
}
message DataTopicMeta {
  optional DataImage background = 1;
  repeated string backgroundColors = 2;
  optional DataImage cardIcon = 3;
}
message DataTimePoint {
  optional int64 start = 1;
  optional int64 duration = 2;
}
message DataFeedsVSInfo {
  optional int32 episodeStage = 1;
  optional DataEpisode episode = 2;
  optional DataRoom room = 3;
}
message DataUserFilterKeyword {
  optional int64 wordId = 1;
  optional string keyword = 2;
  optional int64 insertTime = 3;
}
message DataMoreSeason {
  repeated DataAlbumItem episodes = 1;
  optional string moreSeasonTitle = 2;
}
message DataVSSearchData {
  optional DataEpisode generalInfo = 1;
  repeated DataEpisode albumList = 2;
  repeated DataEpisode relationList = 3;
  optional int64 latestPeriod = 4;
  optional int64 albumCount = 5;
}
message DataSearchLoadMoreData {
  optional bool hasMore = 1;
  repeated DataSearchLoadMoreDataSearchData data = 2;
  optional int64 offset = 3;
  optional int64 total = 4;
}
message DataSearchLoadMoreDataSearchData {
  optional string name = 1;
  optional string title = 2;
  optional int64 episodeId = 3;
  optional string schema = 4;
  optional int64 seq = 5;
}
message DataStandardMoney {
  optional int64 money = 1;
  optional string currencyName = 2;
  optional string currencyCharacter = 3;
  optional string moneyStr = 4;
}
message DataTimeStruct {
  optional int64 timestamp = 1;
  optional string timezone = 2;
  optional string strTime = 3;
}
message DataStampInfo {
  optional int32 type = 1;
  optional string id = 2;
  optional string title = 3;
  optional string openUrl = 4;
  optional string webUrl = 5;
  optional DataImage icon = 6;
  optional int32 status = 7;
  optional string description = 8;
  optional DataImage thumbnail = 9;
  optional string extra = 98;
  optional string logExtra = 99;
}
message DataStampQuery {
  optional string id = 1;
  optional int32 type = 2;
}
message DataAudienceEntranceInfo {
  optional int64 interactType = 1;
  optional string elemId = 2;
  optional int64 startId = 3;
  optional int64 status = 4;
  optional string name = 5;
  optional DataImage icon = 6;
  optional bool checkEntranceVisitable = 7;
  optional bool needMetricsReport = 8;
  optional string imExtra = 97;
  optional string logExtra = 98;
  optional string entranceExtra = 99;
}
message DataAppEntranceExtra {
  optional int64 gameId = 1;
  optional int64 gameKind = 2;
  optional string appId = 3;
  optional string schemaUrl = 5;
  optional bool displayInPrimaryEntrance = 6;
  optional string extra = 99;
}
message DataCustomizedCardInfo {
  optional int32 status = 1;
  optional string openUrl = 2;
  optional int64 duration = 3;
  optional int32 cardType = 4;
  optional string content = 5;
  optional string imExtra = 97;
  optional string logExtra = 98;
  optional string coverExtra = 99;
  optional string appId = 100;
  optional string serverTimestamp = 101;
}
message DataStandardCard {
  optional DataCardStatusTag statusTag = 1;
  optional DataCardPropertyTag propertyTag = 2;
  optional DataImage image = 3;
  optional DataCardTitle title = 4;
  optional DataCardButton btn = 5;
}
message DataCardStatusTag {
  optional int32 tagType = 1;
  optional string longitude = 2;
  optional string latitude = 3;
  optional string startTimestamp = 4;
  optional string stopTimestamp = 5;
}
message DataCardPropertyTag {
  optional DataImage storeLogo = 2;
  optional string storeName = 3;
}
message DataCardTitle {
  optional int32 tagType = 1;
  optional string mainTitle = 2;
  optional string subTitle = 3;
}
message DataCardButton {
  optional int32 btnType = 1;
  optional string price = 2;
  optional string color = 3;
}
message DataGameCardInfo {
  optional int32 displayStatus = 1;
  optional int64 status = 2;
  optional string openUrl = 3;
  optional string content = 4;
  optional string appId = 5;
  optional int64 saveTime = 6;
  optional int64 duration = 7;
}
message DataGameCard {
  optional DataCardImage cardimage = 1;
  optional string description = 2;
  optional string title = 3;
  optional string btnTitle = 4;
  optional string fadeColor = 5;
}
message DataCardImage {
  optional DataImage customerImage = 1;
  optional DataImage defaultImage = 2;
}
message DataTaskCurrentInfo {
  optional int64 pkWinCount = 1;
  optional int64 roomLikeCount = 2;
  map<int64, int64> customizedGiftCountMap = 3;
  optional int64 subscribeCount = 4;
}
message DataTaskConditionExtra {
  optional int64 customizedGiftId = 1;
  optional DataImage giftIcon = 2;
}
message DataTaskCondition {
  optional string key = 1;
  optional int64 value = 2;
  optional string operator = 3;
  optional DataTaskConditionExtra extra = 4;
}
message DataTaskTodoStep {
  repeated DataTaskCondition conditions = 1;
}
message DataTaskTodo {
  repeated DataTaskTodoStep steps = 1;
}
message DataTaskRecord {
  optional int32 taskStatus = 1;
  optional int64 taskClassId = 2;
  repeated DataTaskTodo todos = 3;
  optional DataTaskCurrentInfo currentInfo = 4;
  optional int32 wishType = 5;
  optional DataWishContributor wishContributor = 6;
}
message DataPatternRef {
  optional string key = 1;
  optional string defaultPattern = 2;
}
message DataTextFormat {
  optional string color = 1;
  optional bool bold = 2;
  optional bool italic = 3;
  optional int32 weight = 4;
  optional int32 italicAngle = 5;
  optional int32 fontSize = 6;
  optional bool useHeighLightColor = 7;
  optional bool useRemoteClor = 8;
}
message DataTextPieceUser {
  optional DataUser user = 1;
  optional bool withColon = 2;
}
message DataTextPieceGift {
  optional int64 giftId = 1;
  optional DataPatternRef nameRef = 2;
}
message DataTextPieceHeart {
  optional string color = 1;
}
message DataTextPiecePatternRef {
  optional string key = 1;
  optional string defaultPattern = 2;
}
message DataTextPieceImage {
  optional DataImage image = 1;
  optional float scalingRate = 2;
}
message DataTextPiece {
  optional int32 type = 1;
  optional DataTextFormat format = 2;
  optional string stringValue = 11;
  optional DataTextPieceUser userValue = 21;
  optional DataTextPieceGift giftValue = 22;
  optional DataTextPieceHeart heartValue = 23;
  optional DataTextPiecePatternRef patternRefValue = 24;
  optional DataTextPieceImage imageValue = 25;
}
message DataText {
  optional string key = 1;
  optional string defaultPattern = 2;
  optional DataTextFormat defaultFormat = 3;
  repeated DataTextPiece pieces = 4;
}
message DataCombinedText {
  repeated DataDisplayItem displayItems = 1;
  optional DataSchemaInfo schemaInfo = 10;
  optional DataComboInfo comboInfo = 11;
}
message DataDisplayItem {
  optional int32 displayItemType = 1;
  optional bool comboFresh = 20;
  optional DataSchemaInfo schemaInfo = 21;
  optional DataImagesItem imagesItem = 50;
  optional DataTextItem textItem = 51;
}
message DataImagesItem {
  repeated DataImage images = 1;
  optional int32 displayStyle = 20;
}
message DataTextItem {
  optional DataText text = 1;
}
message DataSchemaInfo {
  optional string schemaUrl = 1;
}
message DataComboInfo {
  optional int64 comboSeq = 1;
  optional int64 comboOrder = 2;
}
message DataAppUserInfo {
  optional string appId = 1;
  optional int64 gameId = 2;
  optional string openUid = 3;
}
message DataWishInfoExtra {
  optional int64 giftId = 1;
  optional DataImage giftIcon = 2;
  optional int64 giftType = 3;
  optional int64 diamondCount = 4;
}
message DataWishContributor {
  repeated DataWishContributorContributor contributors = 1;
  optional int64 totalCount = 2;
}
message DataWishContributorContributor {
  optional int64 userId = 1;
  optional string secUserId = 2;
  optional DataImage avatar = 3;
}
message DataWishInfo {
  optional string wishName = 1;
  optional int32 wishType = 2;
  optional int32 wishStatus = 3;
  optional int64 currentProgress = 4;
  optional int64 targetProgress = 5;
  optional DataWishInfoExtra wishInfoExtra = 6;
  optional DataWishContributor wishContributor = 7;
}
message DataStageInfo {
  optional string stageName = 1;
  repeated DataWishInfo wishList = 2;
}
message DataThemeWish {
  optional string themeName = 1;
  map<string, DataImage> backgroundsMap = 2;
  repeated DataStageInfo stageList = 3;
}
message DataGradeBuffInfo {
  optional int64 buffLevel = 1;
  optional int32 status = 2;
  optional int64 endTime = 3;
  map<int64, int64> statsInfoMap = 4;
  optional DataImage buffBadge = 5;
}
message DataImage {
  repeated string urlList = 1;
  optional string uri = 2;
  optional int64 height = 3;
  optional int64 width = 4;
  optional string avgColor = 5;
  optional int32 imageType = 6;
  optional string openWebUrl = 7;
  optional DataImageContent content = 8;
  optional bool isAnimated = 9;
  repeated DataImageNinePatchSetting flexSettingList = 10;
  repeated DataImageNinePatchSetting textSettingList = 11;
}
message DataImageContent {
  optional string name = 1;
  optional string fontColor = 2;
  optional int64 level = 3;
  optional string alternativeText = 4;
}
message DataImageNinePatchSetting {
  repeated int64 settingList = 1;
}
message DataDiggIcon {
  optional int64 id = 1;
  optional DataImage normalIconUrl = 2;
}
message DataWebImage {
  repeated string urlList = 1;
}
message DataKtvSongStruct {
  optional int64 id = 1;
  optional string title = 2;
  optional string author = 3;
  optional int64 lyricType = 4;
  optional string songUrl = 5;
  repeated string lyricUrlList = 6;
  optional int64 duration = 7;
  optional string coverUrl = 8;
  optional int64 songPattern = 9;
  optional double previewStartTime = 10;
  optional DataKtvSongStructAudioInfo fullTrack = 11;
  optional DataKtvSongStructAudioInfo accompanimentTrack = 12;
  optional string newCoverUrl = 13;
  optional string midiUrl = 14;
  optional bool isFavorite = 15;
  optional DataKtvSongStructOrderInfo orderInfo = 16;
  repeated string tags = 17;
  map<string, string> extMap = 18;
  repeated DataMusicInterval musicClimax = 19;
  repeated DataMusicInterval preludes = 20;
  repeated DataMusicInterval interludes = 21;
  repeated DataMusicInterval segments = 22;
  optional string patternFileUrl = 23;
  repeated DataMusicInterval bridgeSegments = 24;
  repeated DataMusicInterval mainSegments = 25;
  repeated DataMusicInterval finaleSegments = 26;
  optional DataChorusVideoInfo chorusInfo = 27;
  optional int32 songType = 28;
  optional string addSongSource = 29;
  optional int64 totalOrderWithCurAnchor = 30;
  optional int64 globalTotalOrder = 31;
  repeated int64 artistIds = 32;
  optional string idStr = 33;
  repeated int32 songCopyright = 34;
  optional bool isPriorSong = 35;
  optional bool isFragmentSong = 36;
  optional string fragmentLyric = 37;
}
message DataKtvSongStructAudioInfo {
  optional string url = 1;
  optional int64 songPatten = 2;
  optional int64 audioId = 3;
  optional double volumeLufs = 4;
  optional double volumePeak = 5;
  optional double bpm = 6;
  optional string beatsPointUrl = 7;
  optional int64 createTime = 8;
}
message DataKtvSongStructUserInfo {
  optional int64 id = 1;
  optional string nickname = 2;
  optional DataImage avatar = 3;
  optional string idStr = 4;
}
message DataKtvSongStructOrderInfo {
  optional DataKtvSongStructUserInfo topUser = 1;
  optional int64 score = 2;
  optional int64 orderCount = 3;
  optional bool hasAdded = 4;
}
message DataMusicInterval {
  optional int64 starttimemillisecond = 1;
  optional int64 durationmillisecond = 2;
}
message DataChorusVideoInfo {
  optional int64 itemId = 1;
  optional string itemDescription = 2;
  optional string itemUrl = 3;
  optional int64 authorId = 4;
  optional string authorName = 5;
  optional int64 useTimes = 6;
  optional DataImage image = 7;
}
message DataArtistStruct {
  optional int64 artistId = 1;
  optional string defaultName = 2;
  optional bool asRecently = 3;
  optional DataImage avatar = 4;
}
message DataLinkerBaseInfo {
  optional int32 scene = 1;
  repeated int64 playModes = 2;
  optional int32 uiLayout = 3;
}
message DataListUser {
  optional DataUser user = 1;
  optional int64 linkmicId = 2;
  optional string linkmicIdStr = 3;
  optional int32 linkStatus = 4;
  optional int32 linkType = 5;
  optional int32 userPosition = 6;
  optional int32 silenceStatus = 7;
  optional int64 modifyTime = 8;
  optional int64 linkerId = 9;
  optional int32 roleType = 10;
  optional DataListUserContent content = 11;
  optional int64 mcStatus = 12;
  optional int64 isBackground = 13;
  optional DataHostInfo host = 14;
  optional DataMicPosTagInfo micPosTagInfo = 15;
  optional bool pkAvailable = 16;
  optional string extra = 200;
}
message DataListUserContent {
  optional DataListUserPKContent pkContent = 1;
  optional DataListUserLinkmicContent linkmicContent = 2;
  optional DataListUserLinkmicAudienceContent linkmicAudienceContent = 3;
}
message DataListUserExtra {
  optional int64 fanTicket = 1;
  optional bool hostPermission = 2;
  optional int64 appId = 3;
  optional int64 clientVersion = 4;
  optional string devicePlatform = 5;
  optional int64 joinChannelTime = 6;
  optional int64 expectedLeaveTime = 7;
  optional int64 currentTime = 8;
  optional string fanTicketFuzzyStr = 9;
  optional string fanTicketRealStr = 10;
  repeated int64 rankContributorIds = 11;
  optional int32 listUserRole = 12;
}
message DataBanUser {
  optional int64 userId = 1;
  optional string reason = 2;
  optional string url = 3;
  optional string anchorExplain = 4;
  optional string audienceExplain = 5;
}
message DataListUserPKContent {

}
message DataListUserLinkmicContent {
  optional int64 resourceId = 1;
  optional bool showIdentity = 2;
  optional int32 pkUserRole = 3;
  optional string gameName = 4;
  optional string fanTicket = 5;
  optional int64 joinChannelTime = 6;
  optional DataAnchorLinkmicIDInfo anchorLinkmicIdInfo = 7;
  optional int32 anchorAuthRole = 8;
}
message DataAnchorLinkmicIDInfo {
  optional string mainLinkmicIdStr = 1;
  optional string backupLinkmicIdStr = 2;
  optional bool useBackupStream = 3;
}
message DataListUserLinkmicAudienceContent {
  optional int64 fanTicket = 1;
  optional bool hostPermission = 2;
  optional int64 appId = 3;
  optional int64 clientVersion = 4;
  optional string devicePlatform = 5;
  optional int64 joinChannelTime = 6;
  optional int64 expectedLeaveTime = 7;
  optional bool inWaitingList = 8;
  optional string extra = 9;
  optional int64 currentTime = 10;
  optional string fanTicketFuzzyStr = 11;
  optional int32 listUserRole = 12;
  optional string fanTicketRealStr = 13;
  repeated int64 rankContributorIds = 14;
  optional DataMicDress micDress = 15;
  optional int64 paidCount = 16;
  optional bool isEnlarged = 17;
  optional int64 selfDisciplineDuration = 18;
  optional bool isAnonymous = 19;
  optional int32 applyType = 20;
  optional int64 selfDisciplineStartTimeMs = 21;
}
message DataWaitingListUserInfo {
  optional bool applicationHasExpired = 1;
  optional bool isMutualFollowing = 2;
  optional string applicationReason = 3;
  optional string last7DaysGiftCountText = 4;
}
message DataLinkedListUserInfo {
  optional int64 joinChannelTime = 1;
  optional int64 expectedLeaveTime = 2;
  optional int64 currentTime = 3;
}
message DataInviteListUserInfo {
  optional string last7DaysGiftCountText = 1;
}
message DataListTagFansClubContent {
  map<int32, DataImage> iconsMap = 1;
  optional string clubName = 2;
}
message DataListTagHonorLevelContent {
  optional DataImage newImIconWithLevel = 1;
}
message DataListTagFriendContent {
  optional DataImage friendTag = 1;
}
message DataListTagFansContent {
  optional DataImage fansTag = 1;
}
message DataListTag {
  optional int32 listTagType = 1;
  optional DataListTagFansClubContent fansClubTag = 2;
  optional DataListTagHonorLevelContent honorLevelTag = 3;
  optional DataListTagFriendContent friendTag = 4;
  optional DataListTagFansContent fansTag = 5;
}
message DataSwitchSceneData {
  optional string rtcExtInfo = 1;
  optional string liveCoreExtInfo = 2;
  repeated DataListUser linkedUsers = 3;
  optional int32 scene = 4;
  repeated int32 playModes = 5;
  optional int32 uiLayout = 6;
  optional DataMultiRtcInfo multiRtcInfo = 7;
  optional DataMultiLiveCoreInfo multiLiveCoreInfo = 8;
  optional DataMultiChannelInfo multiChannelInfo = 9;
  optional int64 toLinkerId = 10;
  optional DataMultiAnchorExtra multiAnchorExtra = 11;
}
message DataMultiAnchorExtra {
  optional int32 inviteRole = 1;
  optional int64 matchType = 2;
}
message DataMultiLiveCoreInfo {
  optional int32 scene = 1;
  optional DataVideoEqualRoomLiveCoreInfo videoEqualRoomLiveCoreInfo = 2;
  optional DataKTVLiveCoreInfo ktvLiveCoreInfo = 3;
  optional DataMultiAnchorLinkmicLiveCoreInfo multiAnchorLinkmicLiveCoreInfo = 4;
  optional DataSingingChallengeLiveCoreInfo singingChallengeLiveCoreInfo = 5;
  optional DataVideoDUOBattleLiveCoreInfo videoDuoBattleLiveCoreInfo = 6;
}
message DataVideoEqualRoomLiveCoreInfo {
  map<int64, int64> liveCoreInfoMapMap = 1;
}
message DataMultiAnchorLinkmicLiveCoreInfo {
  map<int64, int64> liveCoreInfoMapMap = 1;
  map<int64, int64> pushStreamModeLiveCoreMapMap = 2;
}
message DataKTVLiveCoreInfo {
  map<int64, int64> liveCoreInfoMapMap = 1;
}
message DataSingingChallengeLiveCoreInfo {
  map<int64, int64> liveCoreInfoMapMap = 1;
}
message DataVideoDUOBattleLiveCoreInfo {
  map<int64, int64> liveCoreInfoMapMap = 1;
}
message DataMultiRtcInfo {
  optional int32 scene = 1;
  optional DataVideoEqualRoomRtcInfo videoEqualRoomRtcInfo = 2;
  optional DataMultiAnchorLinkmicRtcInfo multiAnchorLinkmicRtcInfo = 3;
  optional DataSingingChallengeRtcInfo singingChallengeRtcInfo = 4;
  optional DataCrossRoomLinkmicRtcInfo crossRoomLinkmicRtcInfo = 5;
  optional DataVideoDUOBattleRtcInfo videoDuoBattleRtcInfo = 6;
}
message DataVideoEqualRoomRtcInfo {
  map<int64, int64> rtcInfoMapMap = 1;
}
message DataMultiAnchorLinkmicRtcInfo {
  map<int64, int64> rtcInfoMapMap = 1;
  map<int64, int64> pushStreamModeRtcMapMap = 2;
}
message DataSingingChallengeRtcInfo {
  map<int64, int64> rtcInfoMapMap = 1;
}
message DataCrossRoomLinkmicRtcInfo {
  map<int64, int64> rtcInfoMapMap = 1;
}
message DataVideoDUOBattleRtcInfo {
  map<int64, int64> rtcInfoMapMap = 1;
}
message DataChangePlayModeData {
  repeated DataListUser linkedUsers = 1;
  optional string rtcExtInfo = 2;
  optional string liveCoreExtInfo = 3;
  optional DataMultiRtcInfo multiRtcInfo = 4;
  optional DataMultiLiveCoreInfo multiLiveCoreInfo = 5;
  repeated int32 playModes = 6;
  optional uint64 version = 7;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 8;
}
message DataWaitingListUser {
  optional DataUser user = 1;
  optional int64 linkmicId = 2;
  optional int64 modifyTime = 3;
  optional int32 linkStatus = 4;
  optional int32 linkType = 5;
  optional int32 roleType = 6;
  optional int64 userPosition = 7;
  optional int32 silenceStatus = 8;
  optional string linkmicIdStr = 9;
  repeated DataKtvSongStruct songList = 10;
  optional int64 appId = 11;
  optional int64 clientVersion = 12;
  optional string devicePlatform = 13;
  optional int32 listUserType = 14;
  optional int32 listUserFromType = 15;
  optional bool applicationHasExpired = 16;
  optional bool isMutualFollowing = 17;
  optional string applicationReason = 18;
  optional string last7DaysGiftCountText = 19;
  optional string fanTicket = 20;
  optional int64 offset = 21;
  optional int64 rank = 22;
  optional bool isAddPrice = 23;
  optional int64 addPriceTimeMs = 24;
  optional DataHostInfo host = 25;
  optional DataMicPosTagInfo micPosTagInfo = 26;
  optional bool isAnonymous = 27;
  optional int64 paidAmount = 28;
  optional DataJoinTeamfightInfo joinTeamfightInfo = 29;
  optional DataUser invitor = 30;
  optional int32 applyType = 31;
}
message DataRoomLinkerContent {
  repeated DataListUser linkedUsers = 1;
  optional int32 roomLinkSilenceStatus = 2;
  optional int64 anchorId = 3;
  optional int64 isAnchorBackground = 4;
}
message DataHostInfo {
  optional int64 isHost = 1;
  optional string hostPositionName = 2;
}
message DataMicPosTagInfo {
  optional int32 tagType = 1;
  optional string tagName = 2;
  optional string textColorValue = 3;
  optional string bgColorValue = 4;
}
message DataRTMMessage {
  optional DataRTMMessageHeader header = 1;
  optional bytes payload = 2;
}
message DataRTMMessageHeader {
  optional string method = 1;
  optional int64 msgId = 2;
  optional int64 roomId = 3;
  optional int64 createTime = 4;
}
message DataChannelListUser {
  optional DataUser user = 1;
  optional int32 linkStatus = 2;
  optional int32 linkType = 3;
  optional int32 silenceStatus = 4;
  optional int64 modifyTime = 5;
  optional int64 linkerId = 6;
  optional int32 roleType = 7;
  optional int32 applyType = 8;
  optional int32 inviteType = 9;
  optional int64 linkerReportor = 10;
  optional string rtcUserId = 11;
  optional string extra = 200;
}
message DataAnchorLinkmicChannelInfo {
  optional string linkmicIdStr = 1;
  optional string rtcExtInfo = 2;
  optional DataMultiChannelInfo multiChannelInfo = 3;
}
message DataEmojiPermission {
  optional bool hasPermission = 1;
  optional string toastWithoutPermission = 2;
}
message DataSendInteractEmojiConfig {
  optional DataImage interactEmoji = 1;
  optional int64 durationMs = 2;
  optional int64 start = 3;
  optional DataImage ownEmoji = 4;
  optional int64 ownEmojiDurationMs = 5;
  optional int64 offset = 6;
  optional int64 scaleUp = 7;
  optional bool reshape = 8;
  optional string soundUrl = 9;
  optional int64 reshapeStart = 10;
}
message DataEmojiInteractResource {
  optional DataSendInteractEmojiConfig fromImage = 1;
  optional DataSendInteractEmojiConfig passImage = 2;
  optional DataSendInteractEmojiConfig toImage = 3;
}
message DataEmojiAvatarResource {
  optional int64 actionId = 1;
}
message DataLinkmicAudienceEmoji {
  optional int64 emojiId = 1;
  optional bool isRandom = 2;
  optional DataImage emojiImage = 3;
  optional DataImage emojiDynamicImage = 4;
  optional string emojiName = 5;
  optional int64 animationDurationMs = 6;
  optional int64 emojiResultDurationMs = 7;
  optional int32 type = 8;
  optional DataEmojiPermission permission = 9;
  optional string emojiSound = 10;
  optional DataEmojiInteractResource interactResource = 11;
  optional int32 categoryType = 12;
  optional DataEmojiAvatarResource avatarResource = 13;
  optional bool needReverse = 14;
}
message DataLinkmicLinkerExtra {
  optional DataLinkmicLinkerExtraSwitchSceneInfo switchSceneInfo = 1;
  optional DataLinkmicLinkerExtraSwitchSceneInfo switchSceneInfoNormal = 2;
}
message DataLinkmicLinkerExtraSwitchSceneInfo {
  optional int64 sceneBefore = 1;
  optional int64 uiLayoutBefore = 2;
}
message DataLinkmicGroupExtra {
  optional DataLinkmicGroupExtraSwitchSceneInfo switchSceneInfo = 1;
  optional DataLinkmicGroupExtraSwitchSceneInfo switchSceneInfoNormal = 2;
}
message DataLinkmicGroupExtraSwitchSceneInfo {
  optional int64 maxApplyBefore = 1;
  optional int64 maxInviteBefore = 2;
  optional int64 maxReadyBefore = 3;
  optional int64 maxLinkedBefore = 4;
}
message DataLinkmicAudienceEnterMessageExtra {
  optional DataLinkmicAudienceEnterMessageExtraUserInfo enterUser = 1;
}
message DataLinkmicAudienceEnterMessageExtraUserInfo {
  optional int64 userId = 1;
  optional int64 fanTicket = 2;
}
message DataLinkmicAudienceSettingValue {
  optional int32 status = 1;
  optional string extra = 2;
}
message DataLinkmicAudienceSetting {
  optional int32 key = 1;
  optional DataLinkmicAudienceSettingValue value = 2;
}
message DataAnchorLinkmicInfo {
  optional string rtcExtInfo = 1;
  optional string linkmicIdStr = 2;
  optional bool useBackupStream = 3;
}
message DataLinkmicPositionItem {
  optional int64 position = 1;
  optional int32 status = 2;
  optional string activeName = 3;
  optional int32 verifyStatus = 4;
}
message DataLinkmicAudiencePairUserInfo {
  optional DataUser user = 1;
}
message DataLinkmicAudiencePairUser {
  optional DataLinkmicAudiencePairUserInfo guest = 1;
  optional DataLinkmicAudiencePairUserInfo investor = 2;
}
message DataLinkmicSocialShareVideoReport {
  optional int64 roomId = 1;
  optional int64 anchorId = 2;
  optional string eventKey = 3;
  repeated DataLinkmicSocialShareVideoReportUserInfo linkedUserInfos = 4;
}
message DataLinkmicSocialShareVideoReportUserInfo {
  optional int64 userId = 1;
  optional string nickName = 2;
  optional DataImage avatarMedium = 3;
  optional int64 startTime = 4;
  optional int64 linkDuration = 5;
  optional int64 endTime = 6;
}
message DataFastMatchResultTag {
  optional string tagName = 1;
  optional string value = 2;
}
message DataMicDressButton {
  optional int32 switch = 1;
  repeated DataMicDressButtonButtonInfo buttonInfo = 2;
}
message DataMicDressButtonButtonInfo {
  optional string toast = 1;
  optional bool disable = 2;
  optional string schema = 3;
  optional bool clickToNext = 4;
}
message DataLinkmicQuickInteract {
  optional DataUser sendGiftUser = 1;
  optional int64 thanksCarouselDuration = 2;
  optional string thanksContent = 3;
  optional int64 receiveGiftUserId = 4;
}
message DataInviteRoomInfo {
  optional int64 inviterRoomId = 1;
  optional int64 liveRoomMode = 2;
  optional int64 userCount = 3;
  optional int64 score = 4;
  optional string userCountFuzzy = 5;
  optional string scoreFuzzy = 6;
  optional string roomDesc = 7;
  optional string inviterRoomIdStr = 8;
}
message DataCrossRoomLinkReplyGuestInfo {
  optional int64 userId = 1;
  optional bool isLowClientVersion = 2;
  optional bool isSelected = 3;
  optional bool isNotSupportApp = 4;
  optional string userIdStr = 5;
}
message DataLinkmicInteractEntrance {
  optional int32 status = 1;
  repeated DataLinkmicInteractEntranceButtonInfo buttonInfos = 2;
  optional string source = 3;
  optional string name = 4;
  optional int64 entranceId = 5;
  optional string nameColor = 6;
}
message DataLinkmicInteractEntranceButtonInfo {
  optional string toast = 1;
  optional bool disable = 2;
  optional string schema = 3;
  optional bool clickToNext = 4;
  optional DataImage image = 5;
  optional string toastColor = 6;
}
message DataAnchorLinkmicUserSettings {
  optional bool isTurnOn = 1;
  optional bool acceptMultiLinkmic = 2;
  optional bool acceptNotFollowerInvite = 3;
  optional bool allowGiftToOtherAnchors = 4;
  optional bool acceptFriendInvite = 5;
  optional bool acceptHourlyRankInvite = 6;
  optional bool acceptPopularityRankInvite = 7;
  optional bool acceptRecommendSearchInvite = 8;
}
message DataBattleUserSettings {
  optional bool isTurnOn = 1;
  optional bool acceptNotFollowerInvite = 2;
  optional bool allowGiftToOtherAnchors = 3;
  optional bool acceptFriendInvite = 4;
  optional bool acceptHourlyRankInvite = 5;
  optional bool acceptPopularityRankInvite = 6;
  optional int64 inviteRejectPermanentTotal = 7;
  optional int64 inviteRejectTemporaryTotal = 8;
  optional string inviteRejectTemporaryText = 9;
  optional bool pkAcceptVolumeUp = 10;
  optional bool pkAutoConfirm = 11;
}
message DataBattleUserSettingsList {
  repeated DataBattleUserSettingsListUserInfo list = 1;
  optional string nextCursor = 2;
}
message DataBattleUserSettingsListUserInfo {
  optional int64 userId = 1;
  optional string nickName = 2;
  optional DataImage avatarThumb = 3;
  optional int64 autoRemoveTime = 4;
  optional int32 sex = 5;
  optional int64 rivalLivingRoomId = 6;
}
message DataRivalExtraInfo {
  optional string text = 1;
  optional int32 textType = 2;
  optional string label = 3;
  optional int32 anchorLayer = 4;
  optional DataRivalExtraInfoLinkerInfo linkerInfo = 5;
  optional DataAnchorLinkmicUserSettings linkmicUserSettings = 6;
  optional DataBattleUserSettings battleUserSettings = 7;
  optional int64 videoShowScore = 8;
  optional DataRivalExtraInfoGameInfo gameInfo = 9;
  optional string signExtra = 10;
}
message DataRivalExtraInfoLinkerInfo {
  repeated DataRivalExtraInfoLinkerInfoUserInfo linkedUsers = 1;
}
message DataRivalExtraInfoLinkerInfoUserInfo {
  optional int64 userId = 1;
  optional string nickName = 2;
  optional DataImage avatarThumb = 3;
}
message DataRivalExtraInfoGameInfo {
  optional string gameText = 1;
  optional string gameName = 2;
}
message DataMultiPKModeInfo {
  optional int32 modeTab = 1;
  map<int64, int64> userIdToTeamIdMap = 2;
  optional int64 version = 3;
}
message DataLinkerStats {
  optional DataMultiPKModeInfo multiPkModeInfo = 1;
  optional bool battleDisplayEntrance = 2;
  optional bool forbidInviteByGeneral = 3;
  optional bool forbidApplyFromOther = 4;
}
message DataGameInviteInfo {
  optional int32 inviteSource = 1;
}
message DataLinkmicInfo {
  optional string rtcExtInfo = 1;
  optional string liveCoreInfo = 2;
}
message DataMultiChannelInfo {
  optional bool useMultiChannel = 1;
  map<int64, int64> linkmicInfosMap = 2;
}
message DataLinkmicTeamfightContributors {
  repeated int64 userIds = 1;
}
message DataLinkmicTeamfightPlayer {
  optional int64 userId = 1;
  optional int64 score = 2;
  optional string scoreStr = 3;
  optional string scoreFuzzy = 4;
  optional DataLinkmicTeamfightContributors contributors = 5;
}
message DataLinkmicTeamfightTeamInfo {
  optional int64 teamId = 1;
  optional int64 score = 2;
  optional string scoreStr = 3;
  optional string scoreFuzzy = 4;
  optional DataLinkmicTeamfightContributors contributors = 5;
  repeated DataLinkmicTeamfightPlayer players = 6;
  optional bool isScoreFuzzy = 7;
  optional int64 ownerId = 8;
  optional string teamIdStr = 9;
}
message DataLinkmicTeamfightInfo {
  optional int64 teamfightId = 1;
  optional string teamfightIdStr = 2;
  optional int32 type = 3;
  optional int32 status = 4;
  optional int64 startTime = 5;
  optional int64 duration = 6;
  optional int64 punishStartTime = 7;
  optional int64 punishDuration = 8;
  repeated DataLinkmicTeamfightTeamInfo teamInfos = 9;
  optional int64 winTeamId = 10;
  optional int64 currentTimeMs = 11;
  optional int32 pkBarStyle = 12;
  optional int64 showStartTime = 13;
  optional int64 initiatorUserId = 14;
  optional int32 scoreType = 15;
  optional int64 showDuration = 16;
  optional int64 initiatorAnchorId = 17;
  optional string winTeamIdStr = 18;
}
message DataJoinTeamfightInfo {
  optional int64 teamId = 1;
  optional string teamIdStr = 2;
}
message DataMicDress {
  optional DataVoiceWave voiceDress = 1;
  optional DataVoiceWave voiceWave = 2;
}
message DataVoiceWave {
  optional string dressId = 1;
  optional DataImage lowImg = 2;
  optional DataImage mediumImg = 3;
  optional DataImage highImg = 4;
}
message DataSwitchExtraBase {
  optional string schemaForCheck = 1;
}
message DataSwitchExtraForOpen {
  optional string schemaForOpen = 1;
}
message DataGameInvite {
  optional int64 id = 1;
  optional int64 kind = 2;
  optional int64 createTime = 3;
  optional int64 nowTime = 4;
  optional int64 expireTime = 5;
  optional int64 status = 6;
  optional int64 roomId = 7;
  optional string idStr = 8;
}
message DataInvitationSwitch {
  optional int64 id = 1;
  optional int32 gameKind = 2;
  optional int64 gameId = 3;
  optional int64 playKind = 4;
  optional int64 status = 5;
  optional string message = 6;
  optional DataSwitchExtraBase extraBase = 7;
  optional DataSwitchExtraForOpen extraForOpen = 8;
  optional string idStr = 9;
}
message DataPlayGameInfo {
  optional string gameId = 1;
  optional string gameStoreSchema = 2;
  optional string gameCheckAuthoritySchema = 3;
  optional string gameName = 4;
  optional DataImage gameIcon = 5;
  optional string gameDesc = 6;
  optional string gamePackageNameAndroid = 7;
  optional string gamePackageNameIos = 8;
  optional string gameLauncherSchema = 9;
  optional string clientKey = 10;
}
message DataPlayConfigInfo {
  repeated string supportGameIds = 1;
  optional string descHint = 2;
  optional int32 descLimit = 3;
  repeated int32 peopleCountOption = 4;
  optional int32 fareMax = 5;
  optional int32 fareMin = 6;
  optional string fareDescHint = 7;
  optional int32 fareDescLimit = 8;
  optional string fareCountHint = 9;
}
message DataPlayMetaInfo {
  optional int32 type = 1;
  optional string name = 2;
  optional string playDescSchema = 3;
  optional string playLicenseSchema = 4;
  optional string featureSchema = 5;
  optional int32 exchangeRate = 6;
}
message DataPlayRecord {
  optional int64 playId = 1;
  optional string playIdStr = 2;
  optional int32 type = 3;
  optional string gameId = 4;
  optional int64 ownerUid = 5;
  optional int64 roomId = 6;
  optional string roomIdStr = 7;
  optional string desc = 8;
  optional int32 fare = 9;
  optional string fareDesc = 10;
  optional int32 peopleCount = 11;
  optional int32 status = 12;
  optional string createTime = 13;
  optional string updateTime = 14;
  optional string extra = 15;
  optional int32 diamonds = 16;
  optional DataImage gameIcon = 17;
  optional int32 realPeopleCount = 18;
  optional string auditDenyReason = 19;
  optional string finishTime = 20;
}
message DataPlayTeamMember {
  optional DataUser user = 1;
  optional int32 status = 2;
}
message DataPlayReportTag {
  optional int64 serialId = 1;
  optional string serialStr = 2;
}
message DataGiftPreviewInfo {
  optional int64 lockStatus = 1;
  optional bool clientBlockUseSchemeUrl = 2;
  optional string blockSchemeUrl = 3;
  optional bool clientCheckLeftDiamond = 4;
}
message DataGiftBuffInfo {
  optional string text = 1;
  optional string textColor = 2;
  optional DataImage bgImg = 3;
  optional DataImage sweepLightImg = 4;
  optional DataImage buffGiftDescribeImg = 5;
  optional int64 buffGiftId = 6;
  optional int32 buffLevel = 7;
  optional bool buffCanSend = 8;
  optional int64 buffDiamondCount = 9;
  optional string lockToast = 10;
}
message DataGiftTip {
  optional DataText displayText = 1;
  optional string backgroundColor = 2;
  optional DataImage prefixImage = 3;
}
message DataSubscribeGiftPackInfo {
  optional int64 relatedGiftId = 1;
  optional int64 offlineTimeSecond = 2;
  optional int32 leftScores = 4;
  optional string entranceSchemeUrl = 5;
  optional string entranceSchemeUrlQueryParams = 6;
}
message DataGiftStruct {
  optional DataImage image = 1;
  optional string describe = 2;
  optional bool notify = 3;
  optional int64 duration = 4;
  optional int64 id = 5;
  optional DataGiftStructGiftStructFansClubInfo fansclubInfo = 6;
  optional bool forLinkmic = 7;
  optional bool doodle = 8;
  optional bool forFansclub = 9;
  optional bool combo = 10;
  optional int32 type = 11;
  optional int32 diamondCount = 12;
  optional bool isDisplayedOnPanel = 13;
  optional int64 primaryEffectId = 14;
  optional DataImage giftLabelIcon = 15;
  optional string name = 16;
  optional string region = 17;
  optional string manual = 18;
  optional bool forCustom = 19;
  map<string, string> specialEffectsMap = 20;
  optional DataImage icon = 21;
  optional int32 actionType = 22;
  optional int32 watermelonSeeds = 23;
  optional string goldEffect = 24;
  repeated DataLuckyMoneyGiftMeta subs = 25;
  optional int64 goldenBeans = 26;
  optional int64 honorLevel = 27;
  optional int32 itemType = 28;
  optional string schemeUrl = 29;
  optional DataGiftPanelOperation giftOperation = 30;
  optional string eventName = 31;
  optional int64 nobleLevel = 32;
  optional string guideUrl = 33;
  optional bool punishMedicine = 34;
  optional bool forPortal = 35;
  optional string businessText = 36;
  optional bool cnyGift = 37;
  optional int64 appId = 38;
  optional int64 vipLevel = 39;
  optional bool isGray = 40;
  optional string graySchemeUrl = 41;
  optional int64 giftScene = 42;
  optional DataGiftBanner giftBanner = 43;
  repeated string triggerWords = 44;
  repeated DataGiftBuffInfo giftBuffInfos = 45;
  optional bool forFirstRecharge = 46;
  optional DataImage dynamicImgForSelected = 47;
  optional int32 afterSendAction = 48;
  optional int64 giftOfflineTime = 49;
  optional string topBarText = 50;
  optional DataImage topRightAvatar = 51;
  optional string bannerSchemeUrl = 52;
  optional bool isLocked = 53;
  optional int64 reqExtraType = 54;
  repeated int64 assetIds = 55;
  optional DataGiftPreviewInfo giftPreviewInfo = 56;
  optional DataGiftTip giftTip = 57;
  optional int32 needSweepLightCount = 58;
  repeated DataGiftGroupInfo groupInfo = 59;
  optional DataText bottomText = 60;
  optional int32 mysteryShopStatus = 61;
  repeated int64 optionalAssetIds = 62;
  optional bool disableWishList = 63;
  optional DataGiftStructGiftMsgBoard giftMsgBoard = 64;
  optional DataEmojiInteractResource emojiInteractResource = 65;
  optional bool trayDynamicImgFlippable = 66;
}
message DataGiftStructGiftStructFansClubInfo {
  optional int32 minLevel = 1;
  optional int32 insertPos = 2;
}
message DataGiftStructGiftMsgBoard {
  optional bool forMsgBoard = 1;
  optional string promptText = 2;
}
message DataGiftGroupInfo {
  optional int32 groupCount = 1;
  optional string groupText = 2;
}
message DataGiftPanelOperation {
  optional DataImage leftImage = 1;
  optional DataImage rightImage = 2;
  optional string title = 3;
  optional string titleColor = 4;
  optional int64 titleSize = 5;
  optional string schemeUrl = 6;
  optional string eventName = 7;
}
message DataFreeGift {
  optional int64 id = 1;
  optional int64 count = 2;
  optional string content = 3;
  optional int64 groupId = 4;
  optional int64 repeatCount = 5;
  optional int64 fanTickets = 6;
  optional int64 waterwmlon = 7;
}
message DataLuckyMoneyGiftMeta {
  optional DataImage image = 1;
  optional string describe = 2;
  optional int64 id = 3;
  optional int32 diamondCount = 4;
  optional DataImage icon = 5;
}
message DataFreeCellData {
  optional int64 timeNowMs = 1;
  optional int64 timeStartMs = 2;
  optional int64 timeFreezeEndMs = 3;
  optional int64 timeDoubleEndMs = 4;
  optional int64 timeEndMs = 5;
  optional int64 freeCellLength = 6;
  optional bool isFreeze = 7;
  optional bool isDouble = 8;
  optional DataUser contributeMostUser = 9;
  optional int64 contributeMostCoins = 10;
  optional int64 distanceFromPreviousOne = 11;
  optional int64 indexInDayRanklist = 12;
  optional int64 giftId = 13;
}
message DataGameGiftData {
  optional DataGameGiftDataMonkeyData data = 1;
}
message DataGameGiftDataMonkeyData {
  optional uint32 multiplier = 1;
  optional uint32 addend = 2;
  optional uint32 seed = 3;
  optional string token = 4;
  repeated DataGameGiftDataMonkeyDataRange rangemap = 5;
  optional string anchorRankBestUserName = 6;
  optional int32 anchorRankBestScore = 7;
  optional int32 bestScoreSelf = 8;
}
message DataGameGiftDataMonkeyDataRange {
  optional int32 min = 1;
  optional int32 max = 2;
  optional int32 result = 3;
}
message DataAnchorGiftData {
  optional DataImage anchorDiyOriginImg = 1;
}
message DataMonkeyDataRedis {
  optional int64 time = 1;
  optional int64 liveId = 2;
  optional int64 roomId = 3;
  optional int64 anchorId = 4;
  optional int64 userId = 5;
  optional int64 giftId = 6;
  optional int64 seed = 7;
  optional int64 score = 8;
  optional string token = 9;
}
message DataMonkeyGiftRankData {
  optional int64 type = 1;
  optional DataMonkeyGiftRankDataRank historyBest = 2;
  optional int32 keepRecordDays = 3;
  repeated DataMonkeyGiftRankDataRank rankList = 4;
  optional DataMonkeyGiftRankDataRank selfRank = 5;
  optional bool hasMore = 6;
}
message DataMonkeyGiftRankDataRank {
  optional DataUser user = 1;
  optional bool onList = 2;
  optional int64 rank = 3;
  optional int32 score = 4;
  optional int32 delta = 5;
  optional int32 medal = 6;
  optional string anchorId = 7;
  optional string anchorName = 8;
  optional string anchorRoomId = 9;
  optional string secAnchorId = 10;
}
message DataDoodleTemplate {
  optional int64 templateId = 1;
  optional DataImage image = 2;
}
message DataGiftBanner {
  optional DataText displayText = 1;
  optional string displayTextBgColor = 2;
  optional DataImage boxImg = 3;
  optional DataImage bgImg = 4;
  optional string schemeUrl = 5;
  optional bool animate = 6;
  optional int64 boxId = 7;
  optional int64 availableBoxCount = 8;
}
message DataEffectMixImageInfo {
  optional string imageKey = 1;
  optional DataImage mixImage = 2;
}
message DataAssetEffectMixInfo {
  repeated DataEffectMixImageInfo effectMixImageInfos = 1;
}
message DataGiftTrayInfo {
  optional DataText trayDisplayText = 1;
  optional DataImage trayBaseImg = 2;
  optional DataImage trayHeadImg = 3;
  optional DataImage trayRightImg = 4;
  optional int64 trayLevel = 5;
  optional DataImage trayDynamicImg = 6;
  optional string traySchemaUrl = 7;
  optional int32 trayType = 8;
  optional DataImage trayBaseImgV2 = 9;
  optional DataImage trayRightImgV2 = 10;
}
message DataGiftExtra {
  optional int64 giftId = 1;
  optional DataSubscribeGiftPackInfo subscribeGiftPackInfo = 2;
  optional string bannerGiftInfo = 3;
  repeated DataGiftBuffInfo giftBuffInfos = 4;
  optional string giftPanelTopDescSchemeUrl = 5;
  optional DataDIYGiftToolbarInfo diyGiftToolbarInfo = 6;
}
message DataDIYGiftToolbarInfo {
  repeated DataDIYGiftCardInfo cards = 1;
  optional DataDIYPageEnterButton button = 2;
  optional DataImage defaultGiftDescribeImg = 3;
  repeated DataDIYGiftCardInfo forceIndexCards = 4;
  optional int32 maxTotalCardNumber = 5;
  optional int32 maxLocalCardNumber = 6;
  optional int64 configId = 7;
}
message DataDIYPageEnterButton {
  optional DataText text = 1;
  optional string schema = 2;
  optional bool locked = 3;
}
message DataPluginInfo {
  optional int64 pluginId = 1;
  map<string, string> itemPotentialValueHintMap = 2;
}
message DataDIYItemInfo {
  optional int64 diyItemId = 1;
  optional string localItem = 2;
  map<string, string> valuesMap = 3;
  optional int64 fontAsset = 4;
  optional int64 parentAsset = 5;
}
message DataCardLockInfo {
  optional int32 lockStatus = 1;
  optional string toast = 2;
  optional string reason = 3;
}
message DataDIYGiftCardInfo {
  optional string mainText = 1;
  optional string subText = 2;
  optional DataImage iconImg = 3;
  optional DataImage giftDescribeImg = 4;
  repeated DataPluginInfo plugins = 5;
  optional int64 totalDiamonds = 6;
  optional DataImage giftCellIcon = 7;
  optional string mainTextAfterSend = 8;
  optional string cardName = 9;
  optional int64 startTime = 10;
  optional int64 endTime = 11;
  optional int64 configId = 12;
  optional DataCardLockInfo lockInfo = 13;
}
message DataGiftIMPriority {
  repeated int64 queueSizes = 1;
  optional int64 selfQueuePriority = 2;
  optional int64 priority = 3;
}
message DataGiftVoteResult {
  optional string text = 1;
  optional int64 count = 2;
  optional DataImage icon = 3;
  optional int64 giftId = 4;
  optional string name = 5;
  optional int64 diamondCount = 6;
  optional int64 giftType = 7;
  optional string countStr = 8;
}
message DataGuestBattleContributors {
  repeated int64 userIds = 1;
}
message DataBattleResult {
  optional int64 guestId = 1;
  optional string score = 2;
  optional int64 rank = 3;
  optional string scoreFuzzy = 4;
  optional DataGuestBattleContributors contributors = 5;
  optional DataLinkmicQuickInteract quickInteract = 6;
  optional DataGuestBattleUserGradeInfo crownInfo = 7;
  optional string nickname = 8;
}
message DataGuestBattleInfo {
  optional int64 battleId = 1;
  optional int64 battleType = 2;
  optional int64 status = 3;
  repeated DataBattleResult results = 4;
  optional int64 currentTime = 5;
  optional int64 finishTime = 6;
  optional int64 showDuration = 7;
  optional string battleIdStr = 8;
  optional int64 loserNum = 9;
  optional string dressId = 10;
  optional int64 scoreType = 11;
  optional DataGuestBattleUIInfo uiInfo = 12;
}
message DataShowStatusLabel {
  optional string showStatusLabelText = 1;
  optional float showStatusLabelTextTransparency = 2;
  optional string showStatusLabelBgColor = 3;
}
message DataGroupShowUserItem {
  optional DataUser groupShowUser = 1;
  optional string description = 2;
  optional string sendButtonText = 3;
  optional int64 groupShowFanTicketCount = 4;
  optional int64 groupShowCurRoundFanTicketCount = 5;
  optional int64 showEndTime = 6;
  optional int32 identityLabel = 7;
  optional DataImage liveAvatarFrameImage = 8;
  optional DataImage bgImage = 9;
  optional DataShowStatusLabel showStatusLabel = 10;
  optional bool isBestShower = 11;
  optional int32 showStatus = 12;
}
message DataGroupShowInfo {
  repeated DataGroupShowUserItem groupShowUsers = 1;
  optional int64 descriptionStyle = 2;
  optional string title = 3;
  optional string subTitle = 4;
  optional DataImage backgroundImage = 5;
  optional int64 groupShowScene = 6;
  optional bool isLiveShow = 7;
  optional string toastText = 8;
  optional bool isGroupShowAnchor = 9;
}
message DataGrowthTaskCondDef {
  optional int64 id = 1;
  optional string key = 2;
  optional string desc = 3;
  optional string operator = 4;
  optional string extra = 5;
}
message DataGrowthTaskCondition {
  optional DataGrowthTaskCondDef def = 1;
  optional string desc = 2;
  optional int64 currentValue = 3;
  optional int64 targetValue = 4;
  optional string displayCurrentValue = 5;
  optional string displayTargetValue = 6;
  optional string displayDelta = 7;
}
message DataGrowthTaskRewardDef {
  optional int64 id = 1;
  optional int32 rewardType = 2;
  optional int32 settleType = 3;
  optional string target = 4;
  optional string desc = 5;
  optional string operator = 6;
  optional string sendParamStr = 7;
  optional string extra = 8;
  optional string name = 9;
}
message DataGrowthTaskReward {
  optional DataGrowthTaskRewardDef def = 1;
  optional int32 status = 2;
  optional string extra = 3;
  optional int64 remainingCount = 4;
}
message DataGrowthTaskStage {
  repeated DataGrowthTaskCondition conditionList = 1;
  repeated DataGrowthTaskReward rewardList = 2;
}
message DataGrowthTask {
  optional int64 id = 1;
  optional string idStr = 2;
  optional int64 liveId = 3;
  optional int64 appId = 4;
  optional int64 classId = 5;
  optional int64 groupId = 6;
  optional int32 itemType = 7;
  optional string itemId = 8;
  optional string taskName = 9;
  optional string taskDesc = 10;
  optional int64 startTime = 11;
  optional int64 endTime = 12;
  optional int64 displayStartTime = 13;
  optional int64 displayEndTime = 14;
  optional int32 status = 15;
  optional int64 completedStage = 16;
  optional int64 finishTime = 17;
  repeated DataGrowthTaskStage stageList = 18;
  optional string extra = 19;
  optional string config = 20;
  optional int64 createTime = 21;
}
message DataGrowthTaskContributorRank {
  optional DataUser user = 1;
  optional int64 score = 2;
  optional int64 rank = 3;
}
message DataGrowthTaskDisplayInfo {
  optional int64 id = 1;
  optional int64 groupId = 2;
  optional int64 classId = 3;
  optional string details = 4;
  optional string extra = 5;
}
message DataGrowthTaskStatistics {
  optional int32 caliber = 1;
  optional int32 obj = 2;
  optional int64 stageIndex = 3;
  optional int64 rewardIndex = 4;
  optional int64 classId = 5;
  optional int64 value = 6;
}
message DataGuestBattleGradeItem {
  optional int64 level = 1;
  optional string levelStr = 2;
  optional int64 score = 3;
  optional string scoreStr = 4;
  optional bool isFullLevel = 5;
}
message DataGuestBattleUserGradeInfo {
  optional DataGuestBattleGradeItem curGrade = 1;
  optional DataGuestBattleGradeItem nextGrade = 2;
  optional int64 upgradeScore = 3;
  optional string upgradeScoreStr = 4;
}
message DataGuestBattleScoreInfo {
  optional int64 scoreType = 1;
  optional string name = 2;
  optional string description = 3;
  optional string tag = 4;
  optional DataImage crownGradeRuleImg = 5;
}
message DataGuestBattleUIInfo {
  optional DataImage openAnimation = 1;
  optional DataImage scoreIcon = 2;
}
message DataLinkPhase {
  optional int32 phaseId = 1;
  optional int32 phaseSecondsBegin = 2;
  optional int32 phaseSecondsEnd = 3;
}
message DataLinkPhaseConfig {
  repeated DataLinkPhase phases = 1;
  optional int32 easterEggCartoonSeconds = 2;
}
message DataLinkmicSetting {
  optional int32 key = 1;
  optional int32 value = 2;
  optional DataSettingContent content = 3;
}
message DataSettingContent {
  optional DataApplicationReasonContent applicationReasonContent = 1;
  optional DataBidPaidLinkmicContent bidPaidLinkmicContent = 2;
  optional DataNormalPaidLinkmicSettingContent normalPaidLinkmicSettingContent = 3;
  optional DataNormalPaidLinkmicDescContent normalPaidLinkmicDescContent = 4;
  optional DataBidPaidLinkmicSettingContent bidPaidLinkmicSettingContent = 5;
  optional DataKTVChallengeContent ktvChallengeContent = 6;
  optional DataRoomBattleSettingContent roomBattleSettingContent = 7;
  optional DataNormalPaidLinkmicAddPriceContent normalPaidLinkmicAddPriceContent = 8;
  optional DataGuestBattleConfigContent guestBattleConfigContent = 9;
  optional DataTeamFightConfigContent teamFightConfigContent = 10;
  optional DataSelfDisciplineInfo selfDisciplineInfo = 11;
  optional DataDuoBattleConfigContent duoBattleConfigContent = 12;
}
message DataApplicationReasonContent {
  optional string applicationreasonexample = 1;
  optional string defaultapplicationreasonexample = 2;
}
message DataBidPaidLinkmicContent {
  optional int64 startPrice = 1;
  optional int64 linkDuration = 2;
  optional int64 maxBidPrice = 3;
  optional int64 bidDuration = 4;
  repeated DataBidPaidLinkmicOptionalStep bidSteps = 5;
}
message DataNormalPaidLinkmicSettingContent {
  optional int64 paidCount = 1;
  optional int64 limitedTime = 2;
}
message DataNormalPaidLinkmicDescContent {
  repeated int64 savedTagIds = 1;
  repeated DataPaidLinkmicTag savedTagInfos = 2;
  optional string savedDesc = 3;
  optional string reviewedDesc = 4;
}
message DataBidPaidLinkmicSettingContent {
  optional int64 startPrice = 1;
  optional int64 linkDuration = 2;
}
message DataKTVChallengeContent {
  optional int64 targetscore = 1;
  optional int64 targetdurationsecond = 2;
}
message DataRoomBattleSettingContent {
  optional int64 battleDuration = 1;
  optional bool acceptInvite = 2;
  optional bool onlyAcceptFollowingInvite = 3;
  optional bool notAcceptLessThanThreeLinkedInvite = 4;
}
message DataNormalPaidLinkmicAddPriceContent {
  optional int32 addPriceStrategy = 1;
  optional int64 customAddPriceValue = 2;
}
message DataGuestBattleConfigContent {
  optional int32 isAnchorInvolved = 1;
  optional int64 lastBattleDurationByAnchor = 2;
  optional int64 loserNum = 3;
  optional int64 scoreType = 4;
}
message DataTeamFightConfigContent {
  optional int64 lastFightDurationByAnchor = 1;
}
message DataDuoBattleConfigContent {
  optional int64 duration = 1;
  optional int32 scoreType = 2;
}
message DataSelfDisciplineInfo {
  repeated string targetList = 1;
  optional string currentTarget = 2;
  optional string targetIconUri = 3;
  optional string text = 4;
}
message DataMsgBoardItemInfo {
  optional int64 id = 1;
  optional string idStr = 2;
  optional DataUser sender = 3;
  optional string content = 4;
  optional int32 processStatus = 5;
  optional int64 giftId = 6;
  optional int64 msgDisappearTime = 7;
}
message DataMsgBoardShortTouchSenderInfo {
  optional DataUser sender = 1;
  optional int64 msgDisappearTime = 2;
}
message DataMsgBoardShortTouchInfo {
  optional int64 msgCount = 1;
  repeated DataMsgBoardShortTouchSenderInfo senderInfoList = 2;
}
message DataOfficialRoomInfo {
  optional bool isShowMoreAnchor = 1;
  optional bool isUseServerSubtitle = 2;
  optional string serverSubtitle = 3;
}
message DataBidPaidLinkmicOptionalStep {
  optional int64 bidLeftClosedInterval = 1;
  optional int64 bidRightClosedInterval = 2;
  optional int64 bidStep = 3;
}
message DataBidPaidLinkmicBidInfo {
  optional int64 bidPrice = 1;
  optional int64 bidUsersUv = 2;
  optional int64 serverLeftTime = 3;
  optional string userName = 4;
  optional int64 userId = 5;
  optional DataImage userAvatar = 6;
  optional uint64 version = 7;
  optional string secUserId = 8;
}
message DataBidPaidLinkmicDealInfo {
  optional int64 winPrice = 1;
  optional string userName = 2;
  optional int64 userId = 3;
  optional DataImage userAvatar = 4;
  optional string secUserId = 5;
}
message DataBidPaidLinkmicBidRecord {
  optional int64 bidPrice = 1;
  optional string userName = 2;
  optional int64 userId = 3;
  optional DataImage userAvatar = 4;
  optional bool isStartPrice = 5;
  optional string secUserId = 6;
}
message DataBidPaidLinkmicInfo {
  optional int64 startPrice = 1;
  optional int64 linkDuration = 2;
  optional int64 maxBidPrice = 3;
  optional int64 bidDuration = 4;
  repeated DataBidPaidLinkmicOptionalStep bidSteps = 5;
}
message DataNormalPaidLinkmicInfo {
  optional int64 paidCount = 1;
  optional int64 limitedTime = 2;
  optional int32 status = 3;
  optional int32 addPriceStrategy = 4;
  optional int64 addPriceValue = 5;
  optional int64 addPriceMultiple = 6;
}
message DataPaidLinkmicTag {
  optional int64 id = 1;
  optional string name = 2;
  optional DataImage pic = 3;
}
message DataPaidLinkmicExplainCardInfo {
  optional int64 numOfLink = 1;
  optional float avgGrade = 2;
  optional DataPaidLinkmicTag tag = 3;
}
message DataPaidLinkmicOptionalStep {
  optional int64 leftClosedInterval = 1;
  optional int64 rightClosedInterval = 2;
  optional int64 step = 3;
}
message DataPaidLinkmicDiscountInfo {
  optional int32 discountMode = 1;
  optional int64 discountAmount = 2;
  optional string discountText = 3;
}
message ImWord {
  optional string content = 1;
}
message ImQuickComment {
  optional ImCommon common = 1;
  repeated ImWord words = 2;
  optional int32 duration = 3;
}
message ImQuizStartMessage {
  optional ImCommon common = 1;
  optional DataText displayText = 2;
}
message ImQuizResult {
  optional string title = 1;
  optional DataText result = 2;
  optional DataText gain = 3;
}
message ImQuizResultMessage {
  optional ImCommon common = 1;
  optional ImQuizResult quizResult = 3;
}
message ImQuizChangeData {
  optional int64 quizId = 1;
  optional int64 status = 2;
  repeated DataBetOption options = 4;
}
message ImQuizChangeMessage {
  optional ImCommon common = 1;
  repeated ImQuizChangeData quizChangeData = 2;
}
message ImAllQuizInfo {
  optional int64 id = 1;
  optional string title = 2;
  optional int64 starttime = 3;
  optional int64 duration = 4;
  optional int64 status = 5;
}
message ImQuizBeginMessage {
  optional ImCommon common = 1;
  optional int64 quizid = 2;
  optional int32 status = 3;
  repeated ImAllQuizInfo quizinfos = 4;
  optional int64 errorcode = 5;
  optional string extra = 6;
}
message ImQuizBetMessage {
  optional ImCommon common = 1;
  optional int64 quizId = 2;
  map<int64, int64> optionMoneyMap = 3;
}
message ImQuizAnchorStatusMessage {
  optional ImCommon common = 1;
  repeated DataAnchorHistoryItem items = 2;
}
message ImQuizAudienceStatusMessage {
  optional ImCommon common = 1;
  repeated DataQuiz quizList = 2;
}
message ImRankListAwardMessage {
  optional ImCommon common = 1;
  optional int64 assetId = 2;
  optional bool effectOpen = 3;
  optional int64 rankType = 4;
  optional int64 rank = 5;
  optional DataBattleStarActivityGradeMedal starActivityGradeMedal = 6;
  optional string schemeUrl = 7;
  optional DataImage assetImage = 8;
  optional int32 playPriority = 9;
}
message ImRankListHourEnterMessage {
  optional ImCommon common = 1;
  optional DataRankEnterInfo hourEnterInfo = 2;
}
message ImCreateRedPacketMessage {
  optional ImCommon common = 1;
  repeated ImRedPacket redPackets = 2;
}
message ImRushRedPacketMessage {
  optional ImCommon common = 1;
  repeated ImRedPacketRushRecord redPacketRushRecords = 2;
}
message ImRedPacketRushRecord {
  optional int64 redPacketGroupId = 1;
  optional int64 userId = 2;
  optional string userName = 3;
  optional int64 bonusCount = 4;
  optional int64 bonusType = 5;
  optional int64 roomId = 6;
  optional string imText = 7;
  optional int64 createTime = 8;
}
message ImRedPacket {
  optional int64 redPacketGroupId = 1;
  optional int64 bonusType = 2;
  optional int64 comboCount = 3;
  optional int64 bonusCount = 4;
  optional int64 countDown = 5;
  optional int64 rushTime = 6;
  optional string iconUrl = 7;
  optional int64 disappearTime = 8;
  optional DataUser owner = 9;
  optional int64 totalCountDown = 10;
  optional string redPacketSource = 11;
}
message ImPushRoomAdCard {
  optional ImCommon common = 1;
  optional string actionContent = 2;
  optional string content = 3;
  optional int64 targetNum = 4;
  optional int64 showNum = 5;
  optional bool isFinished = 6;
  optional int32 adcardType = 7;
  optional int32 hotvalue = 8;
}
message ImRoomAppConfigMessage {
  optional ImCommon common = 1;
  optional ImAnchorFaceConfig anchorFaceConfig = 2;
}
message ImAnchorFaceConfig {
  optional bool contourEnable = 1;
  optional int64 frequency = 2;
  optional int64 userCount = 3;
}
message ImRoomAuthInterventionVerifyMessage {
  optional ImCommon common = 1;
  optional string name = 2;
  optional int64 status = 3;
  optional int32 unablestyle = 4;
  optional string content = 5;
  optional string switchStatusTipMsg = 6;
  optional string switchStatusAnchorTipMsg = 7;
}
message ImRoomAuthMessage {
  optional ImCommon common = 1;
  optional bool showUserCard = 2;
}
message ImRoomBackgroundMessage {
  optional ImCommon common = 1;
  optional DataImage roomBackground = 2;
}
message ImRoomBottomMessage {
  optional ImCommon common = 1;
  optional string color = 3;
  optional string actionContent = 6;
  optional int64 actionType = 7;
  optional int64 pushMessageDisplayTime = 8;
  optional DataImage actionIcon = 10;
  optional ImFlexImageStruct newBackgroundImage = 11;
  optional string source = 12;
}
message ImRoomChallengeMessage {
  optional ImCommon common = 1;
  optional string challengeInfo = 2;
  optional int64 notifyType = 3;
  optional string toastContent = 4;
}
message ImRoomConfigMessage {
  optional ImCommon common = 1;
  optional string configInfo = 2;
  optional int64 configType = 3;
}
message ImRoomDataSyncMessage {
  optional ImCommon common = 1;
  optional int64 roomid = 2;
  optional string synckey = 3;
  optional int64 version = 4;
  optional bytes payload = 5;
  optional string bizlogid = 6;
}
message ImRoomHotSentenceMessage {
  optional ImCommon common = 1;
  optional string hotSentenceInfo = 2;
}
message ImRoomImgMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional int64 action = 3;
  optional string bgImgUrl = 4;
}
message ImRoomIntroMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 style = 3;
  optional string intro = 4;
  repeated string label = 5;
}
message ImRoomManageMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 action = 3;
  optional int64 memberCount = 4;
  optional int64 popularity = 5;
  optional string popularityStr = 6;
  optional int64 deviceId = 7;
  optional string content = 8;
}
message ImRoomMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional bool supprotLandscape = 3;
  optional int32 roommessagetype = 4;
  optional bool systemTopMsg = 5;
  optional string bizScene = 20;
}
message ImRoomStartMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional string imageUrl = 3;
  optional int32 instationPushType = 4;
}
message ImRoomStatsMessage {
  optional ImCommon common = 1;
  optional string displayShort = 2;
  optional string displayMiddle = 3;
  optional string displayLong = 4;
  optional int64 displayValue = 5;
  optional int64 displayVersion = 6;
  optional bool incremental = 7;
  optional bool isHidden = 8;
  optional int64 total = 9;
  optional int64 displayType = 10;
}
message ImRoomTicketMessage {
  optional ImCommon common = 1;
  optional int32 actionType = 2;
  optional int32 lastDuration = 3;
  optional int64 ticketId = 4;
  optional string ticketExplanationCardJumpUrl = 5;
  optional string ticketPanelJumpUrl = 6;
  optional string ticketPanel6JumpUrl = 7;
  optional string ticketPanel9JumpUrl = 8;
  optional int64 ownerId = 9;
}
message ImRoomTopMessage {
  optional ImCommon common = 1;
  optional DataImage actionIcon = 2;
  optional ImBackground background = 3;
  optional int64 foldDuration = 4;
  optional int64 displayDuration = 5;
  optional DataText firstTitle = 6;
  optional DataText secondTitle = 7;
}
message ImBackground {
  optional string backgroundColor = 1;
}
message ImRoomUnionLiveMessage {
  optional ImCommon common = 1;
  optional DataUnionLiveInfo unionLiveInfo = 2;
}
message ImRoomVerifyMessage {
  optional ImCommon common = 1;
  optional int32 action = 2;
  optional string content = 3;
  optional int64 noticeType = 4;
  optional bool closeRoom = 5;
  optional int32 unableStyle = 6;
  optional string tipContent = 7;
  optional int32 anchorSwitch = 8;
  optional string switchStatusTipMsg = 9;
  optional string switchStatusAnchorTipMsg = 10;
}
message ImScreenChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 screenChatType = 3;
  optional string content = 4;
  optional int64 priority = 5;
  optional ImScreenChatMessageEffect effect = 6;
  optional DataImage backgroundImage = 7;
  optional ImScreenChatMessageEffect effectV2 = 8;
  optional DataImage backgroundImageV2 = 9;
  optional ImPublicAreaCommon publicAreaCommon = 10;
  optional ImScreenChatMessageOfficialCommentConfig officialCommentConfig = 11;
  optional int64 eventTime = 12;
  optional bool sendReview = 13;
  optional DataText rtfContent = 30;
}
message ImScreenChatMessageOfficialCommentConfig {
  optional bool official = 1;
}
message ImScreenChatMessageEffect {
  optional ImFlexImageStruct icon = 1;
  optional DataImage avatarIcon = 2;
  optional string backgroundColor = 3;
}
message ImShareGuideMessage {
  optional ImCommon common = 1;
  optional string shareChannel = 2;
}
message ImShortTouchAreaMessage {
  optional ImCommon common = 1;
  optional int32 messageType = 2;
  optional DataShortTouchArea shortTouchAreaData = 3;
}
message ImShowChatMessage {
  optional ImCommon common = 1;
  optional int64 episodeId = 2;
  optional string content = 3;
  optional int64 agreeMsgId = 4;
  optional bool visibleToSender = 5;
  optional int32 priorityLevel = 6;
  optional int32 effectType = 7;
  optional DataUser user = 20;
  optional ImPublicAreaCommon publicAreaCommon = 30;
  optional ImLandscapeAreaCommon landscapeAreaCommon = 31;
  optional DataImage backgroundImage = 40;
  repeated string fontColorValue = 41;
  optional DataImage giftImage = 42;
  optional ImOfficialCommentConfig officialCommentConfig = 43;
  optional ImCommentRoleConfig commentRole = 44;
  optional DataCommentMedal medal = 45;
  optional int32 vsMessageType = 46;
}
message ImOfficialCommentConfig {
  optional string backgroundColor = 1;
}
message ImCommentRoleConfig {
  optional string name = 1;
  optional DataImage avatar = 2;
}
message ImShowEffectMessage {
  optional ImCommon common = 1;
  optional bool flashOperatingPlace = 2;
}
message ImShowLinkedLiveRoomsMessage {
  optional ImCommon common = 1;
  optional int64 episodeId = 2;
  optional string entryTitle = 3;
  repeated ImShowLinkedLiveRoomsMessageShowLinkedLiveRoomInfo linkedLiveRooms = 4;
}
message ImShowLinkedLiveRoomsMessageShowLinkedLiveRoomInfo {
  optional int64 ownerUserId = 1;
  optional int64 roomId = 2;
  optional string roomTitle = 3;
  optional DataImage avatarThumb = 4;
  optional DataImage avatarMedium = 5;
  optional DataImage avatarLarge = 6;
}
message ImShowMultiCameraChangeMessage {
  optional ImCommon common = 1;
  repeated DataVSCameraInfo cameraInfos = 2;
  optional int64 randomlyBreakUpTime = 3;
}
message ImShowWatchInfoMessage {
  optional ImCommon common = 1;
  optional string desc = 2;
  optional string count = 3;
  optional string countWithBackup = 4;
  optional string formatCount = 5;
}
message ImSocialMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 shareType = 3;
  optional int64 action = 4;
  optional string shareTarget = 5;
  optional int64 followCount = 6;
  optional ImPublicAreaCommon publicAreaCommon = 7;
}
message ImSpecialPushMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional string color = 3;
  optional string traceid = 4;
  optional DataImage icon = 5;
  optional string actionContent = 6;
  optional int64 actionType = 7;
  optional int64 pushMessageDisplayTime = 8;
}
message ImUpdateKoiRoomStatusMessage {
  optional ImCommon common = 1;
  optional DataImage directorIcon = 2;
  optional int32 curRoundIndex = 3;
  optional int32 status = 4;
  optional string directorSchemaUrl = 5;
}
message ImStampMessage {
  optional ImCommon common = 1;
  repeated DataStampInfo stamps = 2;
}
message ImAudienceEntranceMessage {
  optional ImCommon common = 1;
  repeated DataAudienceEntranceInfo entrances = 2;
}
message ImCustomizedCardMessage {
  optional ImCommon common = 1;
  optional DataCustomizedCardInfo card = 2;
  optional string appId = 3;
  optional string startId = 4;
  optional int32 sceneSource = 5;
}
message ImGameCardMessage {
  optional ImCommon common = 1;
  optional DataGameCardInfo card = 2;
  optional string appId = 3;
  optional string startId = 4;
}
message ImStreamControlMessage {
  optional ImCommon common = 1;
  optional string controlParams = 2;
}
message ImSubscribeInfoMessage {
  optional ImCommon common = 1;
  optional bool isMember = 2;
}
message ImSubscribeAssetMessage {
  optional ImCommon common = 1;
}
message ImSunDailyRankMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional int64 duration = 3;
  optional string afterContent = 4;
  optional int64 messageType = 5;
  optional string schema = 6;
  optional string extra = 7;
  optional string style = 8;
  optional DataText afterDisplayText = 9;
  optional int64 rank = 10;
  optional string richContent = 11;
  optional string userSideContent = 12;
  optional int64 contentType = 13;
  optional string cityCode = 14;
  optional int32 rankStage = 15;
  repeated ImSunDailyRankMessageRankInfo ranks = 16;
  optional int64 beginTime = 17;
  optional int64 deltaTime = 18;
  optional DataText entranceAppearingText = 19;
  optional DataText displayTextV2 = 20;
  optional DataText afterDisplayTextV2 = 21;
  optional int64 durationV2 = 22;
}
message ImSunDailyRankMessageRankInfo {
  optional int64 rankType = 1;
  optional int64 rank = 2;
}
message ImSyncStreamInfoMessage {
  optional int64 timestamp = 1;
  optional string key = 2;
  optional string info = 3;
  optional ImCommon common = 4;
}
message ImSyncStreamMessage {
  optional ImCommon common = 1;
  repeated ImSyncStreamInfoMessage infoList = 2;
}
message ImSystemMessage {
  optional ImSystemMessageCommon common = 1;
  optional string content = 2;
}
message ImSystemMessageCommon {
  optional string method = 1;
  optional int64 msgId = 2;
  optional int64 roomId = 3;
  optional int64 createTime = 4;
  optional int32 monitor = 5;
}
message ImTaskMessage {
  optional ImCommon common = 1;
  repeated DataTaskRecord taskRecords = 2;
  optional int32 action = 3;
}
message ImAnswerReviewMessage {
  optional ImCommon common = 1;
  optional int32 answerreviewmsgtypeenum = 2;
  optional int64 answerId = 3;
  optional int64 chatId = 4;
  optional int32 answerreviewrestypeenum = 5;
}
message ImBattleMultiMatchMessage {
  optional ImCommon common = 1;
  optional int32 matchStatus = 2;
  optional int64 expectTime = 3;
  repeated ImBattleMultiMatchMessagePreviewUser previewUserList = 4;
  optional int64 defaultWaitLimit = 5;
  optional int64 inviteLimitSec = 6;
}
message ImBattleMultiMatchMessagePreviewUser {
  optional string nickname = 1;
  optional DataImage avatar = 2;
}
message ImCommentaryChangeMessage {
  optional ImCommon common = 1;
  optional DataCommentaryRoomInfo commentaryRoomInfo = 2;
  optional int32 operation = 3;
}
message ImDrumMsgType {

}
message ImDrumResult {

}
message ImDrumMessage {
  optional ImCommon common = 1;
  optional int32 drumResult = 2;
  optional int32 dumpMsgType = 3;
  optional int64 drumCount = 4;
  optional int64 reportTimeGap = 5;
  optional int64 pushId = 6;
  optional string pushIdStr = 7;
}
message ImEcomFansClubMessage {
  optional ImCommon common = 1;
  optional int32 action = 2;
  optional ImUserInfo user = 3;
}
message ImUserInfo {
  optional int64 userId = 1;
  optional int32 level = 2;
}
message ImGameCPAnchorPromoteInfoMessage {
  optional ImCommon common = 1;
  repeated ImSimpleGameInfo gameInfo = 2;
}
message ImSimpleGameInfo {
  optional string gameId = 1;
  optional int32 stage = 2;
}
message ImGiftIconFlashMessage {
  optional ImCommon common = 1;
  repeated int64 userIds = 2;
  optional int64 recommendTime = 3;
  optional int64 notFlashAfter = 4;
}
message ImInteractionInfoMessage {
  optional ImCommon common = 1;
  optional DataLikeIconInfo likeIconInfo = 2;
  optional DataChatEmojiGuideInfo chatEmojiGuideInfo = 3;
  optional DataChatImageGuideInfo chatImageGuideInfo = 4;
  repeated int32 updateInfoType = 50;
}
message ImRoomChannelLinkMessage {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  optional int64 linkerId = 3;
  optional int64 scene = 4;
  optional ImChannelLinkerCreateContent createContent = 5;
  optional ImChannelLinkerCloseContent closeContent = 6;
  optional ImChannelLinkerInviteContent inviteContent = 7;
  optional ImChannelLinkerReplyContent replyContent = 8;
  optional ImChannelLinkerPermitContent permitContent = 9;
  optional ImChannelLinkerEnterContent enterContent = 10;
  optional ImChannelLinkerLeaveContent leaveContent = 11;
  optional ImChannelLinkerKickOutContent kickOutContent = 12;
  optional ImChannelLinkerLinkedListChangeContent linkedListChangeContent = 13;
  optional ImChannelLinkerSilenceContent silenceStatusContent = 14;
  optional ImChannelLinkerApplyContent applyContent = 15;
}
message ImChannelLinkerApplyContent {
  optional int64 applicantUserId = 1;
  optional string applicantSecUserId = 2;
}
message ImChannelLinkerCreateContent {
  optional int64 ownerId = 1;
  optional int64 roomId = 2;
  optional int64 linkType = 3;
  optional string secOwnerId = 4;
}
message ImChannelLinkerCloseContent {
  optional int32 source = 1;
}
message ImChannelLinkerInviteContent {
  optional int64 inviterUserId = 1;
  optional int64 inviteeUserId = 2;
  optional string prompt = 3;
  optional string inviterSecUserId = 4;
  optional string inviteeSecUserId = 5;
}
message ImChannelLinkerReplyContent {
  optional int64 inviterUserId = 1;
  optional int64 inviteeUserId = 2;
  optional int32 replyResult = 3;
  optional string prompt = 4;
  optional string inviterSecUserId = 5;
  optional string inviteeSecUserId = 6;
}
message ImChannelLinkerPermitContent {
  optional int64 applicantUserId = 1;
  optional int64 approverUserId = 2;
  optional int32 permitResult = 3;
  optional string prompt = 4;
  optional string applicantSecUserId = 5;
  optional string approverSecUserId = 6;
}
message ImChannelLinkerEnterContent {
  optional int64 userId = 1;
  optional string secUserId = 2;
}
message ImChannelLinkerLeaveContent {
  optional int64 userId = 1;
  optional string secUserId = 2;
}
message ImChannelLinkerKickOutContent {
  optional int64 fromUserId = 1;
  optional string prompt = 2;
  optional string secFromUserId = 3;
}
message ImChannelLinkerLinkedListChangeContent {
  repeated DataChannelListUser channelLinkmicUsers = 1;
  optional uint64 version = 2;
  optional string rtcRoomIdStr = 3;
}
message ImChannelLinkerSilenceContent {
  optional int32 silenceStatus = 1;
  optional int64 fromUserId = 2;
  optional int64 toUserId = 3;
  optional string ackMessage = 4;
  optional uint64 version = 5;
  optional string secFromUserId = 6;
  optional string secToUserId = 7;
}
message ImLinkmicOrderSingMessage {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  optional ImLinkmicOrderSingCreateContent orderSingCreateContent = 3;
  optional ImLinkmicOrderSingFinishContent orderSingFinishContent = 4;
  optional ImLinkmicOrderSingActionToastContent orderSingActionToastContent = 5;
}
message ImLinkmicOrderSingCreateContent {
  optional string openOrderSingToast = 1;
}
message ImLinkmicOrderSingFinishContent {
  optional string closeOrderSingToast = 1;
}
message ImLinkmicOrderSingActionToastContent {
  optional string startSingToast = 1;
  optional string finishSingToast = 2;
  optional string oderSingToast = 3;
}
message ImLinkmicOrderSingScoreMessage {
  optional ImCommon common = 1;
  optional ImLinkmicOrderSingScoreContent orderSingScoreContent = 2;
}
message ImLinkmicOrderSingScoreContent {
  optional ImOrderSingUserScore userScore = 1;
  optional DataImage silverMicrophoneIcon = 2;
  optional DataImage goldenMicrophoneIcon = 3;
}
message ImOrderSingUserScore {
  optional int64 userId = 1;
  optional int64 silverMicrophoneNum = 2;
  optional int64 goldenMicrophoneNum = 3;
  optional int32 currentTaskMicrophoneType = 4;
  optional int64 currentScore = 5;
  optional int64 needScoreToNext = 6;
}
message ImLinkmicSelfDisciplineMessage {
  optional ImCommon common = 1;
  optional int32 msgType = 2;
  optional ImLinkmicSelfDisciplineConfigContent configContent = 21;
  optional ImLinkmicSelfDisciplineLikeContent likeContent = 22;
}
message ImLinkmicSelfDisciplineConfigContent {
  optional int32 switchStatus = 1;
  optional string currentTarget = 2;
  optional string targetIconUri = 3;
  optional string text = 4;
}
message ImLinkmicSelfDisciplineLikeContent {
  optional int64 fromUserId = 1;
  optional int64 toUserId = 2;
  optional int32 source = 3;
}
message ImTraceTimeMetricV2 {
  optional int64 opTimestamp = 1;
  optional int64 producerDuration = 2;
  optional int64 consumerDuration = 3;
  optional int64 msgSendTimestamp = 4;
}
message ImLiveEcomGeneralMessage {
  optional ImCommon common = 1;
  optional string contentType = 2;
  optional string contentFormat = 3;
  optional int64 logicClock = 4;
  optional ImTraceTimeMetricV2 traceTimeMetric = 5;
  optional bytes data = 6;
}
message ImLotteryBurstMessage {
  optional ImCommon common = 1;
  optional int64 burstTimeRemainSeconds = 2;
  optional int64 multiple = 3;
  optional int64 propertyDefinitionId = 4;
  optional DataImage propertyIcon = 5;
}
message ImLotteryMessage {
  optional ImCommon common = 1;
}
message ImXGLotteryMessage {
  optional ImCommon common = 1;
  optional DataLotteryInfo lotteryInfo = 2;
}
message ImLotteryEventMessage {
  optional ImCommon common = 1;
  optional int64 lotteryId = 2;
  optional int32 lotteryStatus = 3;
  optional int64 lotteryStartTime = 4;
  optional int64 lotteryDrawTime = 5;
  optional int64 lotteryCurrentTime = 6;
  optional string rulePageScheme = 7;
}
message ImLotteryExpandEventMessage {
  optional ImCommon common = 1;
  optional int64 expandPrizeType = 2;
  optional string extra = 3;
}
message ImLotteryEventNewMessage {
  optional ImCommon common = 1;
  optional int64 lotteryId = 2;
  optional int32 lotteryStatus = 3;
  optional int64 lotteryStartTime = 4;
  optional int64 lotteryDrawTime = 5;
  optional int64 lotteryCurrentTime = 6;
  optional string rulePageScheme = 7;
  optional int64 prizeType = 8;
  optional string lotteryAuditFailureReason = 9;
  repeated int32 conditions = 10;
  map<string, string> extraMap = 11;
  optional bool useNewDrawInteraction = 12;
}
message ImLotteryCandidateEventMessage {
  optional ImCommon common = 1;
  optional int64 lotteryId = 2;
  optional int64 userId = 3;
}
message ImLotteryDrawResultEventMessage {
  optional ImCommon common = 1;
  optional int64 lotteryId = 2;
  repeated int64 userIds = 3;
  optional string extra = 4;
}
message ImLuckyBoxMessage {
  optional ImCommon common = 1;
  optional int64 diamondCount = 2;
  optional int64 boxId = 3;
  optional int64 sendTime = 4;
  optional int64 delayTime = 5;
  optional int64 boxType = 6;
  optional string title = 7;
  optional bool large = 8;
  optional DataImage background = 9;
  optional bool isOfficial = 10;
  optional int64 priority = 11;
  optional DataUser user = 12;
  repeated ImLuckyBoxMessageImgText descriptionList = 13;
  optional DataImage luckyIcon = 14;
  optional int64 displayDuration = 15;
  optional int32 boxStatus = 16;
  optional int32 flatDuration = 17;
  optional int32 unpackType = 18;
  optional ImLuckyBoxMessageBoxMeta meta = 19;
  optional ImLuckyBoxMessageExtra extra = 20;
  optional int64 businessType = 21;
  optional DataImage topCoverImage = 22;
  optional DataImage bottomCoverImage = 23;
  optional string boxIdStr = 24;
  optional ImLuckyBoxMessageBottomCommentMsg bottomCommentMsg = 25;
  optional bool isRiskyOwner = 26;
}
message ImLuckyBoxMessageImgText {
  optional DataImage image = 1;
  optional string text = 2;
}
message ImLuckyBoxMessageBoxMeta {
  optional string titleDesc = 1;
  optional string contentCountDesc = 2;
  optional string contentAmountDesc = 3;
  optional string animationDesc = 4;
  optional string beforeUnpackDesc = 5;
  optional string successUnpackDesc = 6;
  optional string failUnpackDesc = 7;
  optional DataImage adImage = 8;
  optional string imDesc = 9;
}
message ImLuckyBoxMessageExtra {
  map<string, string> allDescMap = 1;
  map<string, DataImage> allImageMap = 2;
  optional int32 currentRound = 3;
  optional int32 pct = 4;
  repeated int64 roundTarget = 5;
}
message ImLuckyBoxMessageBottomCommentMsg {
  optional DataText text = 1;
  optional DataImage background = 2;
  optional DataImage leftIcon = 3;
  optional DataImage rightIcon = 4;
}
message ImLuckyBoxEndMessage {
  optional ImCommon common = 1;
  optional int64 boxId = 2;
  optional string boxIdStr = 3;
}
message ImLuckyMoneyMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 luckymoneyId = 3;
  optional int64 diamondCount = 4;
}
message ImMagicBoxMessage {
  optional ImCommon common = 1;
  optional int64 diamondCount = 2;
  optional int64 magicBoxId = 3;
  optional int64 sendTime = 4;
  optional int64 delayTime = 5;
  optional int64 boxType = 6;
  optional string title = 7;
  optional bool large = 8;
  optional DataImage background = 9;
  optional bool isOfficial = 10;
  optional int64 priority = 11;
  optional DataUser user = 12;
  repeated ImMagicBoxMessageImgText descriptionList = 13;
}
message ImMagicBoxMessageImgText {
  optional DataImage image = 1;
  optional string text = 2;
}
message ImLinkMicArmies {
  optional ImCommon common = 1;
  map<int64, ImLinkMicArmiesUserArmies> userArmiesMapMap = 2;
  repeated ImLinkMicArmiesUserArmies userArmiesList = 3;
  optional DataBattleContributorsRankListV2 rankListV2 = 4;
}
message ImLinkMicArmiesUserArmies {
  repeated ImLinkMicArmiesUserArmiesUserArmy userArmies = 1;
}
message ImLinkMicArmiesUserArmiesUserArmy {
  optional int64 userId = 1;
  optional int64 score = 2;
  optional string nickname = 3;
  optional DataImage avatarThumb = 4;
}
message ImLinkMicBattleFinish {
  optional ImCommon common = 1;
  optional DataBattleSettings battleSettings = 2;
  repeated DataBattleArmy battleArmies = 3;
  repeated DataBattleScore battleScores = 4;
  repeated DataUser anchors = 5;
  map<int64, DataBattleStarActivityGradeChange> gradeChangesMap = 6;
  optional DataOperationalPlay operationalPlay = 7;
  optional int32 endReason = 8;
  optional string cutShortPrompt = 9;
  optional string cutShortToast = 10;
  optional bool cutShortWin = 11;
  map<int64, DataBattleUserInfo> userInfosMap = 12;
  optional int32 killFinishType = 13;
}
message ImBattleMode {
  optional int32 mode = 1;
  optional ImBattleModeStealTowerData stealTowerData = 2;
}
message ImBattleModeStealTowerData {
  optional int64 triggerTime = 1;
}
message ImBattleSettings {
  optional int64 battleId = 2;
  optional int64 startTimeMs = 3;
  optional int64 duration = 4;
  optional string theme = 5;
  optional int64 channelId = 6;
  optional int64 matchType = 7;
  optional string bannerUrl = 8;
  optional int64 subType = 9;
  optional int32 mode = 10;
  optional string config = 11;
  optional string notifySchemeUrl = 12;
  optional string hotsoonNotifySchemeUrl = 13;
  optional DataImage unknwonField1 = 14;
  optional string unknwonField2 = 15;
  optional string unknwonField3 = 16;
  optional DataBattleTitleConfig titleConfig = 17;
  optional DataBattleTitleConfig punishConfig = 18;
  optional int64 punishDuration = 19;
  optional int64 punishStartTimeMs = 20;
  optional int32 optimizeVersion = 21;
  optional bool punishOptimizeOn = 22;
  optional int64 bloodDisplayDuration = 23;
  optional int64 statusDisplayDuration = 24;
  optional string toast = 25;
  optional bool needCloseLinkmic = 26;
  optional bool displayLastResult = 27;
  optional string normalActivityName = 28;
  optional int32 inviteType = 29;
  optional DataBattleConfigSetting battleConfigSetting = 31;
}
message ImBattleTask {
  optional bool enableTask = 1;
}
message ImLinkMicBattle {
  optional ImCommon common = 1;
  optional ImBattleSettings battleSettings = 2;
  optional ImBattleMode battleMode = 3;
  optional ImBattleTask battleTask = 4;
  optional int32 skinType = 5;
  map<int64, DataBattleUserInfo> userInfosMap = 6;
  optional DataOperationalPlay operationalPlay = 7;
  optional int32 battleType = 8;
  optional bool relativeScore = 9;
  optional bool normalToMultiple = 10;
}
message ImPunishEffect {
  optional int64 effectId = 1;
  optional string effectName = 2;
  optional DataImage effectImage = 3;
  optional int64 lowestScore = 4;
  optional int64 duration = 5;
  optional int64 needMedicineCount = 6;
  optional bool usable = 7;
  optional int32 level = 8;
}
message ImLinkMicBattlePunish {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  repeated ImPunishEffect punishEffectList = 3;
  optional string prompts = 4;
  optional DataUser mvp = 5;
  optional int64 medicineCount = 6;
  optional ImPunishEffect targetEffect = 7;
  optional int64 startTime = 8;
  optional DataUser targetUser = 9;
  optional int64 speedyGiftId = 11;
  optional int64 duration = 12;
  optional int64 channelId = 13;
  optional int64 battleId = 14;
}
message ImLinkMicBattleTaskMessage {
  optional ImCommon common = 1;
  optional string content = 2;
}
message ImChijiNoticeMessage {
  optional ImCommon common = 1;
  optional int32 messageType = 2;
  optional string bannerUrl = 3;
}
message ImLinkMicEnterNoticeMessage {
  optional ImCommon common = 1;
  optional DataBattleSettings battleSettings = 2;
}
message ImLinkMicFriendOnlineMessage {
  optional ImCommon common = 1;
  optional DataUser friend = 2;
  optional bool inRoom = 3;
}
message ImLinkMicGuideMessage {
  optional ImCommon common = 1;
  optional ImLinkMicGuideMessageAnchorInfo anchorInfo = 2;
  optional int64 cueThreshold = 3;
  optional int64 guidelineType = 4;
  optional ImLinkMicGuideMessageFastMatchGuideline fastMatchGuideline = 5;
  optional ImCallToLinkmicContent callToLinkmicContent = 20;
  optional ImKtvAddSongGuideContent ktvAddSongGuideContent = 21;
  optional ImCreateGroupChatGuideContent createGroupChatGuideContent = 22;
  optional ImJoinGroupChatGuideContent joinGroupChatGuideContent = 23;
  optional ImGuestBattleBubbleGuideContent guestBattleBubbleGuideContent = 24;
  optional ImCreateTeamfightGuideContent createTeamfightGuideContent = 25;
  optional ImNormalPaidLinkmicExplainCardContent normalPaidLinkmicExplainCardContent = 26;
  optional ImNormalPaidLinkmicMigrateToPlayContent normalPaidLinkmicMigrateToPlayContent = 27;
  optional ImLinkmicFollowEffectContent linkmicFollowEffectContent = 28;
  optional ImPKLinkBubbleContent pkLinkBubbleContent = 29;
  optional ImPlayModeGuideBubbleContent playModeGuideBubbleContent = 30;
}
message ImLinkMicGuideMessageAnchorInfo {
  repeated ImLinkMicGuideMessageAnchorInfoInfoItem infolist = 1;
}
message ImLinkMicGuideMessageAnchorInfoInfoItem {
  optional DataImage icon = 1;
  optional string content = 2;
}
message ImLinkMicGuideMessageFastMatchGuideline {
  optional string title = 1;
  optional string subtitle = 2;
}
message ImLinkmicFollowEffectContent {
  optional int64 roomId = 1;
  optional int64 fromUserId = 2;
  repeated ImLinkmicFollowEffectContentFollowInfo followInfos = 3;
}
message ImLinkmicFollowEffectContentFollowInfo {
  optional int64 targetUserId = 1;
  optional int64 followStatus = 2;
}
message ImGuestBattleBubbleGuideContent {
  optional DataText text = 1;
}
message ImCallToLinkmicContent {
  optional DataText text = 1;
}
message ImKtvAddSongGuideContent {
  optional DataText text = 1;
}
message ImCreateGroupChatGuideContent {
  optional int64 anchorId = 1;
  optional string headerText = 2;
  optional string bodyText = 3;
}
message ImJoinGroupChatGuideContent {
  optional int64 groupId = 1;
  optional string conversationId = 2;
  optional string headerText = 3;
  optional string bodyText = 4;
  repeated DataImage icons = 5;
  optional int32 groupType = 6;
  optional int32 guideSource = 7;
}
message ImCreateTeamfightGuideContent {
  optional DataText toastText = 4;
}
message ImNormalPaidLinkmicExplainCardContent {
  optional DataPaidLinkmicExplainCardInfo explainCardInfo = 1;
}
message ImNormalPaidLinkmicMigrateToPlayContent {
  optional string toast = 1;
}
message ImPKLinkBubbleContent {
  optional string toast = 1;
}
message ImPlayModeGuideBubbleContent {
  optional int32 playMode = 1;
  optional string toast = 2;
}
message ImLinkMicHostModifyMsg {
  optional ImCommon common = 1;
  repeated int64 hostUids = 2;
}
message ImLinkMicKtvBeatRankMessage {
  optional ImCommon common = 1;
  repeated DataUser userList = 2;
  optional DataUser singer = 3;
  optional int64 songId = 4;
}
message ImLinkMicKtvEffectMessage {
  optional ImCommon common = 1;
  optional DataUser fromUser = 2;
  optional DataUser singer = 3;
  optional int64 songId = 4;
}
message ImLinkMicMethod {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  optional string accessKey = 3;
  optional int64 anchorLinkmicId = 4;
  optional int64 userId = 5;
  optional int64 fanTicket = 6;
  optional int64 totalLinkmicFanTicket = 7;
  optional int64 channelId = 8;
  optional int64 layout = 9;
  optional int64 vendor = 10;
  optional int64 dimension = 11;
  optional string theme = 12;
  optional int64 inviteUid = 13;
  optional int64 answer = 14;
  optional int64 startTime = 15;
  optional int64 duration = 16;
  repeated ImLinkMicMethodUserScores userScores = 17;
  optional int64 matchType = 18;
  optional bool win = 19;
  optional string prompts = 20;
  optional int64 toUserId = 21;
  map<int64, ImLinkMicMethodContributorList> contributorsMap = 22;
  optional int64 linkmicLayout = 23;
  optional int64 fromUserId = 24;
  optional string tips = 25;
  optional int64 startTimeMs = 26;
  optional int32 confluenceType = 27;
  optional int64 fromRoomId = 28;
  optional int64 inviteType = 29;
  optional int64 subType = 30;
  optional DataRivalExtraInfo inviterRivalExtra = 31;
  optional string rtcExtInfo = 32;
  optional string rtcAppId = 33;
  optional string appId = 34;
  optional string appSign = 35;
  optional string rtcAppSign = 36;
  optional string anchorLinkmicIdStr = 37;
  optional int64 rivalAnchorId = 38;
  optional int64 rivalLinkmicId = 39;
  optional string rivalLinkmicIdStr = 40;
  optional bool showPopup = 41;
  optional int64 secInviteUid = 42;
  optional int64 scene = 43;
  optional int64 secApplyUid = 44;
  repeated DataUser linkedUsers = 45;
  optional string secFromUserId = 46;
  optional int32 replyType = 47;
  optional string replyPrompts = 48;
  optional string secToUserId = 49;
  optional ImLinkMicMethodInvitorInfo invitorInfo = 50;
  optional bool rtcJoinChannel = 51;
  optional int32 subScene = 52;
  optional bool supportUpdateLinkType = 53;
  optional int32 linkType = 54;
  optional int32 source = 55;
  optional DataAnchorLinkmicInfo backupAnchorLinkmicInfo = 56;
  repeated int32 playModes = 57;
  repeated DataListUser linkedListUsers = 58;
  repeated DataLinkmicPositionItem lockedPositions = 59;
  optional int32 endReason = 60;
  optional DataMultiRtcInfo multiRtcInfo = 61;
  optional DataMultiLiveCoreInfo multiLiveCoreInfo = 62;
  optional int32 layoutConfigVersion = 63;
  optional int32 controlType = 64;
  optional DataBanUser banAnchorInfo = 65;
  optional uint64 version = 66;
  optional DataJoinTeamfightInfo joinTeamfightInfo = 67;
  optional int64 paidCount = 68;
  optional int64 linkDuration = 69;
  optional string liveCoreExtInfo = 70;
  optional DataGameInviteInfo gameInviteInfo = 71;
  optional int32 uiLayout = 72;
  optional DataText inviteMessage = 73;
  optional DataMultiChannelInfo multiChannelInfo = 74;
  optional int32 kickOutSource = 75;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 76;
  optional string functionType = 77;
  optional DataMsgBoardItemInfo msgBoardItem = 78;
  optional string fromUserLinkmicIdStr = 79;
  optional string ackMessage = 80;
  optional string initSource = 81;
}
message ImLinkMicMethodUserScores {
  optional int64 score = 1;
  optional int64 userId = 2;
  optional int64 weeklyRank = 3;
  optional string scoreRelativeText = 4;
  optional bool isLargePkScore = 5;
  optional bool roomLikeTrigger = 6;
  optional string scoreBlurText = 7;
  optional int64 battleRank = 8;
  optional bool newScoreOpen = 9;
  optional string multiPkTeamScoreText = 10;
  optional int64 multiPkTeamScore = 11;
  optional int64 multiPkTeamRank = 12;
  optional bool isMultiPkRelativeText = 13;
}
message ImLinkMicMethodContributor {
  optional int64 score = 1;
  optional int64 rank = 2;
  optional int64 userId = 3;
  optional DataUser user = 4;
}
message ImLinkMicMethodContributorList {
  repeated ImLinkMicMethodContributor contributorList = 1;
}
message ImLinkMicMethodInvitorInfo {
  optional string invitorNickName = 1;
  optional DataImage invitorAvatar = 2;
}
message ImLinkMicOChannelKickOutMsg {
  optional ImCommon common = 1;
  optional int64 kickOutUid = 2;
  optional string toastMsg = 3;
}
message ImLinkMicOChannelNotifyMsg {
  optional ImCommon common = 1;
  optional int32 type = 2;
  optional string toastMsg = 3;
}
message ImLinkMicPositionMessage {
  optional ImCommon common = 1;
  optional int32 messageType = 2;
  optional ImLinkMicPositionListChangeContent listChangeContent = 3;
  optional ImLinkMicPositionVerifyContent verifyContent = 4;
}
message ImLinkMicPositionListChangeContent {
  repeated DataLinkmicPositionItem positions = 1;
}
message ImLinkMicPositionVerifyItem {
  optional int64 position = 1;
  optional string positionName = 2;
  optional int32 verifyStatus = 3;
}
message ImLinkMicPositionVerifyContent {
  optional int64 currentVerifyPosition = 1;
  repeated ImLinkMicPositionVerifyItem verifyPositionItems = 2;
  repeated DataLinkmicPositionItem finalPositionItems = 3;
}
message ImLinkMicSendEmojiMessage {
  optional ImCommon common = 1;
  optional DataUser fromUser = 2;
  optional DataLinkmicAudienceEmoji emoji = 3;
  optional DataImage emojiImageResult = 4;
  optional DataUser toUser = 5;
  optional string source = 6;
}
message ImLinkSettingNotifyMessage {
  optional ImCommon common = 1;
  repeated DataLinkmicSetting settings = 2;
  optional ImPaiedOrTimeLimitChangeContent paiedOrTimeLimitChangeContent = 10;
}
message ImPaiedOrTimeLimitChangeContent {
  optional bool needLeave = 1;
  optional string toast = 2;
}
message ImLinkMicSignalingMethod {
  optional ImCommon common = 1;
  optional string content = 2;
}
message ImCommon {
  optional string method = 1;
  optional int64 msgId = 2;
  optional int64 roomId = 3;
  optional int64 createTime = 4;
  optional int32 monitor = 5;
  optional bool isShowMsg = 6;
  optional string describe = 7;
  optional DataText displayText = 8;
  optional int64 foldType = 9;
  optional int64 anchorFoldType = 10;
  optional int64 priorityScore = 11;
  optional string logId = 12;
  optional string msgProcessFilterK = 13;
  optional string msgProcessFilterV = 14;
  optional DataUser user = 15;
  optional DataRoom room = 16;
  optional int64 anchorFoldTypeV2 = 17;
  optional int64 processAtSeiTimeMs = 18;
  optional int64 randomDispatchMs = 19;
  optional bool isDispatch = 20;
  optional int64 channelId = 21;
  optional int64 diffSei2absSecond = 22;
  optional int64 appId = 24;
}
message ImPublicAreaCommon {
  optional DataImage userLabel = 1;
  optional int64 userConsumeInRoom = 2;
  optional int64 userSendGiftCntInRoom = 3;
  optional int64 individualPriority = 4;
  optional int64 imAction = 8;
}
message ImLandscapeAreaCommon {
  optional bool showHead = 1;
  optional bool showNickname = 2;
  optional bool showFontColor = 3;
  repeated string colorValue = 4;
  repeated int32 commentTypeTags = 5;
}
message ImFlexImageStruct {
  repeated string urlList = 1;
  optional string uri = 2;
  repeated int64 flexSetting = 3;
  repeated int64 textSetting = 4;
  optional int64 topBorderHeight = 5;
}
message ImCommonBubbleConfig {
  optional string content = 1;
  optional int64 duration = 2;
  optional DataText richText = 3;
  optional string schemeUrl = 4;
  optional ImFlexImageStruct backgroundImage = 5;
  optional DataImage arrowImage = 6;
  optional int32 messageType = 7;
  optional int32 arrowPosition = 8;
}
message ImRoomBorderMessage {
  optional ImCommon common = 1;
  optional DataBorderInfo borderInfo = 2;
}
message ImActivityInteractiveMessage {
  optional ImCommon common = 1;
  optional string extra = 2;
}
message ImMagicGestureActivityMessage {
  optional ImCommon common = 1;
  optional int32 status = 2;
  optional string effectId = 3;
  optional int32 actionType = 4;
  optional string actionSchema = 5;
  optional string bizId = 6;
}
message ImPixActivityMessage {
  optional ImCommon common = 1;
  optional int32 currentLevel = 2;
  optional bool canChangeProp = 3;
}
message ImPrizeNoticeMessage {
  optional ImCommon common = 1;
  optional int64 assetId = 2;
  optional ImImageInfo imageInfo = 3;
  optional DataImage landscapeBgImg = 4;
  optional string landscapeContent = 5;
  optional int64 sceneContextId = 6;
  optional int32 landscapeHeight = 7;
  optional int32 playPriority = 8;
  map<string, string> extraMap = 9;
}
message ImImageInfo {
  optional DataImage img = 1;
  optional int32 start = 2;
  optional int32 duration = 3;
  optional int32 x = 4;
  optional int32 y = 5;
  optional int32 width = 6;
  optional int32 height = 7;
  optional bool needCircle = 8;
}
message ImAdminPrivilegeMessage {
  optional ImCommon common = 1;
  optional ImAdminPrivilegeStruct data = 2;
}
message ImAdminPrivilegeStruct {
  optional int32 privilege = 1;
  optional int64 op = 2;
}
message ImAdminRecordHandleMessage {
  optional ImCommon common = 1;
  optional int32 handleType = 2;
}
message ImAdminData {
  optional int64 uid = 1;
  optional string name = 2;
}
message ImTextExtraItem {
  optional int32 start = 1;
  optional int32 stop = 2;
  optional int32 type = 3;
  optional string userId = 4;
  optional string hashtagName = 5;
  optional string hashtagId = 6;
  optional bool isCommerce = 7;
  optional string awemeId = 8;
  optional int32 subType = 9;
}
message ImAdminRecordMessage {
  optional ImCommon common = 1;
  optional ImAdminData admin = 2;
  optional int64 itemId = 3;
  optional int64 draftId = 4;
  optional string videoText = 5;
  repeated ImTextExtraItem videoTextExtra = 6;
}
message ImAnchorBoostMessage {
  optional ImCommon common = 1;
  optional ImAnchorBoost data = 2;
}
message ImAnchorBoost {
  optional int64 eventName = 1;
  optional int64 anchorId = 2;
  optional int32 liveId = 3;
  optional int32 eventType = 4;
  optional string content = 5;
}
message ImAssetEffectUtilMessage {
  optional ImCommon common = 1;
  optional int64 assetId = 2;
  optional int64 priority = 3;
  optional int64 price = 4;
  optional DataText text = 5;
  optional int64 textWidth = 6;
  optional int64 textHeitht = 7;
  optional string tracking = 8;
  optional string dressId = 9;
  repeated ImEffectUtilImageInfo images = 10;
  repeated ImEffectUtilTextInfo texts = 20;
}
message ImEffectUtilImageInfo {
  optional string placeholderKey = 1;
  optional DataImage mixImage = 2;
}
message ImEffectUtilTextInfo {
  optional string placeholderKey = 1;
  optional string content = 2;
  optional int64 fontSize = 3;
  optional string fontColor = 4;
}
message ImAssetMessage {
  optional ImCommon common = 1;
  optional int64 assetId = 2;
  optional DataText panelDisplayText = 3;
  optional bool showMessage = 4;
  optional bool showPanel = 5;
  optional DataUser user = 6;
  optional DataUser toUser = 7;
  optional DataGiftIMPriority priority = 8;
  optional string logId = 9;
  optional int32 playPriority = 10;
}
message ImAudioBGImgMessage {
  optional ImCommon common = 1;
  optional DataAudioBGData bgList = 2;
  optional int32 reviewpass = 3;
  optional int32 bgType = 4;
  optional string showText = 5;
}
message ImAudioChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string content = 3;
  optional string audioUrl = 4;
  optional int64 audioDuration = 5;
  optional ImPublicAreaCommon publicAreaCommon = 6;
}
message ImAuthorizationNotifyMessage {
  optional ImCommon common = 1;
  optional string from = 2;
  optional string content = 3;
  optional string style = 4;
  optional ImAuthorizationNotifyMessageContentBlock userContent = 6;
  optional ImAuthorizationNotifyMessageRelationBlock userRelation = 7;
}
message ImAuthorizationNotifyMessageContentBlock {
  optional bool show = 1;
  optional bool isAuthorized = 2;
  optional string title = 3;
  optional string content = 4;
  optional string detail = 5;
}
message ImAuthorizationNotifyMessageRelationBlock {
  optional bool show = 1;
  optional bool isAuthorized = 2;
  optional string title = 3;
  optional string content = 4;
  optional string detail = 5;
}
message ImAutoCoverMessage {
  optional ImCommon common = 1;
  optional DataImage image = 2;
}
message ImAwemeShopExplainMessage {
  optional ImCommon common = 1;
  optional ImAwemeShopExplainMessageExtra extra = 2;
}
message ImAwemeShopExplainMessageExtra {
  optional int64 promotionId = 1;
  optional bool active = 2;
}
message ImBackRecordVideoMessage {
  optional ImCommon common = 1;
  optional string m3u8Url = 2;
  repeated string tsUrls = 3;
  optional string executionId = 4;
  optional bool succeed = 5;
  optional int64 startTime = 6;
  optional int64 endTime = 7;
}
message ImBattleCancelMessage {
  optional ImCommon common = 1;
  optional int64 channelId = 2;
}
message ImBattleFeedBackCardMessage {
  optional ImCommon common = 1;
  optional int64 rivalUid = 2;
  optional int32 feedbackCardType = 3;
  optional DataFeedbackCard feedbackCard = 4;
  optional int64 battleId = 5;
  optional int64 channelId = 6;
}
message ImBattleFrontRankMessage {
  optional ImCommon common = 1;
}
message ImBattleInviteMessage {
  optional ImCommon common = 1;
  optional int32 inviteType = 2;
  optional int64 channelId = 3;
  optional string signExtra = 4;
  optional int64 inviteUid = 5;
  optional int64 battleId = 6;
  optional string multipleAgainPrompts = 7;
  optional DataPanelTitle panelTitle = 8;
  optional int32 scene = 9;
  optional string inviteTitle = 10;
  optional string inviteSubTitle = 11;
  optional int64 waitSec = 12;
  optional DataBattleConfigSetting battleConfigSetting = 14;
  optional int64 durationTime = 15;
}
message ImBattleModeMessage {
  optional ImCommon common = 1;
  optional int64 mode = 2;
  optional ImBattleModeMessageStealTowerData stealTowerData = 3;
  optional int64 now = 4;
}
message ImBattleModeMessageStealTowerData {
  optional int64 startTime = 1;
  optional int64 finishTime = 2;
  optional int64 duration = 3;
  optional int64 targetScore = 4;
  optional int64 attackerId = 5;
  optional bool finish = 6;
  optional int64 win = 7;
  optional int64 openScore = 8;
  optional int64 count = 9;
}
message ImBattleNotifyMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional int32 notifyType = 3;
  optional int64 continueSeconds = 4;
}
message ImPrecisionMatch {
  optional int64 sponsorId = 1;
  repeated ImPrecisionMatchMatcher matchers = 2;
  optional string matchReason = 3;
  optional int64 waitSeconds = 4;
  optional int64 precisionMatchId = 5;
  optional string activityName = 6;
  optional string recommendReason = 7;
  optional string signExtra = 8;
}
message ImPrecisionMatchMatcher {
  optional int64 userId = 1;
  optional DataRoom room = 2;
  optional int32 status = 3;
  repeated DataBattleRivalTag tags = 4;
}
message ImBattlePrecisionMatchMessage {
  optional ImCommon common = 1;
  optional ImPrecisionMatch precisionMatch = 2;
}
message ImBattleRejectMessage {
  optional ImCommon common = 1;
  optional int64 channelId = 2;
  optional int64 battleId = 3;
  optional int64 rejectUid = 4;
  optional string multipleAgainPrompts = 5;
  optional int32 inviteType = 6;
}
message ImBattleTeamTaskAskMessage {
  optional ImCommon common = 1;
  optional string teamTaskJson = 2;
}
message ImBattleTeamTaskMessage {
  optional ImCommon common = 1;
  optional DataTeamTask teamTask = 2;
  optional string teamTaskJson = 3;
}
message ImBattleUseCardMessage {
  optional ImCommon common = 1;
  optional DataItemCardInfo info = 2;
  optional string extra = 4;
}
message ImBeginnerGuideMessage {
  optional ImCommon common = 1;
  optional int32 messageType = 2;
  optional string prompts = 3;
}
message ImLinkmicBigEventMessage {
  optional ImCommon common = 1;
  optional int32 msgType = 2;
  optional ImInitLinkmicContent initLinkmicContent = 3;
  optional ImSwitchSceneContent switchSceneContent = 4;
  optional ImSwitchEarphoneMonitorContent switchEarphoneMonitorContent = 5;
  optional ImSwitchKtvModeContent switchKtvModeContent = 6;
  optional ImSwitchLyricStatusContent switchLyricStatusContent = 7;
  optional ImSwitchFullSongStatusContent switchFullSongStatusContent = 8;
  optional ImSwitchTuningEffectContent switchTuningEffectContent = 9;
}
message ImInitLinkmicContent {
  optional int32 targetMode = 1;
}
message ImSwitchSceneContent {
  optional int32 targetMode = 1;
}
message ImSwitchEarphoneMonitorContent {
  optional int32 toStatus = 1;
}
message ImSwitchKtvModeContent {
  optional int32 ktvMode = 1;
}
message ImSwitchLyricStatusContent {
  optional int32 toStatus = 1;
}
message ImSwitchFullSongStatusContent {
  optional int32 toStatus = 1;
}
message ImSwitchTuningEffectContent {
  optional string toEffectName = 1;
}
message ImBridgeData {
  optional ImCommon common = 1;
  optional string bridgeMessageJson = 2;
}
message ImBridgeMessage {
  optional ImCommon common = 1;
  optional ImBridgeData bridge = 2;
}
message ImBrotherhoodMessage {
  optional ImCommon common = 1;
  optional string content = 2;
}
message ImCarBallShowMessage {
  optional ImCommon common = 1;
  optional bool isShow = 2;
}
message ImCarSeriesInfoMessage {
  optional ImCommon common = 1;
  optional int64 actionType = 2;
  optional int64 seriesId = 3;
  optional string seriesName = 4;
  optional string officialPrice = 5;
  optional string imageUrl = 6;
  optional string openUrl = 7;
}
message ImCategoryChangeMessage {
  optional ImCommon common = 1;
  optional string categoryId = 2;
  optional string categoryName = 3;
  optional string challengeId = 4;
  optional string challengeName = 5;
}
message ImChatCarnivalMessage {
  optional ImCommon common = 1;
  optional int64 notifyType = 2;
  optional int64 anchorStartTimestamp = 3;
  optional int64 anchorStartSecond = 4;
  optional int64 userStartTimestamp = 5;
  optional int64 userStartSecond = 6;
  optional int64 duration = 7;
  optional string backgroundColor = 8;
  optional DataImage titleImage = 9;
  optional string preContent = 10;
  optional string content = 11;
  optional int64 orientations = 12;
  optional int64 moveSpeed = 13;
  repeated ImChatItem chatStyle = 14;
  repeated ImEggItem eggStyle = 15;
  optional int64 wordOrientation = 16;
  optional int64 moveDirection = 17;
  repeated int64 eggShowRange = 18;
  repeated int64 sizeAndAlpha = 19;
  repeated int64 verticalOffset = 20;
  optional int64 path = 21;
  optional string wordColor = 22;
  optional int64 showWebp = 23;
  optional int64 usePrivilegeRegion = 24;
  optional int64 canOpenContour = 25;
  optional int64 supportShowType = 26;
}
message ImEggItem {
  optional DataImage background = 1;
  optional int64 backgroundHight = 2;
  optional int64 backgroundWidth = 3;
  optional int64 useRate = 4;
  optional int64 isDynamicEgg = 5;
}
message ImChatItem {
  optional int64 headSize = 1;
  optional int64 contentSize = 2;
  optional string contentColor = 3;
  optional ImFlexImageStruct background = 4;
  optional int64 backgroundHight = 5;
  optional int64 backgroundWidth = 6;
  optional int64 useRate = 7;
}
message ImChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string content = 3;
  optional bool visibleToSender = 4;
  optional DataImage backgroundImage = 5;
  optional string fullScreenTextColor = 6;
  optional DataImage backgroundImageV2 = 7;
  optional ImPublicAreaCommon publicAreaCommon = 9;
  optional DataImage giftImage = 10;
  optional int64 agreeMsgId = 11;
  optional int32 priorityLevel = 12;
  optional ImLandscapeAreaCommon landscapeAreaCommon = 13;
  optional int64 eventTime = 15;
  optional bool sendReview = 16;
  optional bool fromIntercom = 17;
  optional bool intercomHideUserCard = 18;
  repeated int32 chatTags = 19;
  optional int64 chatBy = 20;
  optional DataText rtfContent = 40;
}
message ImEmojiChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 emojiId = 3;
  optional DataText emojiContent = 4;
  optional string defaultContent = 5;
  optional DataImage backgroundImage = 6;
  optional bool fromIntercom = 7;
  optional bool intercomHideUserCard = 8;
}
message ImFriendChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string content = 3;
}
message ImCNYReward {
  optional ImCommon common = 1;
  optional string awardContent = 2;
  optional string bannerContent = 3;
}
message ImCNYATaskMessage {
  optional ImCommon common = 1;
  optional int64 watchDuration = 2;
  optional int64 watchTotal = 3;
  optional int32 currentRound = 7;
  optional int32 pct = 8;
  repeated int64 roundTarget = 9;
  map<string, string> allDescMap = 10;
  map<string, DataImage> allImageMap = 11;
}
message ImCommentsMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string content = 3;
  optional string color = 4;
  optional DataImage backGround = 5;
  optional int64 actionType = 6;
  optional string actionContent = 7;
}
message ImCommerceMessage {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  optional string content = 3;
}
message ImCommerceSaleMessage {
  optional ImCommon common = 1;
  optional bool hasCommerceSale = 2;
}
message ImComplexContent {
  optional string type = 1;
  optional string text = 2;
  optional string fontColor = 3;
  optional int64 fontSize = 4;
  optional int64 weight = 5;
  optional DataImage img = 6;
}
message ImCommonGuideMessage {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  optional DataText mainContent = 3;
  repeated ImComplexContent secondaryContent = 4;
  optional DataImage icon = 5;
  optional DataText buttonContent = 6;
  optional string buttonActionSchema = 7;
  optional DataImage buttonIcon = 8;
  optional int64 duration = 9;
  optional bool isRoundedIcon = 10;
}
message ImCommonLuckyMoneyMessage {
  optional ImCommon common = 1;
  optional int64 diamondCount = 2;
  optional int64 luckymoneyId = 3;
  optional int64 sendTime = 4;
  optional int64 delayTime = 5;
  optional DataUser user = 6;
  optional int64 style = 7;
  optional ImCommonLuckyMoneyMessageLuckyIcon luckyIcon = 8;
  optional DataImage background = 9;
  optional bool isOfficial = 10;
}
message ImCommonLuckyMoneyMessageLuckyIcon {
  repeated string urlList = 1;
  optional string uri = 2;
}
message ImTaskPanelMessage {
  optional ImCommon common = 1;
  optional ImTaskPanel data = 2;
}
message ImTaskPanel {
  optional int32 taskId = 1;
  optional int32 taskType = 2;
  optional int32 watchTime = 3;
  optional string title = 4;
  optional string subTitle = 5;
  optional string tagIconUrl = 6;
  optional string tagText = 7;
  optional string tagTextColor = 8;
  optional string buttonName = 9;
  optional string schema = 10;
  optional int64 expireAt = 11;
  optional int32 status = 12;
  optional int32 expireAfter = 13;
  optional int32 rewardType = 14;
  optional string panelTitle = 15;
  optional string subTitleColor = 16;
}
message ImTaskRewardToastMessage {
  optional ImCommon common = 1;
  optional ImTaskRewardToast data = 2;
}
message ImTaskRewardToast {
  optional int32 taskId = 1;
  optional int32 taskType = 2;
  optional int32 rewardType = 3;
  optional string title = 4;
  optional string subTitle = 5;
  optional string iconUrl = 6;
  optional string bgPicUrl = 7;
}
message ImCommonPopupMessage {
  optional ImCommon common = 1;
  optional string schemaUrl = 2;
  optional bool anchorPopUp = 3;
}
message ImCommonTextMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string scene = 3;
}
message ImCommonToastMessage {
  optional ImCommon common = 1;
  optional bool discardable = 2;
  optional bool immediate = 3;
  optional int64 duration = 4;
  optional string textColor = 5;
  optional string backgroundColorStart = 6;
  optional string backgroundColorEnd = 7;
  optional int64 position = 8;
  optional DataImage topImg = 9;
  optional int64 topImgWidth = 10;
  optional int64 topImgHeight = 11;
  optional bool showMongoliaLayer = 12;
}
message ImControlMessage {
  optional ImCommon common = 1;
  optional int64 action = 2;
  optional string tips = 3;
  optional ImControlMessageExtra extra = 4;
}
message ImControlMessageExtra {
  optional string banInfoUrl = 1;
  optional int64 reasonNo = 2;
  optional DataText title = 3;
  optional DataText violationReason = 4;
  optional DataText content = 5;
  optional DataText gotItButton = 6;
  optional DataText banDetailButton = 7;
  optional string source = 8;
}
message ImDataLifeLiveMessage {
  optional ImCommon common = 1;
  optional int32 type = 2;
  optional string body = 3;
}
message ImDecorationModifyMessage {
  optional ImCommon common = 1;
  optional string extra = 2;
}
message ImDiggMessage {
  optional ImCommon common = 1;
  optional int64 diggCount = 2;
  optional int64 duration = 3;
  optional int64 color = 4;
  optional DataUser user = 5;
  optional string icon = 6;
}
message ImDLiveMessage {
  optional ImCommon common = 1;
  repeated string rooms = 2;
  optional int64 maxPushDelayTime = 3;
}
message ImOfficialRoomMessage {
  optional ImCommon common = 1;
  optional DataOfficialRoomInfo officialRoomInfo = 2;
}
message ImCeremonyMessage {
  optional ImCommon common = 1;
  repeated ImUserRoom items = 2;
  optional int64 maxPushDelayTime = 3;
}
message ImUserRoom {
  optional int64 type = 1;
  optional string room = 2;
  optional string user = 3;
}
message ImRcmdUser {
  optional string user = 1;
  optional string textBeforeAction = 2;
  optional string textAfterAction = 3;
  optional string authenticationInfo = 4;
  optional string editScript = 5;
}
message ImRecommendUsersMessage {
  optional ImCommon common = 1;
  optional string listTitle = 2;
  repeated ImRcmdUser users = 3;
  optional DataImage imgVertical = 4;
  optional DataImage imgHorizontal = 5;
  optional int64 displayTime = 6;
  optional int64 maxPushDelayTime = 7;
  optional bool checkAlive = 8;
}
message ImDolphinSettingUpdateMessage {
  optional ImCommon common = 1;
  optional int64 settingversion = 2;
}
message ImDonationMessage {
  optional ImCommon common = 1;
  optional int64 total = 2;
  optional string currency = 3;
  repeated DataUser sponsor = 4;
  repeated DataUser user = 5;
}
message ImDoodleGiftMessage {
  optional ImCommon common = 1;
  optional int64 giftId = 2;
  optional int64 fanTicketCount = 3;
  optional DataUser user = 4;
  optional DataUser toUser = 5;
  optional string compose = 6;
  optional int64 roomFanTicketCount = 7;
  optional DataGiftIMPriority priority = 8;
  optional string logId = 9;
  optional ImPublicAreaCommon publicAreaCommon = 10;
  optional DataText trayDisplayText = 11;
  optional DataGiftTrayInfo trayInfo = 12;
}
message ImLikeUserDetail {
  optional DataUser user = 1;
  optional int64 count = 2;
}
message ImDoubleLikeHeartMessage {
  optional ImCommon common = 1;
  optional ImDoubleLikeDetail doubleLikeDetail = 2;
  optional DataText selfDisplayText = 3;
  optional DataText normalDisplayText = 4;
  repeated ImLikeUserDetail likeUserList = 5;
}
message ImDoubleLikeTopUserMessage {
  optional ImCommon common = 1;
  repeated ImLikeUserDetail likeUserList = 2;
}
message ImDouplusIndicatorMessage {
  optional ImCommon common = 1;
  optional int64 number = 2;
  optional int64 status = 3;
  optional string toast = 4;
  optional string buyerNickname = 5;
}
message ImDouplusMessage {
  optional ImCommon common = 1;
  optional int64 promotion = 2;
}
message ImDriveGiftMessage {
  optional ImCommon common = 1;
  optional int64 newCount = 2;
  optional string popupUrl = 3;
}
message ImProjectDTaskInfo {
  optional ImCommon common = 1;
  optional int32 atype = 2;
  optional DataImage icon = 3;
  optional string count = 4;
  optional string fallbackContext = 5;
  optional string awardUrl = 6;
  optional int64 leftTaskCount = 7;
  optional int64 subTaskId = 8;
}
message ImDutyGiftMessage {
  optional ImCommon common = 1;
  optional int32 speedyGiftId = 5;
  optional int32 targetScore = 6;
  optional int32 stageCount = 7;
  optional int32 status = 8;
  optional int32 score = 9;
  optional DataUser contributeMost = 10;
  optional int32 contributeMostScore = 11;
  optional int64 dutyId = 12;
}
message ImEasterEggMessage {
  optional ImCommon common = 1;
  optional ImEasterEggMessageData data = 2;
}
message ImEasterEggMessageData {
  optional bool hasEasterEgg = 1;
  optional int64 stage = 2;
  optional int64 totalStage = 3;
  optional int64 effectsNum = 4;
  optional int64 startCount = 5;
  optional int64 endCount = 6;
  optional int64 count = 7;
}
message ImCornerReachMessage {
  optional ImCommon common = 1;
  optional int64 duration = 2;
  optional int64 elemType = 3;
}
message ImTempStateAreaReachMessage {
  optional ImCommon common = 1;
  optional int64 elemType = 2;
  optional int64 elemId = 3;
  optional int64 itemId = 4;
  optional int64 status = 5;
  optional ImTempStateAreaReachMessageResource resource = 6;
}
message ImTempStateAreaReachMessageResource {
  optional string name = 1;
  optional string icon = 2;
  optional string description = 3;
  optional string extra = 4;
}
message ImEpisodeChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string content = 3;
  optional bool visibleToSender = 4;
  optional DataImage backgroundImage = 5;
  optional ImPublicAreaCommon publicAreaCommon = 6;
  optional DataImage giftImage = 7;
  optional int64 agreeMsgId = 8;
  repeated string colorValue = 9;
}
message ImFansGroupGuideMessage {
  optional ImCommon common = 1;
  optional int32 type = 2;
  optional string title = 3;
  optional string content = 4;
  optional int64 autoRecordDurationMs = 5;
  optional DataText richText = 6;
  optional string schemeUrl = 7;
}
message ImFansclubStatisticsMessage {
  optional ImCommon common = 1;
  optional string name = 2;
  optional int64 fansCount = 3;
}
message ImFansclubMessage {
  optional ImCommon common = 1;
  optional int32 action = 2;
  optional string content = 3;
  optional DataUser user = 4;
  optional ImFansclubMessageUpgradePrivilege upgradePrivilege = 5;
}
message ImFansclubMessageUpgradePrivilege {
  optional string content = 1;
  optional string description = 2;
  optional int32 buttonType = 3;
}
message ImFansclubReviewMessage {
  optional ImCommon common = 1;
  optional int32 action = 2;
  optional string content = 3;
}
message ImFansclubGuideMessage {
  optional ImCommon common = 1;
  optional DataText title = 2;
  optional DataText subTitle = 3;
}
message ImFeedbackActionMessage {
  optional ImCommon common = 1;
  optional int64 actionId = 2;
}
message ImFeedbackCardMessage {
  optional ImCommon common = 1;
  optional int64 questionnaireId = 2;
  optional int64 scattermills = 3;
}
message ImFollowGuideMessage {
  optional ImCommon common = 1;
  optional DataImage avatarurl = 2;
  optional string content = 3;
  optional string hourrankinfo = 4;
  optional int64 giftid = 5;
  optional int64 duration = 6;
  optional string popupreason = 7;
}
message ImBrokerNotifyMessage {
  optional ImCommon common = 1;
  optional int64 msgType = 2;
  optional string content = 3;
  optional int64 timestamp = 4;
  optional int64 msgSubType = 5;
  optional int64 msgId = 6;
}
message ImFreeCellGiftMessage {
  optional ImCommon common = 1;
  optional int64 giftId = 2;
  optional int64 fanTicketCount = 3;
  optional int64 groupCount = 4;
  optional int64 repeatCount = 5;
  optional int64 comboCount = 6;
  optional DataUser user = 7;
  optional DataUser toUser = 8;
  optional ImFreeCellGiftMessageFreeCellData freeCell = 9;
  optional int64 roomFanTicketCount = 10;
  optional string logId = 11;
  optional ImPublicAreaCommon publicAreaCommon = 12;
}
message ImFreeCellGiftMessageFreeCellData {
  optional int64 timeNowMs = 1;
  optional int64 timeStartMs = 2;
  optional int64 timeFreezeEndMs = 3;
  optional int64 timeDoubleEndMs = 4;
  optional int64 timeEndMs = 5;
  optional int64 freeCellLength = 6;
  optional bool isFreeze = 7;
  optional bool isDouble = 8;
  optional DataUser contributeMostUser = 9;
  optional int64 contributeMostCoins = 10;
  optional int64 distanceFromPreviousOne = 11;
  optional int64 indexInDayRanklist = 12;
}
message ImFreeGiftMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional DataFreeGift freeGift = 3;
}
message ImGamblingStatusChangedMessage {
  optional ImCommon common = 1;
  optional int64 prevStatus = 2;
  optional ImGamblingStatusChangedMessageGameQuizInfo gameQuizInfo = 3;
}
message ImGamblingStatusChangedMessageGameQuizInfo {
  optional int64 id = 1;
  optional int64 roomId = 2;
  optional int64 status = 3;
}
message ImGameChannelMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional int64 messageType = 3;
  optional string extra = 4;
  optional DataUser user = 5;
}
message ImHostVersion {
  optional int64 hostId = 1;
  optional string minVersion = 2;
  optional string maxVersion = 3;
}
message ImGameAncAudEntranceMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional int64 gameKind = 3;
  optional string extra = 4;
  optional bool showAudienceFloatEntrance = 5;
  repeated ImHostVersion versionRange = 6;
  optional string appId = 7;
  optional string metaVersion = 8;
  optional string name = 9;
  optional string iconUrl = 10;
  optional int64 startId = 11;
}
message ImGameAncAudStatusMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional int64 sendType = 3;
  optional int64 gameStatus = 4;
  optional string extra = 5;
}
message ImGameAncAudPanelCtrlMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional int64 sendType = 3;
  optional int64 panelType = 4;
  optional string extra = 5;
}
message ImGameAncAudDataFromAncMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional int64 sendType = 3;
  optional string data = 4;
  optional string extra = 5;
}
message ImGameAncAudDataFromAudMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional string data = 3;
  optional string extra = 4;
}
message ImGameDevelopMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional int32 develop = 3;
  optional string appId = 4;
  optional string sign = 5;
}
message ImGameGiftMessage {
  optional ImCommon common = 1;
  optional int64 giftId = 2;
  optional int64 fanTicketCount = 3;
  optional DataUser user = 4;
  optional DataUser toUser = 5;
  optional string normalcontent = 6;
  optional ImGameGiftMessageMonkeyData monkeyData = 8;
  optional string logId = 9;
  optional ImPublicAreaCommon publicAreaCommon = 10;
}
message ImGameGiftMessageMonkeyData {
  optional int32 score = 1;
  optional bool breakRecord = 2;
  optional bool needPopup = 3;
  optional string popupContent = 4;
}
message ImGameGiftStatusMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional int32 status = 3;
  optional string extra = 4;
}
message ImGameStatusMessage {
  optional ImCommon common = 1;
  optional int64 gameid = 2;
  optional int32 status = 3;
  optional string configExtra = 4;
}
message ImGameInviteMessage {
  optional ImCommon common = 1;
  optional DataGameInvite inviteItem = 2;
  optional DataInvitationSwitch invitationSwitch = 3;
  optional string configExtra = 4;
}
message ImGameInviteReplyMessage {
  optional ImCommon common = 1;
  optional int32 reply = 2;
  optional string extra = 3;
}
message ImGamePVPMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional string extra = 3;
}
message ImGameStatusUpdateMessage {
  optional ImCommon common = 1;
  optional int64 anchorId = 2;
  optional int64 roomId = 3;
  optional int32 gameKind = 4;
  optional int64 gameId = 5;
  optional int64 roundId = 6;
  optional int32 eventTime = 7;
  optional int32 presentMsgType = 8;
  optional string configExtra = 9;
  optional int64 playKind = 10;
  optional int64 switchId = 11;
}
message ImGameCPBaseMessage {
  optional ImCommon common = 1;
  optional ImGameCPShowMessage showInfo = 2;
}
message ImGameCPShowMessage {
  optional int32 type = 1;
  optional DataText introduceDownloadInfo = 2;
  optional string gameImage = 3;
  optional string gameName = 4;
  optional string gameDownloadUrl = 5;
  optional string gameTraceInfo = 6;
  repeated string gameTagNames = 7;
  optional string gameBackgroundColor = 8;
  optional int32 introduceTimeLimit = 9;
  optional int64 introduceStartTime = 10;
  optional int32 introduceStopType = 11;
  optional DataText introduceStopMessage = 12;
  optional string gameId = 13;
  optional bool auditResult = 14;
  optional string iosAppId = 15;
  optional string companyName = 16;
  optional string downloadExtra = 17;
  optional string androidPrivacyUrl = 18;
  optional string androidAuthorizationUrl = 19;
  optional string iosPrivacyUrl = 20;
  optional string iosAuthorizationUrl = 21;
  optional string androidVersion = 22;
  optional string iosVersion = 23;
  optional string activeLink = 24;
  optional int64 downloadCount = 25;
  optional bool isShowAnimate = 26;
  optional int64 animateStartTime = 27;
  optional int64 animateDuration = 28;
  optional string antiHijackContent = 29;
  optional string antiHijackImage = 30;
  optional string iosSalePoint = 31;
  optional bool isForbidJumpIosApp = 32;
  optional bool hasPlatformGift = 33;
  optional string openGameUrl = 44;
  optional string propIcon = 45;
  optional string propName = 46;
  optional string propId = 47;
  optional int64 marketPrice = 48;
  optional int64 sellingPrice = 49;
  optional int64 propSkuId = 50;
  optional ImReserveItem reserveItem = 51;
  optional int64 propType = 52;
  optional int64 gameAccessType = 53;
  optional bool isPropExpGame = 54;
}
message ImReserveItem {
  optional string reserveTodayNum = 1;
  optional string reserveTotalNum = 2;
  optional int32 reserveStatus = 3;
}
message ImGameCPUserDownloadMessage {
  optional ImCommon common = 1;
  optional string userNickName = 2;
  optional int64 userDownloadCount = 3;
  optional string userDownloadContent = 4;
  optional string downloadGameName = 5;
  optional int32 type = 6;
}
message ImGameCPAnchorReminderMessage {
  optional ImCommon common = 1;
  optional int32 type = 2;
  optional string gameId = 3;
  optional string title = 4;
  optional string gameName = 5;
  optional string gameIconUrl = 6;
}
message ImGamePlayTeamStatusMessage {
  optional ImCommon common = 1;
  repeated DataPlayTeamMember memberList = 2;
  optional int32 totalNum = 3;
  optional int64 playId = 4;
  optional string toast = 5;
}
message ImGamePlayInviteMessage {
  optional ImCommon common = 1;
  optional string schema = 2;
  optional int64 playId = 3;
}
message ImGamePlayStatusMessage {
  optional ImCommon common = 1;
  optional int32 status = 2;
  optional int64 playId = 3;
  optional string auditDenyToast = 4;
  optional string toast = 5;
}
message ImLynxParam {
  optional int32 style = 1;
  optional string mainText = 2;
  optional string expireDayText = 3;
  optional string subText = 4;
}
message ImGiftConsumeRemindMessage {
  optional ImCommon common = 1;
  optional string lynxSchema = 2;
  optional ImLynxParam lynxParam = 3;
  optional int32 remindType = 4;
}
message ImGiftCycleReleaseMessage {
  optional ImCommon common = 1;
  optional int64 releaseId = 2;
  optional ImGiftCycleReleaseMessageGiftIcon giftIcon = 3;
  repeated int64 giftIds = 4;
}
message ImGiftCycleReleaseMessageGiftIcon {
  optional int64 giftId = 1;
  optional DataImage icon = 2;
}
message ImExhibitionTopLeftMessage {
  optional ImCommon common = 1;
  optional DataText displayText = 2;
  optional string topTitle = 3;
  optional DataImage giftIcon = 4;
  optional string exhibitionEntranceUrl = 5;
}
message ImExhibitionChatMessage {
  optional ImCommon common = 1;
  optional DataText displayText = 2;
}
message ImGiftMessage {
  optional ImCommon common = 1;
  optional int64 giftId = 2;
  optional int64 fanTicketCount = 3;
  optional int64 groupCount = 4;
  optional int64 repeatCount = 5;
  optional int64 comboCount = 6;
  optional DataUser user = 7;
  optional DataUser toUser = 8;
  optional int32 repeatEnd = 9;
  optional ImGiftMessageTextEffect textEffect = 10;
  optional int64 groupId = 11;
  optional int64 incomeTaskgifts = 12;
  optional int64 roomFanTicketCount = 13;
  optional DataGiftIMPriority priority = 14;
  optional DataGiftStruct gift = 15;
  optional string logId = 16;
  optional int64 sendType = 17;
  optional ImPublicAreaCommon publicAreaCommon = 18;
  optional DataText trayDisplayText = 19;
  optional int64 bannedDisplayEffects = 20;
  optional DataGiftTrayInfo trayInfo = 21;
  optional DataAssetEffectMixInfo assetEffectMixInfo = 24;
  optional bool displayForSelf = 25;
  optional string interactGiftInfo = 26;
  optional string diyItemInfo = 27;
  repeated int64 minAssetSet = 28;
  optional int64 totalCount = 29;
  optional int32 clientGiftSource = 30;
  optional DataAnchorGiftData anchorGift = 31;
}
message ImGiftMessageTextEffect {
  optional ImGiftMessageTextEffectDetail portrait = 1;
  optional ImGiftMessageTextEffectDetail landscape = 2;
}
message ImGiftMessageTextEffectDetail {
  optional DataText text = 1;
  optional int32 textFontSize = 2;
  optional DataImage background = 3;
  optional int32 start = 4;
  optional int32 duration = 5;
  optional int32 x = 6;
  optional int32 y = 7;
  optional int32 width = 8;
  optional int32 height = 9;
  optional int32 shadowDx = 10;
  optional int32 shadowDy = 11;
  optional int32 shadowRadius = 12;
  optional string shadowColor = 13;
  optional string strokeColor = 14;
  optional int32 strokeWidth = 15;
}
message ImBindingGiftMessage {
  optional ImGiftMessage msg = 1;
  optional ImCommon common = 2;
}
message ImGiftUpdateMessage {
  optional ImCommon common = 1;
  optional int32 updateType = 2;
  repeated int64 updateGiftIds = 3;
}
message ImGiftVoteMessage {
  optional ImCommon common = 1;
  optional int64 msgType = 2;
  optional int64 voteId = 3;
  repeated DataGiftVoteResult results = 4;
  optional int64 finishTime = 5;
  optional int64 currentTime = 6;
  optional int64 voteType = 7;
  optional string extra = 8;
}
message ImGiftVoteMessageResult {
  optional string text = 1;
  optional int64 count = 2;
  optional DataImage icon = 3;
  optional int64 giftId = 4;
}
message ImGradeBuffAnchorShareMessage {
  optional ImCommon common = 1;
  optional string schemeUrl = 2;
  optional DataText content = 3;
  optional int64 score = 4;
}
message ImGroupShowUserUpdateMessage {
  optional ImCommon common = 1;
  optional DataGroupShowInfo info = 2;
}
message ImGrowthTaskMessage {
  optional ImCommon common = 1;
  optional DataGrowthTask task = 2;
  optional int32 action = 3;
  optional ImGrowthTaskMessageCurrentContribution currentContribution = 4;
  repeated DataGrowthTaskContributorRank contributors = 5;
}
message ImGrowthTaskMessageCurrentContribution {
  optional DataUser user = 1;
  map<int64, int64> deltaInfoMap = 2;
}
message ImGuestBattleMessage {
  optional ImCommon common = 1;
  optional int64 msgType = 2;
  optional DataGuestBattleInfo battleInfo = 3;
  optional string finishToast = 4;
  optional ImGuestBattleUpdateContent updateContent = 100;
}
message ImGuestBattleUpdateContent {
  optional bool crownUpgrade = 1;
}
message ImGuideMessage {
  optional ImCommon common = 1;
  optional int64 guideType = 2;
  optional int64 giftId = 3;
  optional string description = 4;
  optional int64 duration = 5;
}
message DataUser {
  optional int64 id = 1;
  optional int64 shortId = 2;
  optional string nickname = 3;
  optional int32 gender = 4;
  optional string signature = 5;
  optional int32 level = 6;
  optional int64 birthday = 7;
  optional string telephone = 8;
  optional DataImage avatarThumb = 9;
  optional DataImage avatarMedium = 10;
  optional DataImage avatarLarge = 11;
  optional bool verified = 12;
  optional int32 experience = 13;
  optional string city = 14;
  optional int32 status = 15;
  optional int64 createTime = 16;
  optional int64 modifyTime = 17;
  optional int32 secret = 18;
  optional string shareQrcodeUri = 19;
  optional int32 incomeSharePercent = 20;
  repeated DataImage badgeImageList = 21;
  optional DataUserFollowInfo followInfo = 22;
  optional DataUserPayGrade payGrade = 23;
  optional DataUserFansClub fansClub = 24;
  optional DataUserBorder border = 25;
  optional string specialId = 26;
  optional DataImage avatarBorder = 27;
  optional DataImage medal = 28;
  repeated DataImage realTimeIcons = 29;
  repeated DataImage newRealTimeIcons = 30;
  optional int64 topVipNo = 31;
  optional DataUserUserAttr userAttr = 32;
  optional DataUserOwnRoom ownRoom = 33;
  optional int64 payScore = 34;
  optional int64 ticketCount = 35;
  optional DataUserAnchorInfo anchorInfo = 36;
  optional int32 linkMicStats = 37;
  optional string displayId = 38;
  optional bool withCommercePermission = 39;
  optional bool withFusionShopEntry = 40;
  optional int64 totalRechargeDiamondCount = 41;
  optional DataUserAnchorLevel webcastAnchorLevel = 42;
  optional string verifiedContent = 43;
  optional DataUserAuthorStats authorStats = 44;
  repeated DataUser topFans = 45;
  optional string secUid = 46;
  optional int32 userRole = 47;
  optional DataUserXiguaParams xiguaInfo = 48;
  optional DataUserActivityInfo activityReward = 49;
  optional DataUserNobleLevelInfo nobleInfo = 50;
  optional DataUserBrotherhoodInfo brotherhoodInfo = 51;
  optional DataImage personalCard = 52;
  optional DataUserAuthenticationInfo authenticationInfo = 53;
  optional int32 authorizationInfo = 54;
  optional int32 adversaryAuthorizationInfo = 55;
  optional DataUserPoiInfo poiInfo = 56;
  repeated DataImage mediaBadgeImageList = 57;
  optional int32 adversaryUserStatus = 58;
  optional DataUserVIPInfo userVipInfo = 59;
  repeated int64 commerceWebcastConfigIds = 60;
  repeated DataImage badgeImageListV2 = 61;
  optional DataIndustryCertification industryCertification = 62;
  optional string locationCity = 63;
  optional DataUserFansGroupInfo fansGroupInfo = 64;
  optional string remarkName = 65;
  optional int32 mysteryMan = 66;
  optional string webRid = 67;
  optional string desensitizedNickname = 68;
  optional DataUserJAccreditInfo jAccreditInfo = 69;
  optional DataUserSubscribe subscribe = 70;
  optional bool isAnonymous = 71;
  optional int32 consumeDiamondLevel = 72;
  optional string webcastUid = 73;
  optional bool allowBeLocated = 1001;
  optional bool allowFindByContacts = 1002;
  optional bool allowOthersDownloadVideo = 1003;
  optional bool allowOthersDownloadWhenSharingVideo = 1004;
  optional bool allowShareShowProfile = 1005;
  optional bool allowShowInGossip = 1006;
  optional bool allowShowMyAction = 1007;
  optional bool allowStrangeComment = 1008;
  optional bool allowUnfollowerComment = 1009;
  optional bool allowUseLinkmic = 1010;
  optional DataUserAnchorLevel anchorLevel = 1011;
  optional DataImage avatarJpg = 1012;
  optional string bgImgUrl = 1013;
  optional string birthdayDescription = 1014;
  optional bool birthdayValid = 1015;
  optional int32 blockStatus = 1016;
  optional int32 commentRestrict = 1017;
  optional string constellation = 1018;
  optional int32 disableIchat = 1019;
  optional int64 enableIchatImg = 1020;
  optional int32 exp = 1021;
  optional int64 fanTicketCount = 1022;
  optional bool foldStrangerChat = 1023;
  optional int64 followStatus = 1024;
  optional bool hotsoonVerified = 1025;
  optional string hotsoonVerifiedReason = 1026;
  optional int32 ichatRestrictType = 1027;
  optional string idStr = 1028;
  optional bool isFollower = 1029;
  optional bool isFollowing = 1030;
  optional bool needProfileGuide = 1031;
  optional int64 payScores = 1032;
  optional bool pushCommentStatus = 1033;
  optional bool pushDigg = 1034;
  optional bool pushFollow = 1035;
  optional bool pushFriendAction = 1036;
  optional bool pushIchat = 1037;
  optional bool pushStatus = 1038;
  optional bool pushVideoPost = 1039;
  optional bool pushVideoRecommend = 1040;
  optional DataUserUserStats stats = 1041;
  optional bool verifiedMobile = 1042;
  optional string verifiedReason = 1043;
  optional bool withCarManagementPermission = 1044;
  optional int32 ageRange = 1045;
  optional int64 watchDurationMonth = 1046;
}
message DataUserFollowInfo {
  optional int64 followingCount = 1;
  optional int64 followerCount = 2;
  optional int64 followStatus = 3;
  optional int64 pushStatus = 4;
  optional string remarkName = 5;
  optional string followerCountStr = 6;
  optional string followingCountStr = 7;
  optional bool invalidFollowStatus = 8;
}
message DataUserPayGrade {
  optional int64 totalDiamondCount = 1;
  optional DataImage diamondIcon = 2;
  optional string name = 3;
  optional DataImage icon = 4;
  optional string nextName = 5;
  optional int64 level = 6;
  optional DataImage nextIcon = 7;
  optional int64 nextDiamond = 8;
  optional int64 nowDiamond = 9;
  optional int64 thisGradeMinDiamond = 10;
  optional int64 thisGradeMaxDiamond = 11;
  optional int64 payDiamondBak = 12;
  optional string gradeDescribe = 13;
  repeated DataUserPayGradeGradeIcon gradeIconList = 14;
  optional int64 screenChatType = 15;
  optional DataImage imIcon = 16;
  optional DataImage imIconWithLevel = 17;
  optional DataImage liveIcon = 18;
  optional DataImage newImIconWithLevel = 19;
  optional DataImage newLiveIcon = 20;
  optional int64 upgradeNeedConsume = 21;
  optional string nextPrivileges = 22;
  optional DataImage background = 23;
  optional DataImage backgroundBack = 24;
  optional int64 score = 25;
  optional DataGradeBuffInfo buffInfo = 26;
  optional string gradeBanner = 1001;
  optional DataImage profileDialogBg = 1002;
  optional DataImage profileDialogBgBack = 1003;
}
message DataUserPayGradeGradeIcon {
  optional DataImage icon = 1;
  optional int64 iconDiamond = 2;
  optional int64 level = 3;
  optional string levelStr = 4;
}
message DataUserFansClub {
  optional DataUserFansClubFansClubData data = 1;
  map<int32, DataUserFansClubFansClubData> preferDataMap = 2;
}
message DataUserFansClubFansClubData {
  optional string clubName = 1;
  optional int32 level = 2;
  optional int32 userFansClubStatus = 3;
  optional DataUserFansClubFansClubDataUserBadge badge = 4;
  repeated int64 availableGiftIds = 5;
  optional int64 anchorId = 6;
  optional int32 badgeType = 7;
}
message DataUserFansClubFansClubDataUserBadge {
  map<int32, DataImage> iconsMap = 1;
  optional string title = 2;
}
message DataUserBorder {
  optional DataImage icon = 1;
  optional int64 level = 2;
  optional DataImage thumbIcon = 3;
  optional string dressId = 4;
}
message DataUserUserAttr {
  optional bool isMuted = 1;
  optional bool isAdmin = 2;
  optional bool isSuperAdmin = 3;
  repeated int32 adminPrivileges = 4;
}
message DataUserOwnRoom {
  repeated int64 roomIds = 1;
  repeated string roomIdsStr = 2;
  repeated int32 roomIdsDisplay = 3;
}
message DataUserAnchorInfo {
  optional int64 level = 1;
}
message DataUserAnchorLevel {
  optional int64 level = 1;
  optional int64 experience = 2;
  optional int64 lowestExperienceThisLevel = 3;
  optional int64 highestExperienceThisLevel = 4;
  optional int64 taskStartExperience = 5;
  optional int64 taskStartTime = 6;
  optional int64 taskDecreaseExperience = 7;
  optional int64 taskTargetExperience = 8;
  optional int64 taskEndTime = 9;
  optional DataImage profileDialogBg = 10;
  optional DataImage profileDialogBgBack = 11;
  optional DataImage stageLevel = 12;
  optional DataImage smallIcon = 13;
}
message DataUserAuthorStats {
  optional int64 videoTotalCount = 1;
  optional int64 videoTotalPlayCount = 2;
  optional int64 videoTotalShareCount = 3;
  optional int64 videoTotalSeriesCount = 4;
  optional int64 varietyShowPlayCount = 5;
  optional int64 videoTotalFavoriteCount = 6;
}
message DataUserXiguaParams {
  optional string userAuthInfo = 1;
  optional int64 ugcPublishMediaId = 2;
  optional int64 mediaId = 3;
  optional string authorDesc = 4;
  optional string description = 5;
  optional bool userVerified = 6;
  optional DataUserXiguaParamsUserExtendInfo userExtendInfo = 7;
  optional int64 xiguaUid = 8;
  optional string nickName = 9;
  optional DataImage avatarThumb = 10;
  optional DataImage avatarMedium = 11;
  optional DataImage avatarLarge = 12;
}
message DataUserXiguaParamsUserExtendInfo {
  optional string shareUrl = 1;
  optional string rSchemaUrl = 2;
  optional DataUserXiguaParamsUserExtendInfoRocketSchema rocketSchemaInfo = 3;
}
message DataUserXiguaParamsUserExtendInfoRocketSchema {
  optional string rSchema = 1;
  optional string rToken = 2;
  optional string downloadUrl = 3;
}
message DataUserActivityInfo {
  optional DataImage badge = 1;
  optional DataImage storytag = 2;
}
message DataUserNobleLevelInfo {
  optional DataImage nobleBackground = 1;
  optional int64 nobleLevel = 2;
  optional DataImage nobleIcon = 3;
  optional string nobleName = 4;
  optional int64 expireTime = 5;
  optional DataImage nobleBigIcon = 6;
  optional DataImage nobleIconWithBack = 7;
  optional DataImage nobleBoarder = 8;
  repeated string nobleBackgroundColor = 9;
}
message DataUserBrotherhoodInfo {
  optional string name = 1;
  optional int64 level = 2;
  optional DataImage background = 3;
  optional string fontColor = 4;
}
message DataUserAuthenticationInfo {
  optional string customVerify = 1;
  optional string enterpriseVerifyReason = 2;
  optional DataImage authenticationBadge = 3;
  repeated int32 levelList = 4;
  optional DataUserAuthenticationInfoAccountTypeInfo accountTypeInfo = 10;
}
message DataUserAuthenticationInfoAccountTypeInfo {
  map<int64, int64> accountTypeMapMap = 1;
}
message DataUserPoiInfo {
  optional bool isPoiEnabled = 1;
  optional int64 poiId = 2;
  optional string poiName = 3;
  optional string poiIdStr = 4;
  optional int64 followerCountPermission = 5;
  optional int64 whiteUserPermission = 6;
}
message DataUserFansGroupInfo {
  optional string listFansGroupUrl = 1;
}
message DataUserJAccreditInfo {
  optional int32 jaccreditbasic = 1;
  optional int32 jaccreditadvance = 2;
  optional int32 jaccreditcontent = 3;
  optional int32 jaccreditlive = 4;
}
message DataUserSubscribe {
  optional bool isMember = 1;
  optional int64 level = 2;
  optional int64 identityType = 3;
  optional int64 buyType = 4;
  optional int64 open = 5;
}
message DataUserUserStats {
  optional int64 id = 1;
  optional string idStr = 2;
  optional int64 followingCount = 3;
  optional int64 followerCount = 4;
  optional int64 recordCount = 5;
  optional int64 totalDuration = 6;
  optional int64 dailyFanTicketCount = 7;
  optional int64 dailyIncome = 8;
  optional int64 itemCount = 9;
  optional int64 favoriteItemCount = 10;
  optional int64 diamondCount = 11;
  optional int64 diamondConsumedCount = 12;
  optional int64 tuwenItemCount = 13;
}
message DataWebUser {
  optional string idStr = 1;
  optional string secUid = 2;
  optional string nickname = 3;
  optional DataWebImage avatarThumb = 4;
  optional DataWebUserFollowInfo followInfo = 5;
}
message DataWebUserFollowInfo {
  optional int64 followStatus = 1;
  optional string followStatusStr = 2;
}
message DataIndustryCertification {
  optional DataIndustryCertificationProfile profile = 1;
  optional DataIndustryCertificationRoom room = 2;
}
message DataIndustryCertificationProfile {
  optional DataImage icon = 1;
  optional string content = 2;
  optional string schema = 3;
  optional string contentColor = 4;
  optional string bgColor = 5;
  optional int64 certType = 6;
}
message DataIndustryCertificationRoom {
  optional DataIndustryCertificationRoomRoomOwner roomOwner = 1;
}
message DataIndustryCertificationRoomRoomOwner {
  optional DataImage title = 1;
  optional string subTitle = 2;
  optional string leftColor = 3;
  optional string rightColor = 4;
  optional int32 anchorIndustryType = 5;
  optional DataImage brandStoreTitle = 6;
  optional DataImage brandStoreBackground = 7;
  optional DataImage anchorRedsIcon = 8;
  optional DataImage anchorRedsSmallIcon = 9;
}
message DataLiveUser {
  optional int64 id = 1;
  optional string nickname = 2;
  optional DataImage avatarThumb = 3;
  optional DataImage avatarMedium = 4;
  optional DataImage avatarLarge = 5;
  optional DataUserFollowInfo followInfo = 6;
}
message DataVIPBadge {
  map<int64, int64> iconsMap = 1;
}
message DataUserVIPInfo {
  optional int64 vipLevel = 1;
  optional string vipLevelName = 2;
  optional int32 status = 3;
  optional int64 startTime = 4;
  optional int64 endTime = 5;
  optional int64 remainingDays = 6;
  optional int64 totalConsume = 7;
  optional int64 targetConsume = 8;
  optional DataVIPBadge badge = 9;
  map<int64, int64> privilegesMap = 10;
}
message DataVIPOpenInfo {
  optional int64 openPrice = 1;
  optional int64 renewPrice = 2;
}
message ImLevelUpMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int32 preLevel = 3;
  optional int32 currentLevel = 4;
}
message ImPicoDisplayInfo {
  optional int64 comboSumCount = 1;
  optional string emoji = 2;
  optional DataImage emojiIcon = 3;
  optional string emojiText = 4;
}
message ImDoubleLikeDetail {
  optional bool doubleFlag = 1;
  optional int32 seqId = 2;
  optional int32 renewalsNum = 3;
  optional int32 triggersNum = 4;
}
message ImDisplayControlInfo {
  optional bool showText = 1;
  optional bool showIcons = 2;
}
message ImLikeMessage {
  optional ImCommon common = 1;
  optional int64 count = 2;
  optional int64 total = 3;
  optional int64 color = 4;
  optional DataUser user = 5;
  optional string icon = 6;
  optional ImDoubleLikeDetail doubleLikeDetail = 7;
  optional ImDisplayControlInfo displayControlInfo = 8;
  optional int64 linkmicGuestUid = 9;
  optional string scene = 10;
  optional ImPicoDisplayInfo picoDisplayInfo = 11;
  optional ImPublicAreaCommon publicAreaCommon = 12;
}
message ImUserContribute {
  optional int64 userId = 1;
  optional int64 rank = 2;
  optional int64 score = 3;
  optional string nickname = 4;
  optional DataImage avatarThumb = 5;
}
message ImLinkerContributeMessage {
  optional ImCommon common = 1;
  optional int64 userId = 2;
  optional int64 totalScore = 3;
  repeated ImUserContribute userContributeList = 4;
  optional int64 microTimeStamp = 5;
  optional int64 scene = 6;
  optional string totalScoreRealStr = 7;
  optional string totalScoreStr = 8;
  optional DataLinkmicQuickInteract quickInteract = 9;
}
message ImLinkMessage {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  optional int64 linkerId = 3;
  optional int64 scene = 4;
  optional ImLinkerInviteContent inviteContent = 5;
  optional ImLinkerReplyContent replyContent = 6;
  optional ImLinkerCreateContent createContent = 7;
  optional ImLinkerCloseContent closeContent = 8;
  optional ImLinkerEnterContent enterContent = 9;
  optional ImLinkerLeaveContent leaveContent = 10;
  optional ImLinkerCancelContent cancelContent = 11;
  optional ImLinkerKickOutContent kickOutContent = 12;
  optional ImLinkerLinkedListChangeContent linkedListChangeContent = 13;
  optional ImLinkerUpdateUserContent updateUserContent = 14;
  optional ImLinkerWaitingListChangeContent waitingListChangeContent = 15;
  optional ImLinkerBanContent banContent = 16;
  optional ImLinkerItemContent itemContent = 17;
  optional ImLinkerViolationReminderContent violationReminderContent = 18;
  optional ImLinkerUpdateLinkTypeApplyContent updateLinkTypeApplyContent = 19;
  optional ImLinkerUpdateLinkTypeReplyContent updateLinkTypeReplyContent = 20;
  optional ImLinkerAvatarAuditContent avatarAuditContent = 21;
  optional ImLinkerApplyExpiredContent applyExpiredContent = 22;
  optional ImLinkerApplyStrongReminderContent applyStrongReminderContent = 23;
  optional ImLinkerAnchorStreamSwitchContent anchorStreamSwitchContent = 24;
  optional ImLinkerClickScreenContent clickScreenContent = 25;
  optional ImLinkerLockPositionContent lockPositionContent = 26;
  optional ImLinkerFollowStrongGuideContent followStrongGuideContent = 27;
  optional ImLinkerShareVideoImContent shareVideoImContent = 28;
  optional ImLinkerGuestInviteContent guestInviteContent = 29;
  optional ImLinkerGuestExitCastScreenContent exitCastScreenContent = 30;
  optional ImLinkerSwitchSceneContent switchSceneContent = 31;
  optional ImLinkPhaseEnterNextNotifyContent linkPhaseEnterNextContent = 32;
  optional ImLinkerChangePlayModeContent changePlayModeContent = 33;
  optional ImLinkerLowBalanceForPaidLinkmicContent lowBalanceForPaidLinkmicContent = 34;
  optional ImLinkerDegradeAlertContent degradeAlertContent = 35;
  optional ImLinkerEnlargeGuestInviteContent enlargeGuestInviteContent = 36;
  optional ImLinkerEnlargeGuestReplyContent enlargeGuestReplyContent = 37;
  optional ImLinkerEnlargeGuestApplyContent enlargeGuestApplyContent = 38;
  optional ImLinkPrepareApplyContent prepareApplyContent = 39;
  optional ImLinkerCrossRoomUpdateContent crossRoomUpdateContent = 40;
  optional ImLinkerChangeMultiPKTeamInfoContent changeMultiPkTeamInfoContent = 41;
  optional ImCrossRoomLinkInviteContent crossRoomLinkInviteContent = 42;
  optional ImCrossRoomLinkReplyContent crossRoomLinkReplyContent = 43;
  optional ImCrossRoomLinkCancelInviteContent crossRoomLinkCancelInviteContent = 44;
  optional ImLinkerResumeAudienceContent linkerResumeAudienceContent = 45;
  optional ImLinkerBattleConnectContent linkerBattleConnectContent = 46;
  optional ImLinkerResumeApplyContent linkerResumeApplyContent = 47;
  optional ImCrossRoomRTCInfoContent crossRoomRtcInfoContent = 48;
  optional ImAnchorUpdateLinkmicConfigContent anchorUpdateLinkmicConfigContent = 49;
  optional ImAnchorUpdateLayoutContent anchorUpdateLayoutContent = 50;
  optional ImLinkerSysKickOutContent sysKickOutContent = 101;
  optional int64 fallbackScene = 199;
  optional string extra = 200;
}
message ImLinkmicInfo {
  optional string accessKey = 1;
  optional int64 linkMicId = 2;
  optional bool joinable = 3;
  optional int32 confluenceType = 4;
  optional string rtcExtInfo = 5;
  optional string rtcAppId = 6;
  optional string rtcAppSign = 7;
  optional string linkmicIdStr = 8;
  optional int64 vendor = 9;
  optional string liveCoreExtInfo = 10;
  optional DataMultiRtcInfo multiRtcInfo = 11;
  optional DataMultiLiveCoreInfo multiLiveCoreInfo = 12;
}
message ImLinkerSetting {
  optional int64 maxMemberLimit = 1;
  optional int64 linkType = 2;
  optional int64 scene = 3;
  optional int64 ownerUserId = 4;
  optional int64 ownerRoomId = 5;
  optional int64 vendor = 6;
}
message ImLinkerInviteContent {
  optional int64 fromUserId = 1;
  optional int64 fromRoomId = 2;
  optional string toRtcExtInfo = 3;
  optional bool rtcJoinChannel = 4;
  optional int64 vendor = 5;
  optional string secFromUserId = 6;
  optional string toLinkmicIdStr = 7;
  optional bool rtcPushStream = 8;
  optional string signExtra = 9;
  optional int32 inviteSource = 10;
  optional ImLinkmicInfo fromUserLinkmicInfo = 11;
  optional DataMultiRtcInfo multiRtcInfo = 12;
  optional DataMultiLiveCoreInfo multiLiveCoreInfo = 13;
  optional int32 multiPkMode = 14;
  optional bool supportMultiPkTeamMode = 15;
  optional DataLinkmicInfo toUserLinkmicInfo = 16;
  optional DataMultiChannelInfo multiChannelInfo = 17;
  optional string inviteRejectTemporaryText = 18;
  optional string audienceLinkerDescription = 19;
  optional bool inviterWithAudience = 20;
  repeated DataListUser inviteeFollowedUsers = 21;
  repeated DataListUser inviterUsers = 22;
  optional int64 toUserId = 23;
  optional int64 toRoomId = 24;
  optional DataListUser appliedUser = 25;
}
message ImLinkPrepareApplyContent {
  optional int64 fromUserId = 1;
  optional int64 fromRoomId = 2;
  optional int64 vendor = 3;
  optional string secFromUserId = 4;
  optional int64 count = 5;
}
message ImLinkerReplyContent {
  optional int64 fromUserId = 1;
  optional int64 fromRoomId = 2;
  optional ImLinkmicInfo fromUserLinkmicInfo = 3;
  optional int64 toUserId = 4;
  optional ImLinkmicInfo toUserLinkmicInfo = 5;
  optional int64 linkType = 6;
  optional int64 replyStatus = 7;
  optional ImLinkerSetting linkerSetting = 8;
  optional bool bizJoinChannel = 9;
  optional int32 multiPkMode = 10;
  optional DataMultiChannelInfo multiChannelInfo = 11;
  optional string toast = 12;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 13;
  optional DataAnchorLinkmicChannelInfo backupLinkmicInfo = 14;
}
message ImLinkerCreateContent {
  optional int64 ownerId = 1;
  optional int64 ownerRoomId = 2;
  optional int64 linkType = 3;
}
message ImMatchEffect {
  optional bool showEffect = 1;
  optional DataImage effectResource = 2;
}
message ImCityEffect {
  optional DataImage effectResource = 1;
  optional string city = 2;
  repeated int64 showEffectUserIdList = 3;
}
message ImLinkerEnterContent {
  repeated DataListUser linkedUsers = 1;
  optional int64 userId = 2;
  optional int32 applyType = 3;
  repeated DataListUser preLinkUsers = 4;
  optional ImMatchEffect matchEffect = 5;
  optional ImCityEffect cityEffect = 6;
  optional uint64 version = 7;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 8;
  optional DataMsgBoardItemInfo msgBoardItem = 9;
}
message ImLinkerViolationReminderContent {
  optional string title = 1;
  optional string content = 2;
}
message ImLinkerCloseContent {
  optional int32 source = 1;
  optional DataBanUser banAnchorInfo = 2;
}
message ImLinkerLeaveContent {
  optional int64 userId = 1;
  repeated DataListUser linkedUsers = 2;
  optional DataListUser user = 3;
  repeated DataListUser preLinkUsers = 4;
  optional uint64 version = 5;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 6;
}
message ImLinkerCancelContent {
  optional int64 fromUserId = 1;
  optional int64 toUserId = 2;
  optional int64 cancelType = 3;
  optional int32 inviteSource = 4;
}
message ImLinkerKickOutContent {
  optional int64 fromUserId = 1;
  optional int32 controlType = 2;
  optional int64 paidCount = 3;
  optional int64 linkDuration = 4;
  optional int32 kickOutSource = 5;
}
message ImLinkerSysKickOutContent {
  optional int64 userId = 1;
  optional string linkmicIdStr = 2;
  optional string toastMsg = 3;
}
message ImLinkerWaitingListChangeContent {

}
message ImLinkerLinkedListChangeContent {
  repeated DataListUser linkedUsers = 1;
  repeated DataListUser preLinkUsers = 2;
  optional uint64 version = 3;
  optional int32 pushType = 4;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 5;
}
message ImLinkerBanContent {
  repeated DataBanUser banUsers = 1;
}
message ImLinkerUpdateUserContent {
  optional int64 fromUserId = 1;
  optional int64 toUserId = 2;
  map<string, string> updateInfoMap = 3;
  repeated DataListUser linkedUsers = 4;
  optional string extra = 5;
  optional uint64 version = 6;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 7;
  optional string ackMessage = 8;
}
message ImChannelNoticeContent {
  optional int64 channelId = 1;
  optional int32 action = 2;
  optional string extraInfo = 3;
}
message ImLinkerItemContent {
  optional int64 itemId = 1;
  optional int64 authorId = 2;
  optional string authorName = 3;
  optional DataImage avatarThumb = 4;
  optional DataImage avatarMedium = 5;
  optional DataImage avatarLarge = 6;
  optional string itemDescription = 7;
  optional string musicId = 8;
  optional string musicTitle = 9;
  optional string musicAuthor = 10;
  optional string musicUrl = 11;
  optional int64 commentCount = 12;
}
message ImLinkerUpdateLinkTypeApplyContent {
  optional int64 fromUserId = 1;
  optional int64 toUserId = 2;
  optional int32 linkType = 3;
  optional int32 source = 4;
  optional string ackMessage = 5;
}
message ImLinkerUpdateLinkTypeReplyContent {
  optional int64 fromUserId = 1;
  optional int64 toUserId = 2;
  optional int32 replyType = 3;
  optional string replyPrompts = 4;
}
message ImLinkerAvatarAuditContent {
  optional int32 auditRes = 1;
  optional string reason = 2;
  optional int64 reviewId = 3;
}
message ImLinkerApplyExpiredContent {
  optional int64 userId = 1;
}
message ImLinkerApplyStrongReminderContent {
  optional int32 source = 1;
  optional DataUser user = 2;
}
message ImLinkerAnchorStreamSwitchContent {
  optional bool useBackupStream = 1;
  optional int64 anchorUserId = 2;
  repeated DataListUser linkedUsers = 3;
  optional uint64 version = 4;
}
message ImLinkerClickScreenContent {
  optional int64 deviceWidth = 1;
  optional int64 deviceHeight = 2;
  optional int64 pointX = 3;
  optional int64 pointY = 4;
  optional int64 fromUserId = 5;
  optional DataImage avatarMedium = 6;
}
message ImLinkerFollowStrongGuideContent {
  optional DataUser fromUser = 1;
  optional int64 toUserId = 2;
  optional int32 fromUserType = 3;
}
message ImLinkerLockPositionContent {
  repeated DataLinkmicPositionItem lockedPositions = 1;
}
message ImLinkerShareVideoImContent {
  optional string imContent = 1;
}
message ImLinkerGuestInviteContent {
  optional DataText inviteContent = 1;
}
message ImLinkerGuestExitCastScreenContent {
  optional int64 userId = 1;
}
message ImLinkerSwitchSceneContent {
  optional DataSwitchSceneData switchSceneData = 1;
}
message ImLinkPhaseEnterNextNotifyContent {
  optional int64 roomId = 1;
  optional DataUser anchorUser = 2;
  optional DataUser linkUser = 3;
  optional DataLinkPhase nextPhase = 4;
  optional int32 currentPhaseId = 5;
  optional int32 currentLinktimeSeconds = 6;
  optional DataLinkPhaseConfig phaseConfig = 7;
}
message ImLinkerChangePlayModeContent {
  optional DataChangePlayModeData changePlayModeData = 1;
}
message ImLinkerLowBalanceForPaidLinkmicContent {
  optional string toast = 1;
}
message ImLinkerDegradeAlertContent {
  optional DataUser user = 1;
  optional string degradeContent = 2;
}
message ImLinkerEnlargeGuestInviteContent {
  optional int64 fromUserId = 1;
  optional int64 toUserId = 2;
  optional int32 inviteType = 3;
}
message ImLinkerEnlargeGuestReplyContent {
  optional int64 fromUserId = 1;
  optional int64 toUserId = 2;
  optional int32 replyType = 3;
  optional string replyPrompts = 4;
}
message ImLinkerEnlargeGuestApplyContent {
  optional int64 fromUserId = 1;
  optional string applyPrompts = 2;
}
message ImCrossRoomLinkInviteContent {
  optional DataUser inviter = 1;
  optional DataInviteRoomInfo roomInfo = 2;
  optional string inviteTips = 3;
}
message ImCrossRoomLinkReplyContent {
  optional int32 replyType = 1;
  optional int64 inviteeRoomId = 2;
  optional int32 crossType = 3;
  repeated DataCrossRoomLinkReplyGuestInfo guestInfos = 4;
  optional int64 inviteeAnchorId = 5;
  optional int64 followStatus = 6;
  optional int64 inviteSource = 7;
  optional int64 replyUserId = 8;
  optional string replyToast = 9;
  optional int32 replyOperate = 10;
}
message ImCrossRoomLinkCancelInviteContent {
  optional int64 cancellerRoomId = 1;
}
message ImLinkerCrossRoomUpdateContent {
  optional int64 fromRoomId = 1;
  optional int64 toRoomId = 2;
  map<string, string> updateInfoMap = 3;
  repeated DataListUser linkedUsers = 4;
  optional uint64 version = 5;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 6;
}
message ImLinkerChangeMultiPKTeamInfoContent {
  optional DataMultiPKModeInfo multiPkModeInfo = 1;
  optional string toast = 2;
}
message ImLinkerResumeAudienceContent {
  optional string rtcExtInfo = 1;
  optional string liveCoreExtInfo = 2;
  repeated DataListUser linkedUsers = 3;
  optional uint64 version = 4;
}
message ImLinkerBattleConnectContent {
  optional string liveCoreExtInfo = 1;
  optional string rtcExtInfo = 2;
  map<int64, DataRoomLinkerContent> linkerContentMapMap = 3;
  optional DataMultiChannelInfo multiChannelInfo = 4;
  optional uint64 version = 5;
  repeated DataListUser anchorUserList = 6;
}
message ImLinkerResumeApplyContent {
  optional ImLinkerResumeApplyContentApplyParam param = 1;
  optional int64 applyUser = 2;
  optional int64 roomId = 3;
}
message ImLinkerResumeApplyContentApplyParam {
  optional int32 applyType = 1;
}
message ImCrossRoomRTCInfoContent {
  optional DataMultiChannelInfo multiChannelInfo = 1;
}
message ImAnchorUpdateLinkmicConfigContent {
  optional bool forbidInviteByGeneral = 1;
  optional bool forbidApplyFromOther = 2;
}
message ImAnchorUpdateLayoutContent {
  optional int32 layoutType = 1;
  optional int64 updateUserId = 2;
  optional int32 anchorUiLayout = 3;
  optional int32 anchorLayoutRange = 4;
}
message ImCouponActivityInfoMessage {
  optional int64 activityType = 1;
  optional string beforeText = 2;
  optional string beforeButton = 3;
  optional string afterText = 4;
  optional string afterButton = 5;
}
message ImCouponMetaInfoMessage {
  optional string couponMetaId = 1;
  optional string startTime = 2;
  optional string expireTime = 3;
  optional int64 periodType = 4;
  optional int64 validPeriod = 5;
  optional string startApplyTime = 6;
  optional string endApplyTime = 7;
  optional string couponName = 8;
  optional string url = 9;
  optional int64 threshold = 10;
  optional int64 credit = 11;
  optional int64 maxApplyTimes = 12;
  optional int64 type = 13;
  optional string typeDetail = 14;
  optional double discount = 15;
  optional string shopId = 16;
  optional int64 payType = 17;
  optional int64 maxDiscountLimit = 18;
  optional string shopName = 19;
  optional string typeString = 20;
  optional string whatCoupon = 21;
  optional string couponString = 22;
  optional int64 channelId = 23;
  optional int64 leftAmount = 24;
  optional int64 hasApplied = 25;
  optional int64 status = 26;
  optional string shopLogo = 27;
  optional int64 isShow = 28;
  optional int64 totalAmount = 29;
  optional int32 liveCouponStatus = 30;
  optional int32 couponSource = 31;
  optional int64 userApplyTimes = 32;
  optional bool canContinueApply = 33;
  optional bool couponStatus = 34;
  optional bool couponReset = 35;
  optional int64 startTimeTimestamp = 36;
  optional int64 expireTimeTimestamp = 37;
  optional string avatar = 38;
  optional int64 kolUid = 39;
  repeated int64 productIds = 40;
  optional int64 platformSubType = 41;
  optional bool hasAvailableGoods = 42;
  optional string typeTitle = 43;
  optional int64 kolUserTag = 45;
  optional string typeIcon = 46;
  optional int64 typeIconWidth = 47;
  optional int64 typeIconHeight = 48;
  optional string couponCategory = 49;
}
message ImLiveEcomMessage {
  optional ImCommon common = 1;
  optional int32 msgType = 2;
  optional string nickName = 3;
  optional int64 purchaseCnt = 4;
  optional string text = 5;
  optional string icon = 6;
  optional int64 metaId = 7;
  optional int64 serverTime = 8;
  optional int64 countdown = 9;
  optional string activityJsonStr = 10;
  optional int32 couponType = 11;
  optional ImCouponActivityInfoMessage activityInfo = 12;
  optional ImCouponMetaInfoMessage couponMeta = 13;
  optional string metaIdStr = 14;
}
message ImUpdatedProductInfo {
  optional int64 price = 1;
  optional string title = 2;
  optional string cover = 3;
  optional int64 status = 4;
  optional string popUpicon = 5;
}
message ImUpdatedCouponInfo {
  optional string tag = 1;
  optional string couponUrl = 2;
  optional string couponApplet = 3;
  optional bool isValid = 4;
  optional string couponMetaId = 5;
}
message ImUpdatedCampaignInfo {
  optional bool isValid = 1;
  optional string label = 2;
  optional string price = 3;
  optional string pic = 4;
  optional string startTime = 5;
  optional string endTime = 6;
  optional string timeStartLabel = 7;
  optional string timeEndLabel = 8;
  optional string userLimit = 9;
  optional string isPreheat = 10;
  optional string campaignId = 11;
}
message ImSkuInfo {
  optional string skuId = 1;
  optional int64 stockNum = 2;
  optional int64 price = 3;
  optional int64 couponPrice = 4;
}
message ImTraceTimeMetric {
  optional int64 opTimestamp = 1;
  optional int64 producerDuration = 2;
  optional int64 consumerDuration = 3;
  optional int64 msgSendTimestamp = 4;
}
message ImUpdatedSkuInfo {
  map<string, ImSkuInfo> skusMap = 1;
  optional int64 minPrice = 2;
  optional int64 maxPrice = 3;
  optional int64 unuseMinPrice = 4;
  optional int64 couponPrice = 5;
}
message ImUpdatedCommentaryVideoInfo {
  optional int64 action = 1;
}
message ImUpdatedGroupInfo {
  repeated string avatarList = 1;
  optional int64 joined = 2;
  optional int64 groupSize = 3;
  optional int64 persent = 4;
}
message ImUserBid {
  optional string pic = 1;
  optional string name = 2;
  optional int64 price = 3;
}
message ImImg {
  repeated string urlList = 1;
  optional int32 height = 2;
  optional int32 width = 3;
}
message ImCurrentUserInfo {
  optional ImImg userPic = 1;
  optional string userName = 2;
  optional int64 userId = 3;
}
message ImIncrPriceList {
  optional int64 price = 1;
  optional int64 range = 2;
}
message ImAuctionInfo {
  optional int64 price = 1;
  optional string priceLabel = 2;
  optional int32 status = 3;
  optional string jumpUrl = 4;
  optional ImCurrentUserInfo currentUserInfo = 5;
  repeated ImIncrPriceList incrPriceLists = 6;
  optional string buttonLabel = 7;
  optional int64 productId = 8;
  optional int64 endTime = 9;
  optional int32 bizId = 10;
}
message ImAuctionSuccess {
  optional string title = 1;
  optional int64 productId = 2;
  optional string productName = 3;
  optional string productPic = 4;
  optional int64 price = 5;
  optional int64 charge = 6;
  optional int64 freight = 7;
  optional int64 total = 8;
  optional string buttonLabel = 9;
  optional string jumpUrl = 10;
  optional string freightCollect = 11;
  optional int64 leftPaymentTime = 12;
  optional int32 bizId = 13;
  optional string depositInfo = 14;
}
message ImRedpackActivityInfo {
  optional int64 redpackType = 1;
  optional string redpackActivityId = 2;
  optional string redpackActivityName = 3;
  optional int64 startApplyTime = 4;
  optional int64 endApplyTime = 5;
  optional int64 preheatTime = 6;
  optional int64 totalAmount = 7;
  optional string authorAvatarUrl = 8;
  optional string authorName = 9;
  optional string pendantBackgroundUrl = 10;
  optional string redpackFrontBackgroundUrl = 11;
  optional string redpackLabel = 12;
  optional string redpackAfterBackgroundUrl = 13;
  optional string redpackAfterBeltUrl = 14;
  optional int64 scatterTime = 15;
  optional int64 serverTime = 16;
  optional int64 maxAmount = 17;
  optional int64 showType = 18;
  optional string shorttouchPendantBackgroundUrl = 19;
  optional string shorttouchPendantIconUrl = 20;
  optional string shorttouchLottieUrl = 21;
}
message ImUpdatedCartInfo {
  optional DataCartVertical vertical = 1;
  optional DataCartHorizontal horizontal = 2;
  optional DataGlobalCustomIcons globalCustomIcons = 3;
}
message ImLotteryProductShortInfo {
  optional int64 productId = 1;
  optional string img = 2;
}
message ImLotteryInfo {
  optional int64 lotteryType = 1;
  optional string enterIcon = 2;
  optional string icon = 3;
  optional string activityId = 4;
  optional int64 openTime = 5;
  optional ImLotteryProductShortInfo productInfo = 6;
}
message ImLotteryUnusualInfo {
  optional string productName = 1;
  optional int64 openTime = 2;
}
message ImWinLotteryAlert {
  optional string title = 1;
  optional string content = 2;
  optional string buttonLabel = 3;
}
message ImWinLotteryInfo {
  optional string title = 1;
  optional string name = 2;
  optional string img = 3;
  optional string buttonLabel = 4;
  optional string winRecordId = 5;
  optional string activityId = 6;
  optional bool isAddressed = 7;
  optional ImWinLotteryAlert alert = 8;
  optional bool isWin = 9;
  optional string jumpUrl = 10;
  optional int64 productId = 11;
  repeated int64 activityPrice = 12;
  optional int64 buyTime = 13;
  optional int64 lotteryType = 14;
  optional string productIdStr = 15;
}
message ImBenefitLabel {
  optional string lefttext = 1;
  optional string righttext = 2;
  optional int32 textstyle = 3;
  optional int32 colorstyle = 4;
  optional int32 divline = 5;
}
message ImLotteryInfoList {
  optional string activityId = 1;
  optional int64 taskType = 2;
  optional int64 openTime = 3;
  optional int64 userActivityStatus = 4;
  optional string winRecordId = 5;
  optional string resultLabel = 6;
  optional string buttonLabel = 7;
  repeated string text = 8;
  optional string jumpUrl = 9;
  optional int64 lotteryType = 10;
  optional string elasticTitle = 11;
  optional ImBenefitLabel benefitLabel = 12;
}
message ImHotAtmosphere {
  optional string img = 1;
  optional string saleNum = 2;
  optional int64 type = 3;
  optional string num = 4;
  optional string bgColor = 5;
  optional string borderColor = 6;
  optional int64 leftMargin = 7;
  optional int64 uiType = 8;
  repeated string bgColors = 9;
  repeated string borderColors = 10;
  optional string topImg = 11;
}
message ImUpIcon {
  optional string name = 1;
  optional string upIcon = 2;
  optional string upDesc = 3;
  optional string publicScreenNotice = 4;
}
message ImFilterSwitchChangeData {
  optional bool enable = 1;
  optional ImUpIcon upIcon = 2;
}
message ImRoomTagOfflineInfo {
  optional int64 tagType = 1;
  optional string userToast = 2;
}
message ImInteractionData {
  optional bool full = 1;
  repeated ImInteractionContent contents = 2;
}
message ImInteractionContent {
  optional ImInteractionContentCheck check = 1;
  optional int32 priority = 2;
  optional int32 loopCount = 3;
  repeated ImInteractionElement content = 4;
  map<string, string> eventParamMap = 5;
}
message ImInteractionContentCheck {
  optional int64 productId = 1;
  optional int32 index = 2;
}
message ImInteractionElement {
  optional int32 elementType = 1;
  optional string text = 2;
  optional string textColor = 3;
  optional ImInteractionAvatar avatars = 4;
  optional int32 blankWidth = 5;
}
message ImInteractionAvatar {
  repeated string urlList = 1;
  optional int32 width = 2;
  optional int32 height = 3;
}
message ImLiveShoppingMessage {
  optional ImCommon common = 1;
  optional int32 msgType = 2;
  optional int64 promotionId = 3;
  repeated int64 targetUid = 4;
  optional int32 bubbleType = 5;
  optional int64 screenshotTimestamp = 6;
  repeated string secTargetUid = 7;
  optional string ecomNotice = 8;
  repeated int64 updatedProductIds = 9;
  optional int32 updateType = 10;
  optional ImUpdatedProductInfo updatedProductInfo = 11;
  optional bool soldOut = 12;
  optional ImUpdatedCouponInfo updatedCouponInfo = 13;
  optional ImUpdatedCampaignInfo updatedCampaignInfo = 14;
  optional int64 updateTimestamp = 15;
  optional string buttonLabel = 16;
  optional int64 promotionsNum = 17;
  optional ImUpdatedSkuInfo updateSkuInfo = 18;
  optional ImUpdatedCommentaryVideoInfo updatedCommentaryVideoInfo = 19;
  optional ImUpdatedGroupInfo updatedGroupInfo = 20;
  optional string commerceAuthorityChangeToast = 21;
  optional ImTraceTimeMetric traceTimeMetric = 22;
  optional ImAuctionSuccess auctionSuccess = 23;
  optional ImAuctionInfo auctionInfo = 24;
  optional ImRedpackActivityInfo redpackActivityInfo = 25;
  optional ImUpdatedCartInfo updatedCartInfo = 26;
  optional ImLotteryInfo lotteryInfo = 27;
  optional ImWinLotteryInfo winLotteryinfo = 28;
  optional ImLotteryInfoList lotteryInfoList = 29;
  optional ImHotAtmosphere hotAtmosphere = 30;
  optional string updateToast = 31;
  optional bool canSold = 32;
  optional int64 logicalClock = 33;
  optional ImRoomTagOfflineInfo roomTagOfflineInfo = 34;
  optional ImFilterSwitchChangeData filterSwitchChangeData = 35;
  optional ImInteractionData interactionData = 36;
}
message ImProductChangeMessage {
  optional ImCommon common = 1;
  optional int64 updateTimestamp = 2;
  optional string updateToast = 3;
  repeated ImProductInfo updateProductInfo = 4;
  optional int64 total = 5;
  repeated int64 targetUid = 6;
  repeated string secTargetUid = 7;
  repeated ImCategoryInfo updateCategoryInfo = 8;
}
message ImProductInfo {
  optional int64 promotionId = 1;
  optional int32 index = 2;
  repeated int64 targetFlashUids = 3;
  optional int64 explainType = 4;
}
message ImCategoryInfo {
  optional int32 id = 1;
  optional string name = 2;
  repeated string promotionIds = 3;
  optional string type = 4;
  optional string uniqueIndex = 5;
}
message ImLiveStreamControlMessage {
  optional ImCommon common = 1;
  optional string controlParams = 2;
}
message ImMediaRoomNoticeMessage {
  optional ImCommon common = 1;
  optional string intro = 2;
  optional int64 duration = 3;
  optional bool reviewPass = 4;
  optional string reviewFailText = 5;
}
message ImMediaLiveReplayVidMessage {
  optional ImCommon common = 1;
  optional string vid = 2;
}
message ImMemberMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 memberCount = 3;
  optional DataUser operator = 4;
  optional bool isSetToAdmin = 5;
  optional bool isTopUser = 6;
  optional int64 rankScore = 7;
  optional int64 topUserNo = 8;
  optional int64 enterType = 9;
  optional int64 action = 10;
  optional string actionDescription = 11;
  optional int64 userId = 12;
  optional ImMemberMessageEffectConfig effectConfig = 13;
  optional string popStr = 14;
  optional ImMemberMessageEffectConfig enterEffectConfig = 15;
  optional DataImage backgroundImage = 16;
  optional DataImage backgroundImageV2 = 17;
  optional DataText anchorDisplayText = 18;
  optional ImPublicAreaCommon publicAreaCommon = 19;
  optional int64 userEnterTipType = 20;
  optional int64 anchorEnterTipType = 21;
}
message ImMemberMessageEffectConfig {
  optional int64 type = 1;
  optional DataImage icon = 2;
  optional int64 avatarPos = 3;
  optional DataText text = 4;
  optional DataImage textIcon = 5;
  optional int32 stayTime = 6;
  optional int64 animAssetId = 7;
  optional DataImage badge = 8;
  repeated int64 flexSettingArray = 9;
  optional DataImage textIconOverlay = 10;
  optional DataImage animatedBadge = 11;
  optional bool hasSweepLight = 12;
  repeated int64 textFlexSettingArray = 13;
  optional int64 centerAnimAssetId = 14;
  optional DataImage dynamicImage = 15;
  map<string, string> extraMap = 16;
  optional int64 mp4AnimAssetId = 17;
}
message ImMotorCustomMessage {
  optional ImCommon common = 1;
  optional string type = 2;
  optional string title = 3;
  optional string image = 4;
  optional string extra = 5;
  repeated ImMotorCustomMessageData data = 6;
}
message ImMotorCustomMessageData {
  optional string image = 1;
  optional string url = 2;
  optional string content = 3;
  optional string extra = 4;
}
message DataPortal {
  optional int64 startTime = 1;
  optional int64 enterCount = 2;
  optional DataUser sugarDaddy = 3;
  optional int64 roomId = 4;
  optional DataUser anchor = 5;
  optional int64 portalId = 6;
  optional int32 userType = 7;
  optional int64 inviteeCount = 8;
  optional int32 status = 9;
  optional int64 waitDuration = 10;
  optional int64 rewardDuration = 11;
  optional int64 totalAmount = 12;
  optional DataImage cover = 13;
  optional int64 roomLuckyMoneyAmount = 14;
  repeated DataUser audiences = 15;
  optional int64 distributeStrategy = 16;
}
message DataPropSummary {
  optional int64 primaryEffectId = 1;
  optional int64 nextExpire = 2;
  optional string description = 3;
  optional int64 propDefId = 4;
  optional string manual = 5;
  optional int64 diamond = 6;
  optional bool reddotTip = 7;
  optional DataImage icon = 8;
  optional int32 count = 9;
  optional string name = 10;
  optional DataGiftStruct gift = 11;
  optional DataImage labelIcon = 12;
  optional bool isFragment = 13;
  optional int64 fragmentsCompoundCount = 14;
  optional int64 isAwemeFreeGift = 15;
  optional DataImage diamondIcon = 16;
  optional DataBanner banner = 17;
  optional int64 propDefType = 18;
  repeated DataHotfixGiftDataForProp gifts = 19;
  optional string schemeUrl = 20;
  optional bool isDisplayedOnPanel = 21;
}
message DataHotfixGiftDataForProp {
  optional DataText displayText = 1;
  optional string describe = 2;
  optional int64 giftId = 3;
  optional int64 groupCount = 4;
  optional int64 repeatCount = 5;
  optional int64 comboCount = 6;
  optional int64 msgId = 7;
}
message DataDriveBagItem {
  optional DataDriveItem item = 1;
  optional int64 nextExpire = 2;
  optional bool equipped = 3;
}
message DataDriveItem {
  optional int32 level = 1;
  optional int32 type = 2;
  optional int64 count = 3;
}
message DataPropBill {
  optional int64 type = 1;
  optional string definitionName = 2;
  optional DataImage definitionIcon = 3;
  optional int64 definitionType = 4;
  optional string billNo = 5;
  optional int64 count = 6;
  optional int64 billCount = 7;
  optional int64 billTime = 8;
  optional string toUserNickname = 9;
  optional DataImage toUserAvatar = 10;
  optional int64 toUid = 11;
}
message DataPropDetail {
  optional int64 count = 1;
  optional int64 billTime = 2;
  optional string toUserNickname = 3;
  optional DataImage toUserAvatar = 4;
  optional int64 toUid = 5;
}
message DataFixedInt {
  optional int64 value = 1;
  optional int64 scale = 2;
}
message DataQuizTemplate {
  optional string id = 1;
  optional string title = 2;
  repeated string options = 3;
  optional int64 duration = 4;
  optional int64 divisionId = 5;
}
message DataQuizBoxInfo {
  optional int64 boxId = 1;
  optional int64 status = 2;
  optional int64 countdownTime = 3;
  optional int64 score = 4;
  optional int64 totalTime = 5;
}
message DataBetOption {
  optional int64 id = 1;
  optional string optionName = 2;
  optional int64 money = 3;
  optional int64 rate = 4;
  optional bool win = 5;
  optional bool canBet = 6;
  optional int64 canBetMoney = 7;
}
message DataAnchorHistoryItem {
  optional string quizId = 1;
  optional string quizTitle = 2;
  optional string options = 3;
  optional int32 quizStatus = 4;
  optional int64 countdownTime = 5;
  optional int64 winOption = 6;
  optional string templateId = 7;
  optional string failReason = 8;
  optional int64 createTime = 9;
  optional int64 settleAgain = 10;
  optional int64 absoluteEndTime = 11;
}
message DataQuiz {
  optional string quizId = 1;
  optional string title = 2;
  optional string options = 3;
  optional int32 quizStatus = 4;
  optional int64 countdownTime = 5;
  optional int64 winOption = 6;
  optional int64 betOption = 7;
  optional string gain = 8;
  optional string templateId = 9;
  optional int64 absoluteEndTime = 10;
}
message DataRank {
  optional DataUser user = 1;
  optional int64 score = 2;
  optional int64 rank = 3;
  optional string gapDescription = 4;
  optional int64 delta = 5;
}
message DataRankEnterInfo {
  repeated DataRankEnterInfoRankInfo rankInfos = 1;
  optional bool hiddenEnter = 2;
  optional DataImage icon = 3;
  repeated DataRankEnterInfoPage defaultPage = 4;
  optional int64 periodRemainingSecond = 5;
  repeated DataRankEnterInfoRankInfo rankInfosWithoutShop = 6;
  optional bool displayKtvRank = 7;
  repeated DataRankEnterInfoRankInfo defaultRankInfos = 8;
  repeated DataRankEnterInfoRankInfo customizedDefaultRankInfos = 9;
}
message DataRankEnterInfoPage {
  optional int32 jumpRankType = 1;
  optional string content = 2;
  optional int32 contentType = 3;
  optional string backgroundColor = 4;
}
message DataRankEnterInfoRankInfo {
  repeated DataRankEnterInfoPage pages = 1;
  optional DataImage icon = 2;
  optional int32 position = 3;
  optional int32 rankType = 4;
  optional string title = 5;
  optional string rankExtra = 6;
  optional string entranceExtra = 7;
}
message DataRanklistHourEntrance {
  repeated DataRanklistHourEntranceInfo globalInfos = 1;
  repeated DataRanklistHourEntranceInfo defaultGlobalInfos = 2;
  repeated DataRanklistHourEntranceInfo verticalInfos = 3;
  repeated DataRanklistHourEntranceInfo defaultVerticalInfos = 4;
}
message DataRanklistHourEntrancePage {
  optional string content = 1;
  optional string backgroundColor = 2;
  optional int64 showTimes = 3;
}
message DataRanklistHourEntranceDetail {
  repeated DataRanklistHourEntrancePage pages = 1;
  optional int32 ranklistType = 2;
  optional string title = 3;
  optional string ranklistExtra = 4;
  optional string entranceExtra = 5;
  optional string schema = 6;
}
message DataRanklistHourEntranceInfo {
  repeated DataRanklistHourEntranceDetail details = 1;
}
message DataTab {
  optional string name = 1;
  optional int64 rankType = 2;
  optional DataImage atmosphereImage = 3;
  optional DataTabTopText topText = 4;
  repeated DataTabSubTab subTabs = 5;
  repeated DataTab tabs = 6;
}
message DataTabSubTab {
  optional string name = 1;
  optional int64 rankType = 2;
}
message DataTabTopText {
  optional string finishText = 1;
  optional string rewardText = 2;
  optional string strategyText = 3;
  optional string rulesText = 4;
}
message DataGameExtra {
  optional int32 kind = 1;
  optional int32 status = 2;
  optional int64 gameId = 3;
  optional int32 giftLimit = 4;
  optional int64 roundId = 5;
  optional int32 gameKind = 6;
  optional int64 chat = 7;
  optional int64 loader = 8;
  optional int64 reload = 9;
  map<string, string> dataMap = 10;
}
message DataWebRoom {
  optional string idStr = 1;
  optional int64 status = 2;
  optional string statusStr = 3;
  optional string title = 4;
  optional string userCountStr = 5;
  optional DataWebImage cover = 6;
  optional DataWebStreamUrl streamUrl = 7;
  optional int64 mosaicStatus = 8;
  optional string mosaicStatusStr = 9;
  repeated int64 adminUserIds = 10;
  repeated string adminUserIdsStr = 11;
  optional DataWebUser owner = 12;
  optional DataWebRoomAuthStatus roomAuth = 13;
  optional int64 liveRoomMode = 14;
  optional DataWebRoomStats stats = 15;
  optional bool hasCommerceGoods = 16;
  map<string, string> linkerMapMap = 17;
  optional DataLinkerDetail linkerDetail = 18;
  optional DataEpisodeExtraInfo episodeExtra = 19;
  optional DataRoomViewStats roomViewStats = 20;
}
message DataWebRoomStats {
  optional string totalUserDesp = 13;
  optional int64 likeCount = 14;
  optional string totalUserStr = 15;
  optional string userCountStr = 16;
}
message DataMatchRoomInfo {
  optional DataMatchTabFrame matchTabFrame = 1;
  optional DataMatchTitle matchTitle = 2;
  optional DataToutiaoMatchData matchData = 3;
  map<int64, int64> matchHostChannelMap = 4;
  optional string matchHashTag = 5;
  repeated DataImage backgroundImageUrlList = 6;
  optional DataImage shareIcon = 7;
  optional DataMatchRoomImInfo imInfo = 8;
  optional DataMatchShareBackground matchShareBackground = 9;
  optional string themeId = 10;
}
message DataMatchRoomImInfo {
  optional DataImage icon = 1;
  optional string title = 2;
}
message DataMatchTabFrame {
  repeated DataMatchTab tabs = 1;
  repeated DataMatchTab replayTabs = 2;
  optional string color = 3;
}
message DataRoom {
  optional int64 id = 1;
  optional string idStr = 2;
  optional int64 status = 3;
  optional int64 ownerUserId = 4;
  optional string title = 5;
  optional int64 userCount = 6;
  optional int64 createTime = 7;
  optional int64 linkmicLayout = 8;
  optional int64 finishTime = 9;
  optional DataRoomExtra extra = 10;
  optional string dynamicCoverUri = 11;
  map<int64, int64> dynamicCoverDictMap = 12;
  optional int64 lastPingTime = 13;
  optional int64 liveId = 14;
  optional int64 streamProvider = 15;
  optional int64 osType = 16;
  optional int64 clientVersion = 17;
  optional bool withLinkmic = 18;
  optional bool enableRoomPerspective = 19;
  optional DataImage cover = 20;
  optional DataImage dynamicCover = 21;
  optional DataImage dynamicCoverLow = 22;
  optional string shareUrl = 23;
  optional string anchorShareText = 24;
  optional string userShareText = 25;
  optional int64 streamId = 26;
  optional string streamIdStr = 27;
  optional DataStreamUrl streamUrl = 28;
  optional int64 mosaicStatus = 29;
  optional string mosaicTip = 30;
  optional int64 cellStyle = 31;
  optional DataLinkMic linkMic = 32;
  optional int64 luckymoneyNum = 33;
  repeated DataDecoration decoList = 34;
  repeated DataTopFan topFans = 35;
  optional DataRoomStats stats = 36;
  optional string sunDailyIconContent = 37;
  optional string distance = 38;
  optional string distanceCity = 39;
  optional string location = 40;
  optional string realDistance = 41;
  optional DataImage feedRoomLabel = 42;
  optional string commonLabelList = 43;
  optional DataRoomUserAttr livingRoomAttrs = 44;
  repeated int64 adminUserIds = 45;
  optional DataUser owner = 46;
  optional string privateInfo = 47;
  optional bool hasCommerceGoods = 48;
  optional bool liveTypeNormal = 49;
  optional bool liveTypeLinkmic = 50;
  optional bool liveTypeAudio = 51;
  optional bool liveTypeThirdParty = 52;
  optional bool liveTypeScreenshot = 53;
  optional bool liveTypeSandbox = 54;
  optional bool liveTypeOfficial = 55;
  optional int64 groupId = 59;
  optional int64 orientation = 60;
  optional int64 category = 61;
  repeated int64 tags = 62;
  optional int64 startTime = 63;
  optional int64 popularity = 64;
  optional string popularityStr = 65;
  optional int64 fcdnAppid = 66;
  optional bool sellGoods = 68;
  optional int64 webCount = 69;
  optional string verticalCoverUri = 70;
  optional int64 baseCategory = 71;
  optional DataRoomAuthStatus roomAuth = 72;
  repeated DataRoomTab roomTabs = 73;
  optional string introduction = 74;
  optional DataBurstInfo burst = 75;
  optional DataRoomHealthScoreInfo healthScore = 76;
  optional bool isReplay = 77;
  optional string vid = 78;
  optional int64 groupSource = 79;
  optional int64 lotteryFinishTime = 80;
  optional DataRoomActivityTag activityTag = 81;
  optional DataImage portraitCover = 82;
  optional DataImage background = 83;
  optional int64 layout = 84;
  optional string waitCopy = 85;
  optional DataImage guideButton = 86;
  optional string previewCopy = 87;
  optional bool isShowInquiryBall = 88;
  optional DataMatchInfo matchInfo = 89;
  optional bool useFilter = 90;
  optional int64 giftMsgStyle = 91;
  optional string distanceKm = 92;
  optional string finishUrl = 93;
  optional DataOfficialRoomInfo officialRoomInfo = 94;
  optional bool isShowUserCardSwitch = 95;
  optional string videoFeedTag = 96;
  optional string forumExtraData = 97;
  optional int64 fansclubMsgStyle = 98;
  optional int64 followMsgStyle = 99;
  optional int64 shareMsgStyle = 100;
  optional int64 roomLayout = 101;
  optional string shortTitle = 102;
  optional DataRoomShortTouchAreaConfig shortTouchAreaConfig = 103;
  optional int64 bookTime = 104;
  optional int64 bookEndTime = 105;
  optional int64 roomAuditStatus = 106;
  repeated int64 liveDistribution = 107;
  optional DataTVStation tv = 108;
  optional bool replay = 109;
  optional string challengeInfo = 110;
  optional int64 likeCount = 111;
  optional int64 searchId = 112;
  optional string anchorScheduledTimeText = 113;
  optional string hotSentenceInfo = 114;
  optional int64 replayLocation = 115;
  optional int64 streamCloseTime = 116;
  optional string contentTag = 117;
  optional DataImage contentLabel = 118;
  optional DataImage operationLabel = 119;
  optional int32 anchorTabType = 120;
  optional DataGameExtra gameExtra = 121;
  optional DataOfficialChannelInfo officialChannel = 122;
  optional string stamps = 123;
  optional DataCommentBox commentBox = 124;
  optional int32 businessLive = 125;
  optional bool withKtv = 126;
  optional bool withDrawSomething = 127;
  optional int64 webcastCommentTcs = 128;
  optional int64 roomTag = 129;
  map<string, string> linkerMapMap = 130;
  optional int32 finishReason = 131;
  optional DataRoomCart roomCart = 132;
  optional string scrollConfig = 133;
  optional string relationTag = 134;
  optional int64 ownerDeviceId = 135;
  optional int64 autoCover = 136;
  optional int64 appId = 137;
  optional int64 webcastSdkVersion = 138;
  optional int64 commentNameMode = 139;
  optional string roomCreateAbParam = 140;
  optional int64 preEnterTime = 141;
  optional int64 ranklistAudienceType = 142;
  optional int64 previewFlowTag = 143;
  optional DataImage previewTagUrl = 144;
  optional DataQuizExtra quizExtra = 145;
  map<string, string> anchorabmapMap = 146;
  optional DataLinkerUsers linkerUsers = 147;
  optional int64 linkmicDisplayType = 148;
  optional DataAudioBGData audioroombgimage = 149;
  optional DataLinkerUsers cityTopLinkerUsers = 150;
  optional DataBorderInfo borderInfo = 151;
  optional DataImage cityTopBackground = 152;
  optional string cityTopDistance = 153;
  optional int64 liveRoomMode = 154;
  optional DataBonus bonus = 155;
  optional bool highlight = 156;
  optional bool isOfficialChannelRoom = 157;
  optional DataActivityRoomSkinInfo activityRoomSkinInfo = 158;
  repeated int64 fansGroupAdminUserIds = 159;
  optional DataRoomReplayInfo replayInfo = 160;
  optional int64 officialChannelUid = 161;
  optional string livePlatformSource = 162;
  optional int64 acquaintanceStatus = 163;
  optional DataCommentWallInfo commentWallInfo = 164;
  optional DataCommentWallPosition commentWallPosition = 165;
  optional bool liveTypeVsLive = 166;
  optional bool liveTypeVsPremiere = 167;
  optional DataEpisodeExtraInfo episodeExtra = 168;
  repeated int32 vsRoles = 169;
  optional string itemExplicitInfo = 170;
  optional DataShortTouchAuth shortTouchAuth = 171;
  optional int64 sofaLayout = 172;
  optional DataAnnouncementInfo announcementInfo = 173;
  optional bool isNeedCheckList = 174;
  optional DataLiveStatusInfo liveStatusInfo = 175;
  optional DataRoomIMInfo imInfo = 176;
  optional DataLabelInfo assistLabel = 177;
  optional DataInteractOpenExtra interactOpenExtra = 178;
  optional DataVerticalTypeInfo verticalTypeInfo = 179;
  repeated DataFilterWord filterWords = 180;
  optional DataLabelInfo dynamicLabel = 181;
  optional DataLinkerDetail linkerDetail = 182;
  optional int32 visibilityRange = 183;
  optional DataCornerMarkReach cornerMarkReach = 184;
  optional DataPreviewExposeData previewExpose = 185;
  optional DataWelfareProjectInfo welfareProjectInfo = 186;
  optional int32 gameRoomType = 187;
  optional DataPaidLiveData paidLiveData = 188;
  optional DataEasterEggData easterEggData = 189;
  optional bool titleRecommend = 190;
  optional int64 danmakuDetail = 191;
  optional DataAvatarLiveInfo avatarLiveInfo = 192;
  optional DataCircleInfo circleInfo = 193;
  optional int64 hasPromotionGames = 194;
  optional DataImage screenshotSover = 195;
  optional DataAppearance appearance = 196;
  optional DataEcomData ecomData = 197;
  optional DataIndustryServiceInfo industryServiceInfo = 198;
  optional DataRelevantRecommendation relevantRecommendation = 199;
  optional DataRoomSpecificSceneTypeInfo sceneTypeInfo = 200;
  optional DataGameCPData gameCp = 201;
  optional DataGamePlayData gamePlay = 202;
  optional DataUnionLiveInfo unionLiveInfo = 203;
  optional DataBeautifyInfo beautifyInfo = 204;
  optional DataToolBarData toolbarData = 205;
  optional DataAnchorTabLabel anchorTabLabel = 206;
  optional DataLifeGrouponInfo lifeGrouponInfo = 207;
  optional DataVipData vipData = 208;
  optional int64 toutiaoCoverRecommendLevel = 209;
  optional int64 toutiaoTitleRecommendLevel = 210;
  repeated DataUpperRightWidgetData upperRightWidgetDataList = 211;
  optional DataFeedbackCard liveFeedbackCard = 212;
  repeated DataLabelInfo assistLabelList = 213;
  optional DataDesireInfo desireInfo = 214;
  optional DataHotRoomInfo hotRoomInfo = 215;
  optional bool withAggregateColumn = 216;
  optional DataCastScreenData castScreenData = 217;
  optional DataOfficialChannelExtraInfo officialChannelExtra = 218;
  optional string authCity = 219;
  optional DataActivityLiveRecommendConfig activityLiveRecommendConfig = 220;
  optional DataRoomChannelData roomChannel = 221;
  optional DataPackMetaInfo packMeta = 222;
  optional DataActivityData activityData = 223;
  optional DataLikeDisplayConfig likeDisplayConfig = 224;
  optional DataRoomViewStats roomViewStats = 225;
  optional DataMatchRoomData match = 226;
  optional DataCommentaryRoomInfo commentaryRoomInfo = 227;
  optional int64 redpacketAudienceAuth = 228;
  optional DataMatchChatConfig matchChatConfig = 229;
  optional int64 vsMainReplayId = 230;
  optional string screenCaptureSharingTitle = 231;
  optional DataShareResource shareResource = 232;
  repeated string sharingMusicIdList = 233;
}
message DataShareResource {
  optional DataImage toastBackground = 1;
}
message DataMatchChatConfig {
  optional string mainGroupIconUrl = 1;
  optional string mainGroupBackgroundUrl = 2;
  optional string guestGroupIconUrl = 3;
  optional string guestGroupBackgroundUrl = 4;
  repeated string aggregateIconUrl = 5;
}
message DataCommentaryRoomInfo {
  optional int64 userId = 1;
  optional DataImage avatar = 2;
  optional string nickname = 3;
  optional string title = 4;
  optional int64 roomId = 5;
}
message DataActivityData {
  optional bool xgPlay = 1;
  optional DataMatchRoomData match = 2;
}
message DataCastScreenData {
  optional string showText = 1;
  repeated int64 allowList = 2;
  optional int32 sdkVersion = 3;
  optional DataCastOttPermission permission = 4;
  optional int32 forceCastOnly = 5;
}
message DataCastOttPermission {
  optional bool enable = 1;
  optional string failureToast = 2;
}
message DataDesireInfo {
  optional int64 desireId = 1;
  optional string desireIdStr = 2;
}
message DataFeedbackCard {
  optional string title = 1;
  optional int64 feedbackId = 2;
  repeated DataFeedbackCardQuestion question = 3;
  optional DataFeedbackCardCondition condition = 4;
  optional int64 roomId = 5;
  optional DataRoom roomData = 6;
  optional string negativeText = 7;
  optional DataImage bgm = 8;
  optional int32 feedbackType = 9;
  optional int32 inflowFeedbackType = 10;
}
message DataFeedbackCardOption {
  optional string key = 1;
  optional string text = 2;
  optional int64 subQuestionId = 3;
  optional bool negative = 4;
  optional string toastText = 5;
  optional int32 tendency = 6;
}
message DataFeedbackCardRoomCardStruct {
  optional DataRoom data = 1;
  optional string title = 2;
  optional string subTitle = 3;
}
message DataFeedbackCardQuestion {
  optional string questionKey = 1;
  optional string questionText = 2;
  optional int64 type = 3;
  repeated DataFeedbackCardOption options = 4;
  optional int64 questionId = 5;
  repeated DataFeedbackCardRoomCardStruct roomCards = 6;
}
message DataFeedbackCardCondition {
  optional int64 fromTime = 1;
  optional int64 toTime = 2;
  repeated int64 actionIds = 3;
  optional int64 actionType = 4;
  optional int64 previewTime = 5;
}
message DataUpperRightWidgetData {
  optional string name = 1;
  optional int32 widgetType = 2;
  optional string extra = 3;
}
message DataVipData {
  optional int32 vipRoom = 1;
}
message DataAnchorTabLabel {
  optional string content = 1;
  optional DataImage label = 2;
  optional DataImage icon = 3;
  optional int32 style = 4;
  optional int32 type = 5;
  optional string key = 6;
}
message DataBeautifyInfo {
  optional bool useFilter = 1;
  optional bool commerceUseFilter = 2;
}
message DataUnionLiveInfo {
  repeated DataUnionLiveInfoGuestAnchor guestAnchors = 1;
  optional string avatarDescription = 2;
  optional bool fixedSort = 3;
}
message DataUnionLiveInfoGuestAnchor {
  optional DataUser user = 1;
}
message DataRoomSpecificSceneTypeInfo {
  optional bool isUnionLiveRoom = 1;
  optional bool isLife = 2;
  optional int32 isProtectedRoom = 3;
  optional int32 isLastedGoodsRoom = 4;
  optional int32 isDesireRoom = 5;
  optional bool commentaryType = 6;
}
message DataRelevantRecommendation {
  optional int32 relevantType = 1;
  optional int32 bottomBarCategory = 2;
  optional DataImage icon = 3;
  optional string barTextPrefix = 4;
  optional string barTextPostfix = 5;
  optional DataRelevantRecommendationHighLightInfo highLightInfo = 6;
  optional DataRelevantRecommendationEcomInfo ecomInfo = 7;
  optional DataRelevantRecommendationVsInfo vsInfo = 8;
  optional DataRelevantRecommendationWhiteCategoryInfo whiteCategoryInfo = 9;
}
message DataRelevantRecommendationHighLightInfo {
  optional string mainUrl = 1;
  optional string bakUrl = 2;
}
message DataRelevantRecommendationEcomInfo {
  optional int64 productId = 1;
  optional string productName = 2;
}
message DataRelevantRecommendationEpisode {
  optional int64 episodeId = 1;
  optional string episodeName = 2;
  optional DataImage episodeCover = 3;
  optional string currentPeriod = 4;
  optional int64 seasonId = 5;
  optional string itemId = 6;
}
message DataRelevantRecommendationVsInfo {
  repeated DataRelevantRecommendationEpisode episodes = 1;
}
message DataRelevantRecommendationWhiteCategoryInfo {
  optional int64 firstLevelTagId = 1;
}
message DataIndustryServiceInfo {
  optional bool entranceOpen = 1;
  optional DataImage iconImage = 2;
  optional DataIndustryServiceInfoConsultInfo consultInfo = 3;
}
message DataIndustryServiceInfoConsultInfo {
  optional string bizInfo = 1;
  optional int32 consultRole = 2;
}
message DataEcomData {
  optional DataEcomLiveCard liveCard = 1;
  optional DataEcomPop pop = 2;
  optional DataEcomGoodsCard goodsCard = 3;
  repeated DataRedsShowInfo redsShowInfos = 4;
}
message DataAvatarLiveInfo {
  optional string type = 1;
  optional string text = 2;
  optional int32 textSize = 3;
  optional DataImage image = 4;
}
message DataWelfareProjectInfo {
  optional int64 projectId = 1;
  optional int64 showFrequency = 2;
  optional string containerCardUrl = 3;
  optional string welfareDetailPageUrl = 4;
  optional string projectIdStr = 5;
}
message DataCornerMarkReach {
  optional bool needReach = 1;
  optional int64 duration = 2;
  optional int64 elemType = 3;
}
message DataVerticalTypeInfo {
  optional string name = 1;
  optional int64 tabType = 2;
  optional int64 tagId = 3;
  optional bool isSubTag = 4;
  optional DataImage icon = 5;
}
message DataFilterWord {
  optional string id = 1;
  optional bool isSelected = 2;
  optional string name = 3;
}
message DataLabelInfo {
  optional int64 labelType = 1;
  optional int64 displayType = 2;
  optional DataSpliceLabel spliceLabel = 3;
  optional DataImage wholeLabel = 4;
  optional string extra = 5;
  optional DataProfilePicSpliceLabel profilePicSpliceLabel = 6;
}
message DataVSLinkInfo {
  optional string title = 1;
  optional string tabTitle = 2;
  repeated DataVSLinkNode rooms = 3;
}
message DataVSLinkNode {
  optional int64 roomId = 1;
  optional string roomIdStr = 2;
  optional string title = 3;
  optional int64 liveRoomMode = 4;
  optional DataUser owner = 5;
}
message DataSpliceLabel {
  optional string text = 1;
  optional string textColor = 2;
  optional DataImage backgroundImage = 3;
  optional DataImage iconImage = 4;
  optional string backgroundColor = 5;
}
message DataProfilePicSpliceLabel {
  repeated DataLabelProfileItem profileList = 1;
}
message DataLabelProfileItem {
  optional int64 userId = 1;
  optional string nickName = 2;
  optional DataImage profilePic = 3;
}
message DataLiveStatusInfo {
  optional int32 liveStatus = 1;
  optional DataUser liveUser = 2;
  map<int32, DataImage> liveNotifyLightMap = 3;
  optional string previewText = 4;
}
message DataShortTouchAuth {
  optional int32 commerceLottery = 1;
}
message DataEpisodeMod {
  optional int32 episodeStage = 1;
  optional int32 episodeType = 2;
  optional int32 episodeSubType = 3;
  optional int32 episodeRecordType = 4;
}
message DataToolbarItemConfig {
  optional int32 toolbarType = 1;
  optional DataImage icon = 2;
  optional string jumpSchema = 3;
  optional int32 displayType = 4;
  optional DataImage dynamicIcon = 5;
  optional DataImage iconVertical = 6;
  optional DataImage dynamicBottomIcon = 7;
  optional DataImage bottomIcon = 8;
  repeated DataToast toastList = 9;
}
message DataToast {
  optional int64 startTime = 1;
  optional int64 endTime = 2;
  optional string content = 3;
  optional string schema = 4;
  optional string toastId = 5;
}
message DataWatchInfo {
  optional string desc = 1;
  optional string count = 2;
  optional string countWithBackup = 3;
  optional int32 realCount = 4;
  optional int64 realCountInt64 = 5;
  optional int32 liveCountDisplayType = 6;
  optional int64 displayTypeStartTime = 7;
  optional string formatCount = 8;
}
message DataEpisodeExtraInfo {
  optional DataEpisodeMod episodeMod = 1;
  optional string currentPeriod = 2;
  optional string title = 3;
  optional string episodeListH5 = 4;
  optional DataWatchInfo watchInfo = 5;
  optional int64 episodeId = 6;
  optional string episodeIdStr = 7;
  optional string itemId = 8;
  optional string selectionUrl = 9;
  optional string relationPlaceText = 10;
  repeated string operationPlaceTextList = 11;
  repeated DataToolbarItemConfig toolbarList = 12;
  optional bool collected = 13;
  optional int64 seasonId = 14;
  optional string finishUrl = 15;
  optional string releaseTime = 16;
  optional int64 watchPeriod = 17;
  optional int64 latestPeriod = 18;
  optional string showName = 19;
  optional int32 currentPeriodRaw = 20;
  optional int32 videoCode = 21;
  optional string seasonIdStr = 22;
  optional string watchPvRaw = 23;
  optional int64 nextSpecialEpisodeId = 24;
  optional DataImage cover = 25;
  optional DataImage coverVertical = 26;
  optional int32 style = 27;
  optional DataEpisodePremierePlay playControl = 28;
  optional DataEpisodePreviewImage previewImage = 29;
  optional DataVSGiftPannel giftPannel = 30;
  optional DataVSPannelIcon pannelIcon = 31;
  repeated DataToolbarItemConfig pannelToolbar = 32;
  optional DataEpisodePreviewBottom previewBottom = 33;
  optional string drawSubTitle = 34;
  optional DataImage seasonCoverVertical = 35;
  repeated DataVSCameraInfo cameraInfos = 36;
  optional int64 defaultCameraId = 37;
  optional int64 defaultCameraIdStr = 38;
  optional string defaultCameraIdStrV2 = 39;
  optional DataVSCameraInfo priorityCamera = 40;
  optional string multiSeasonTag = 41;
  optional DataImage previewBackground = 42;
  optional DataImage background = 43;
  optional DataEpisodeMod mod = 44;
  optional DataImage itemCommentIcon = 45;
  optional DataVSWatermark vsWatermark = 46;
  optional DataVSItemComment itemComment = 47;
  optional string seasonTypeName = 48;
  optional DataVSBar vsBar = 49;
  optional DataWatchInfo seasonWatchInfo = 50;
  optional DataVSLinkInfo linkRoomInfo = 51;
  optional DataCommentConfig commentConfig = 52;
  optional string cameraInfosTableTitle = 53;
  optional int32 episodeStatus = 54;
  optional DataMatchRoomInfo matchRoomInfo = 55;
  optional DataMultiCameraBasicInfo multiCameraBasicInfo = 56;
  optional DataSharePosterInfo sharePosterInfo = 57;
}
message DataCommentConfig {
  repeated DataCommentColor commentColors = 1;
  repeated DataCommentRole commentRoles = 2;
  optional string roleSuffix = 3;
  optional string roleTitle = 4;
  optional string unlockRoleTip = 5;
  repeated DataCommentMedal commentMedals = 6;
  optional string medalTitle = 7;
}
message DataCommentMedal {
  optional string name = 1;
  optional DataImage image = 2;
  map<string, string> jumpSchemaMap = 3;
  optional DataImage keyboardImage = 4;
}
message DataCommentColor {
  optional string name = 1;
  optional string color = 2;
}
message DataCommentRole {
  optional int64 roleId = 1;
  optional string name = 2;
  optional DataImage avatar = 3;
}
message DataBonus {
  optional int64 bonusType = 1;
  optional DataBonusAuthor author = 2;
  optional string title = 3;
  optional string subTitle = 4;
  optional string text = 5;
  optional string style = 6;
  optional DataBonusCommerce commerceInfo = 7;
  optional string openUrl = 8;
  optional string token = 9;
  optional int64 source = 10;
  optional DataImage label = 11;
  optional int64 sceneId = 12;
  optional bool maybeCarp = 13;
  optional int64 countdownSecond = 14;
}
message DataBonusCommerce {
  optional int64 id = 1;
}
message DataBonusAuthor {
  optional int64 id = 1;
  optional string name = 2;
  optional DataImage avatarLarger = 3;
  optional DataImage avatarThumb = 4;
  optional DataImage avatarMedium = 5;
}
message DataBorderInfo {
  optional int64 borderType = 1;
  optional DataStaticBorderInfo staticBorder = 2;
  optional DataDynamicBorderInfo dynamicBorder = 3;
  optional int64 duration = 4;
}
message DataStaticBorderInfo {
  optional DataImage top = 1;
  optional DataImage bottom = 2;
  optional DataImage left = 3;
  optional DataImage right = 4;
}
message DataDynamicBorderInfo {
  optional int64 id = 1;
}
message DataLinkerUsers {
  optional int64 count = 1;
  repeated DataUser usersInfo = 2;
}
message DataOfficialChannelInfo {
  optional DataUser channelUser = 1;
  optional string channelName = 2;
  optional string channelIntro = 3;
  optional int64 endTimestamp = 4;
  optional int64 forbiddenBeforeEnd = 5;
  optional int32 currentShowId = 6;
  optional int64 maxEnterTime = 7;
  optional int64 maxNextTime = 8;
  map<int64, int64> delayEnterTimeMap = 9;
  optional bool hostPermission = 10;
  optional int64 backupRoomId = 11;
  optional DataUser livingUser = 12;
  optional bool hostCanAcceptGift = 13;
  repeated int64 hostUids = 14;
  optional string backupRoomIdStr = 15;
  optional bool enableHost = 16;
}
message DataOfficialChannelExtraInfo {
  optional int64 showStartTs = 1;
  optional string showlistSchema = 2;
}
message DataRoomShortTouchAreaConfig {
  map<int32, DataRoomShortTouchAreaConfigElement> elementsMap = 1;
  map<int32, DataRoomShortTouchAreaConfigForbiddenType> forbiddenTypesMapMap = 3;
}
message DataRoomShortTouchAreaConfigElement {
  optional int32 type = 1;
  optional int32 priority = 2;
}
message DataRoomShortTouchAreaConfigForbiddenType {
  optional int32 type = 1;
  optional string reason = 2;
}
message DataMatchInfo {
  optional DataMatchSkinInfo skin = 1;
}
message DataMatchSkinInfo {
  optional DataMatchSkinInfoFollowBtnSkin unfollowSkin = 1;
  optional DataMatchSkinInfoFollowBtnSkin followedSkin = 2;
  optional string tabSelectedColor = 3;
  optional string tabUnselectedColor = 4;
  optional string commentPlaceHolderColor = 5;
  optional string anchorNameColor = 6;
  optional string anchorInfoColor = 7;
  optional DataImage userBannerImage = 8;
  optional DataImage toolBarImage = 9;
  optional string commentPlaceHolderBgColor = 10;
  optional DataImage shareIcon = 11;
}
message DataMatchSkinInfoFollowBtnSkin {
  optional string leftColor = 1;
  optional string rightColor = 2;
  optional string fontColor = 3;
}
message DataRoomActivityTag {
  optional int32 activityType = 1;
  optional string name = 2;
  optional string url = 3;
  optional string extra = 4;
  optional DataImage icon = 5;
}
message DataRoomAuthStatus {
  optional bool chat = 1;
  optional bool danmaku = 2;
  optional bool gift = 3;
  optional bool luckmoney = 4;
  optional bool digg = 5;
  optional bool roomcontributor = 7;
  optional bool props = 8;
  optional bool usercard = 9;
  optional bool poi = 10;
  optional int64 moreanchor = 11;
  optional int64 banner = 12;
  optional int64 share = 13;
  optional int64 usercorner = 14;
  optional int64 landscape = 15;
  optional int64 landscapechat = 16;
  optional int64 publicscreen = 17;
  optional int64 giftanchormt = 18;
  optional int64 recordscreen = 19;
  optional int64 donationsticker = 20;
  optional int64 hourrank = 21;
  optional int64 commercecard = 22;
  optional int64 audiochat = 23;
  optional int64 danmakudefault = 24;
  optional int64 ktvordersong = 25;
  optional int64 selectionalbum = 26;
  optional int64 like = 27;
  optional int64 multiplierplayback = 28;
  optional int64 downloadvideo = 29;
  optional int64 collect = 30;
  optional int64 timedshutdown = 31;
  optional int64 seek = 32;
  optional int64 denounce = 33;
  optional int64 dislike = 34;
  optional int64 onlyta = 35;
  optional int64 castscreen = 36;
  optional int64 commentwall = 37;
  optional int64 bulletstyle = 38;
  optional int64 showgameplugin = 39;
  optional int64 vsgift = 40;
  optional int64 vstopic = 41;
  optional int64 vsrank = 42;
  optional int64 admincommentwall = 43;
  optional int64 commercecomponent = 44;
  optional int64 douplus = 45;
  optional int64 gamepointsplaying = 46;
  optional int64 poster = 47;
  optional int64 highlights = 48;
  optional int64 typingcommentstate = 49;
  optional int64 strokeupdownguide = 50;
  optional int64 uprightstatsfloatinglayer = 51;
  optional int64 castscreenexplicit = 52;
  optional int64 selection = 53;
  optional int64 industryservice = 54;
  optional int64 verticalrank = 55;
  optional int64 entereffects = 56;
  optional int64 fansclub = 57;
  optional int64 emojioutside = 58;
  optional int64 cansellticket = 59;
  optional int64 doupluspopularitygem = 60;
  optional int64 missioncenter = 61;
  optional int64 expandscreen = 62;
  optional int64 fansgroup = 63;
  optional int64 topic = 64;
  optional int64 anchormission = 65;
  optional int64 teleprompter = 66;
  optional int64 chatdynamicslidespeed = 67;
  optional int64 smallwindowdisplay = 68;
  optional int64 messagedispatch = 69;
  optional int64 roomchannel = 70;
  optional int64 chatdispatch = 71;
  optional int64 linkmicguestlike = 72;
  optional int64 medialinkmic = 73;
  optional int64 videoshare = 74;
  optional int64 chatguideemoji = 75;
  optional int64 chatguideimage = 76;
  optional int64 pcplay = 77;
  optional int64 padplay = 78;
  optional int64 longtouch = 79;
  optional int64 firstfeedhistchat = 80;
  optional int64 morehistchat = 81;
  optional int64 wordassociation = 82;
  optional int64 landscapescreencapture = 83;
  optional int64 landscapescreenrecording = 84;
  optional int64 screenprojectionbarrage = 85;
  optional int64 smallwindowplayer = 86;
  optional int64 chatoperate = 87;
  optional int64 ecomfansclub = 88;
  optional int64 audiochattotext = 89;
  optional DataRoomAuthStatusRoomAuthOffReasons offreason = 100;
  optional DataRoomAuthStatusRoomAuthSpecialStyle specialstyle = 101;
  optional int64 vscommentbar = 200;
  optional int64 vswelcomedanmaku = 201;
  optional int64 vsfansclub = 202;
  optional int64 vsextensionenablefollow = 203;
  optional int64 vsdouplus = 204;
}
message DataRoomAuthStatusRoomAuthOffReasons {
  optional string gift = 1;
}
message DataRoomAuthStatusRoomAuthSpecialStyle {
  optional DataRoomAuthStatusRoomAuthSpecialStyleStyle chat = 1;
  optional DataRoomAuthStatusRoomAuthSpecialStyleStyle gift = 2;
  optional DataRoomAuthStatusRoomAuthSpecialStyleStyle roomcontributor = 3;
  optional DataRoomAuthStatusRoomAuthSpecialStyleStyle like = 4;
  optional DataRoomAuthStatusRoomAuthSpecialStyleStyle roomchannel = 5;
  optional DataRoomAuthStatusRoomAuthSpecialStyleStyle share = 6;
  optional DataRoomAuthStatusRoomAuthSpecialStyleStyle castscreenauth = 7;
}
message DataRoomAuthStatusRoomAuthSpecialStyleStyle {
  optional int32 unablestyle = 1;
  optional string content = 2;
  optional int32 offtype = 3;
  optional int32 anchorswitch = 4;
  optional string switchstatustipmsg = 5;
  optional string switchstatusanchortipmsg = 6;
}
message DataMoreEntrance {
  optional string title = 1;
  optional int64 type = 2;
}
message DataWebRoomAuthStatus {
  optional bool chat = 1;
  optional bool danmaku = 2;
  optional bool gift = 3;
  optional bool luckmoney = 4;
  optional bool digg = 5;
  optional bool roomcontributor = 7;
  optional bool props = 8;
  optional bool usercard = 9;
  optional bool poi = 10;
  optional int64 moreanchor = 11;
  optional int64 banner = 12;
  optional int64 share = 13;
  optional int64 usercorner = 14;
  optional int64 landscape = 15;
  optional int64 landscapechat = 16;
  optional int64 publicscreen = 17;
  optional int64 giftanchormt = 18;
  optional int64 recordscreen = 19;
  optional int64 donationsticker = 20;
  optional int64 hourrank = 21;
  optional int64 commercecard = 22;
  optional int64 audiochat = 23;
  optional int64 danmakudefault = 24;
  optional int64 ktvordersong = 25;
  optional int64 selectionalbum = 26;
  optional int64 like = 27;
  optional int64 multiplierplayback = 28;
  optional int64 downloadvideo = 29;
  optional int64 collect = 30;
  optional int64 timedshutdown = 31;
  optional int64 seek = 32;
  optional int64 denounce = 33;
  optional int64 dislike = 34;
  optional int64 onlyta = 35;
  optional int64 castscreen = 36;
  optional int64 commentwall = 37;
  optional int64 bulletstyle = 38;
  optional int64 showgameplugin = 39;
  optional int64 vsgift = 40;
  optional int64 vstopic = 41;
  optional int64 vsrank = 42;
  optional int64 admincommentwall = 43;
  optional int64 commercecomponent = 44;
  optional int64 douplus = 45;
  optional int64 gamepointsplaying = 46;
  optional int64 poster = 47;
  optional int64 highlights = 48;
  optional int64 typingcommentstate = 49;
  optional int64 strokeupdownguide = 50;
  optional int64 uprightstatsfloatinglayer = 51;
  optional int64 castscreenexplicit = 52;
  optional int64 selection = 53;
  optional int64 industryservice = 54;
  optional int64 verticalrank = 55;
  optional int64 entereffects = 56;
  optional int64 fansclub = 57;
  optional int64 emojioutside = 58;
  optional int64 cansellticket = 59;
  optional int64 doupluspopularitygem = 60;
  optional int64 missioncenter = 61;
  optional int64 expandscreen = 62;
  optional int64 fansgroup = 63;
  optional int64 topic = 64;
  optional int64 anchormission = 65;
  optional int64 teleprompter = 66;
  optional DataWebRoomAuthStatusRoomAuthOffReasons offreason = 100;
  optional DataWebRoomAuthStatusRoomAuthSpecialStyle specialstyle = 101;
}
message DataWebRoomAuthStatusRoomAuthOffReasons {
  optional string gift = 1;
}
message DataWebRoomAuthStatusRoomAuthSpecialStyle {
  optional DataWebRoomAuthStatusRoomAuthSpecialStyleStyle chat = 1;
  optional DataWebRoomAuthStatusRoomAuthSpecialStyleStyle gift = 2;
  optional DataWebRoomAuthStatusRoomAuthSpecialStyleStyle roomcontributor = 3;
}
message DataWebRoomAuthStatusRoomAuthSpecialStyleStyle {
  optional int32 unablestyle = 1;
  optional string content = 2;
  optional int32 offtype = 3;
}
message DataRoomTab {
  optional int32 tabType = 1;
  optional string tabName = 2;
  optional string tabUrl = 3;
}
message DataRoomExtra {
  optional bool isSandbox = 1;
  optional DataRegionRestriction enterRegionRestriction = 2;
  optional DataRegionMatch enterRegionMatch = 3;
  optional DataSafeReason filterWithNoContext = 4;
  optional int64 xiguaUid = 5;
  optional int64 limitStrategy = 6;
  optional string limitAppid = 7;
  optional int32 geoBlock = 8;
}
message DataSafeReason {
  optional int32 safeType = 1;
}
message DataRoomPrivateInfo {
  optional bool isSandbox = 1;
  optional DataRegionRestriction enterRegionRestriction = 2;
  optional string locale = 3;
  optional DataRegion gpsRegion = 4;
  optional DataRegion region = 5;
  optional string tagSet = 6;
  optional double latitude = 7;
  optional double longitude = 8;
  optional string citycode = 9;
  optional string laneenv = 10;
  optional DataRegionMatch enterRegionMatch = 11;
  repeated int64 selfVisibleAntidirtTables = 12;
  repeated int64 banAntidirtTables = 13;
  optional int64 webcastCommentTcs = 14;
  optional int64 recommendLevel = 15;
  optional bool deliverLimitSrcApp = 16;
  optional int64 coverRecommendLevel = 17;
  optional int64 titleRecommendLevel = 18;
}
message DataRegionRestriction {
  optional int64 type = 1;
  repeated string whiteList = 2;
  repeated string blackList = 3;
}
message DataRegionMatch {
  optional int64 type = 1;
  repeated string allowList = 2;
  repeated string denyList = 3;
}
message DataRegion {
  optional string latitude = 1;
  optional string longitude = 2;
  optional string city = 3;
}
message DataStreamUrl {
  optional int64 provider = 1;
  optional int64 id = 2;
  optional string idStr = 3;
  map<string, string> resolutionNameMap = 4;
  optional string defaultResolution = 5;
  optional DataStreamUrlStreamUrlExtra extra = 6;
  optional string rtmpPushUrl = 7;
  optional string rtmpPullUrl = 8;
  map<string, string> flvPullUrlMap = 9;
  repeated string candidateResolution = 10;
  optional string hlsPullUrl = 11;
  optional string hlsPullUrlParams = 12;
  optional string rtmpPullUrlParams = 13;
  map<string, string> flvPullUrlParamsMap = 14;
  optional string rtmpPushUrlParams = 15;
  repeated string pushUrls = 16;
  optional DataStreamUrlLiveCoreSDKData liveCoreSdkData = 17;
  map<string, string> hlsPullUrlMapMap = 18;
  repeated string completePushUrls = 19;
  optional int32 streamControlType = 20;
  optional int32 streamOrientation = 21;
  optional int32 pushStreamType = 22;
  map<string, DataStreamUrlLiveCoreSDKDataPullData> pullDatasMap = 23;
  optional DataStreamUrlPlaySetting play = 24;
  map<string, DataStreamUrlLiveCoreSDKDataPushData> pushDatasMap = 25;
  optional int32 vrType = 26;
}
message DataStreamUrlStreamUrlExtra {
  optional int64 height = 1;
  optional int64 width = 2;
  optional int64 fps = 3;
  optional int64 maxBitrate = 4;
  optional int64 minBitrate = 5;
  optional int64 defaultBitrate = 6;
  optional int64 bitrateAdaptStrategy = 7;
  optional int64 anchorInteractProfile = 8;
  optional int64 audienceInteractProfile = 9;
  optional bool hardwareEncode = 10;
  optional int64 videoProfile = 12;
  optional DataStreamUrlStreamUrlExtraSuperResolution superResolution = 14;
  optional bool h265Enable = 15;
  optional int64 gopSec = 16;
  optional bool bframeEnable = 17;
  optional bool roi = 18;
  optional bool swRoi = 19;
  optional bool bytevc1Enable = 20;
  optional DataStreamUrlStreamUrlExtraAnchorClientInfo anchorClientInfo = 21;
}
message DataStreamUrlStreamUrlExtraSuperResolution {
  optional bool enable = 1;
  optional int64 strength = 2;
  optional bool antialiasing = 3;
}
message DataStreamUrlStreamUrlExtraAnchorClientInfo {
  optional string customInfo = 1;
}
message DataStreamUrlLiveCoreSDKData {
  optional DataStreamUrlLiveCoreSDKDataPullData pullData = 1;
  optional DataStreamUrlLiveCoreSDKDataPushData pushData = 2;
  optional string size = 3;
}
message DataStreamUrlLiveCoreSDKDataPullData {
  optional string streamData = 1;
  optional DataStreamUrlLiveCoreSDKDataPullDataOptions options = 2;
  optional int64 version = 3;
  map<string, string> hlsDataUnencryptedMap = 4;
  optional int32 kind = 5;
  optional DataStreamUrlLiveCoreSDKDataPullDataExtension extension = 6;
  repeated DataStreamUrlLiveCoreSDKDataPullDataPlayInfo hls = 7;
  repeated DataStreamUrlLiveCoreSDKDataPullDataPlayInfo flv = 8;
  optional string codec = 9;
  optional DataStreamUrlLiveCoreSDKDataPullDataDisplay display = 10;
}
message DataStreamUrlLiveCoreSDKDataPullDataOptions {
  optional DataStreamUrlLiveCoreSDKDataPullDataOptionsQuality defaultQuality = 1;
  repeated DataStreamUrlLiveCoreSDKDataPullDataOptionsQuality qualities = 2;
  optional bool vpassDefault = 3;
}
message DataStreamUrlLiveCoreSDKDataPullDataOptionsQuality {
  optional string name = 1;
  optional string sdkKey = 2;
  optional string vCodec = 3;
  optional string resolution = 4;
  optional int32 level = 5;
  optional int32 vBitRate = 6;
  optional string additionalContent = 7;
  optional int32 fps = 8;
  optional int32 disable = 9;
}
message DataStreamUrlLiveCoreSDKDataPullDataClip {
  optional float x = 1;
  optional float y = 2;
  optional float w = 3;
  optional float h = 4;
}
message DataStreamUrlLiveCoreSDKDataPullDataExtension {
  optional DataStreamUrlLiveCoreSDKDataPullDataClip gameClip = 1;
  optional DataStreamUrlLiveCoreSDKDataPullDataClip cameraClip = 2;
  optional int32 cameraHidden = 3;
  optional string ts = 4;
  optional int64 refresh = 5;
  optional int32 displayMode = 6;
  optional int32 gameHidden = 7;
  optional string gameRoomId = 8;
  optional int32 layout = 9;
}
message DataStreamUrlLiveCoreSDKDataPullDataPlayInfo {
  optional string url = 1;
  optional string qualityName = 2;
}
message DataStreamUrlLiveCoreSDKDataPullDataDisplay {
  optional int64 scaleWidth = 1;
  optional int64 scaleHeight = 2;
}
message DataStreamUrlLiveCoreSDKDataPushData {
  map<string, DataStreamUrlLiveCoreSDKDataPushDataResolutionParams> resolutionParamsMap = 1;
  optional int32 pushStreamLevel = 2;
  optional bool preSchedule = 3;
  optional string rtmpPushUrl = 4;
  optional string pushParams = 5;
  optional int32 kind = 6;
  optional int64 streamId = 7;
  optional string streamIdStr = 8;
}
message DataStreamUrlLiveCoreSDKDataPushDataResolutionParams {
  optional int64 width = 1;
  optional int64 height = 2;
  optional int64 defaultBitrate = 3;
  optional int64 minBitrate = 4;
  optional int64 maxBitrate = 5;
  optional int64 fps = 6;
}
message DataStreamUrlPlaySetting {
  optional string horizontal = 1;
  optional string vertical = 2;
}
message DataVSCameraInfo {
  optional int64 cameraId = 1;
  optional string cameraIdStr = 2;
  optional string title = 3;
  optional DataImage cover = 4;
  optional DataImage coverVertical = 5;
  optional DataStreamUrl streamInfo = 6;
  optional int64 startTime = 7;
  optional int64 endTime = 8;
  optional int32 style = 9;
  optional DataRoomAuthStatus cameraRoomAuth = 10;
  optional int32 vrType = 11;
}
message DataWebStreamUrl {
  map<string, string> flvPullUrlMap = 1;
  optional string defaultResolution = 2;
  map<string, string> hlsPullUrlMapMap = 3;
  optional string hlsPullUrl = 4;
  optional int32 streamOrientation = 5;
  optional DataWebStreamUrlWebLiveCoreSDKData liveCoreSdkData = 6;
}
message DataWebStreamUrlWebLiveCoreSDKData {
  optional DataWebStreamUrlWebLiveCoreSDKDataPullData pullData = 1;
}
message DataWebStreamUrlWebLiveCoreSDKDataPullData {
  optional DataWebStreamUrlWebLiveCoreSDKDataPullDataOptions options = 2;
  optional string streamData = 1;
}
message DataWebStreamUrlWebLiveCoreSDKDataPullDataOptions {
  optional DataWebStreamUrlWebLiveCoreSDKDataPullDataOptionsQuality defaultQuality = 1;
  repeated DataWebStreamUrlWebLiveCoreSDKDataPullDataOptionsQuality qualities = 2;
}
message DataWebStreamUrlWebLiveCoreSDKDataPullDataOptionsQuality {
  optional string name = 1;
  optional string sdkKey = 2;
  optional string vCodec = 3;
  optional string resolution = 4;
  optional int32 level = 5;
}
message DataLinkMic {
  optional int64 channelId = 1;
  optional DataLinkMicLinkMicChannelInfo channelInfo = 2;
  repeated DataLinkMicLinkMicBattleScore battleScores = 3;
  optional DataLinkMicLinkMicBattleSetting battleSettings = 4;
  optional int64 rivalAnchorId = 5;
}
message DataLinkMicLinkMicChannelInfo {
  optional int64 layout = 1;
  optional int64 vendor = 2;
  optional int64 dimension = 3;
}
message DataLinkMicLinkMicBattleScore {
  optional int64 userId = 1;
  optional int64 score = 2;
}
message DataLinkMicLinkMicBattleSetting {
  optional int64 channelId = 1;
  optional int64 duration = 2;
  optional int64 startTime = 3;
  optional int64 startTimeMs = 4;
  optional string theme = 5;
  optional int64 finished = 6;
  optional int64 battleId = 7;
  optional int64 matchType = 8;
}
message DataReservation {
  optional int64 appointmentId = 1;
  optional int64 anchorId = 2;
  optional int64 roomId = 3;
  optional int64 startTime = 4;
  optional int64 endTime = 5;
  repeated int64 btnRect = 6;
  optional string btnColor = 7;
  optional bool isReserved = 8;
}
message DataDecoration {
  optional int64 id = 1;
  optional DataImage image = 2;
  optional int64 type = 3;
  repeated int64 inputRect = 4;
  optional int64 textSize = 5;
  optional string textColor = 6;
  optional string content = 7;
  optional int64 maxLength = 8;
  optional int64 status = 9;
  optional int64 h = 10;
  optional int64 x = 11;
  optional int64 w = 12;
  optional int64 y = 13;
  optional int64 kind = 14;
  optional int64 subType = 15;
  optional DataReservation reservation = 16;
  optional DataImage ninePatchImage = 17;
  repeated int64 textSpecialEffects = 18;
  optional int64 textImageAdjustableStartPosition = 19;
  optional int64 textImageAdjustableEndPosition = 20;
  optional DataDecorationFontConfig textFontConfig = 21;
  optional string auditTextColor = 22;
}
message DataDecorationFontConfig {
  optional int64 fontid = 1;
  optional string downloadurl = 2;
  optional int64 status = 3;
  optional string fontName = 4;
}
message DataRoomStats {
  optional int64 id = 1;
  optional string idStr = 2;
  optional int64 fanTicket = 3;
  optional int64 money = 4;
  optional int64 totalUser = 5;
  optional int64 giftUvCount = 6;
  optional int64 followCount = 7;
  optional DataRoomStatsUserCountComposition userCountComposition = 8;
  optional int64 watermelon = 9;
  optional int64 diggCount = 10;
  optional int64 enterCount = 11;
  optional string douPlusPromotion = 12;
  optional string totalUserDesp = 13;
  optional int64 likeCount = 14;
  optional string totalUserStr = 15;
  optional string userCountStr = 16;
  optional int64 commentCount = 17;
  optional int64 welfareDonationAmount = 18;
  optional string upRightStatsStr = 19;
  optional string upRightStatsStrComplete = 20;
}
message DataRoomStatsUserCountComposition {
  optional double city = 1;
  optional double videoDetail = 2;
  optional double myFollow = 3;
  optional double other = 4;
}
message DataRoomViewStats {
  optional bool isHidden = 1;
  optional string displayShort = 2;
  optional string displayMiddle = 3;
  optional string displayLong = 4;
  optional int64 displayValue = 5;
  optional int64 displayVersion = 6;
  optional bool incremental = 7;
  optional int32 displayType = 8;
  optional string displayShortAnchor = 9;
  optional string displayMiddleAnchor = 10;
  optional string displayLongAnchor = 11;
}
message DataTopFan {
  optional int64 fanTicket = 1;
  optional DataUser user = 2;
}
message DataRoomUserAttr {
  optional int64 roomId = 1;
  optional string roomIdStr = 2;
  optional int64 silenceFlag = 3;
  optional int64 adminFlag = 4;
  optional int64 rank = 5;
}
message DataCoverInfo {
  repeated string urlList = 1;
  optional string uri = 2;
  optional int64 width = 3;
  optional int64 height = 4;
}
message DataBurstInfo {
  optional int64 burstTimeRemainSeconds = 1;
  optional int64 multiple = 2;
  optional int64 propertyDefinitionId = 3;
  optional DataImage propertyIcon = 4;
}
message DataRoomHealthScoreInfo {
  optional double score = 1;
  optional string bubbleMessage = 2;
  optional string jumpUrl = 3;
}
message DataCoverQuality {
  optional int64 level = 1;
  optional string bubbleTip = 2;
  optional string popTip = 3;
  optional string uri = 4;
}
message DataToutiaoRoomCell {
  repeated DataRoom data = 1;
  repeated DataImage largeImage = 2;
}
message DataTVStation {
  optional bool isIdle = 1;
  optional string stateDesc = 2;
}
message DataCommentBox {
  optional DataImage icon = 1;
  optional string placeholder = 2;
}
message DataRoomCart {
  optional bool containCart = 1;
  optional int64 total = 2;
  optional int64 flashTotal = 3;
  optional string cartIcon = 4;
  optional int32 showCart = 5;
  optional DataCartVertical vertical = 6;
  optional DataCartHorizontal horizontal = 7;
  optional DataGlobalCustomIcons globalCustomIcons = 8;
}
message DataCartVertical {
  optional bool allowShowCart = 1;
}
message DataCartHorizontal {
  optional bool allowShowCart = 1;
}
message DataGlobalCustomIcons {
  optional string staticIconUrl = 1;
  optional string animatedIconUrl = 2;
  optional string animatedCommonIconUrl = 3;
}
message DataShortTouchBigCard {
  optional string bigCardUrl = 1;
  optional int32 containerType = 2;
  optional int32 width = 3;
  optional int32 height = 4;
  optional int32 duration = 5;
}
message DataTextViewModel {
  optional string text = 1;
  optional string textColor = 2;
  optional int32 textSize = 3;
  optional string bgColor = 4;
}
message DataShortTouchBubble {
  optional string bubbleId = 1;
  optional DataTextViewModel uiModel = 2;
  optional int32 strategy = 3;
  optional int32 duration = 4;
}
message DataShortTouchArea {
  optional int32 type = 1;
  optional uint32 priority = 2;
  optional int64 minWebcastSdkVersion = 3;
  optional int32 shortTouchType = 4;
  optional DataShortTouchInfo shortTouchInfo = 5;
  optional DataShortTouchBigCard shortTouchBigCard = 6;
  optional string containerPayload = 7;
  optional int32 loadType = 8;
  optional DataShortTouchBubble bubbleParams = 9;
  optional string name = 10;
}
message DataShortTouchImageLayers {
  repeated DataShortTouchImageLayersLayer layers = 1;
  optional int32 baseWidth = 2;
  optional int32 baseHeight = 3;
}
message DataShortTouchImageLayersLayer {
  optional string url = 1;
  optional int32 x = 2;
  optional int32 y = 3;
  optional int32 width = 4;
  optional int32 height = 5;
  optional int32 radius = 6;
}
message DataShortTouchInfo {
  optional string shortTouchUrl = 1;
  optional string shortTouchFallbackUrl = 2;
  optional int32 containerType = 3;
  optional uint32 width = 4;
  optional uint32 height = 5;
  optional string imgUrl = 6;
  optional string jumpSchema = 7;
  optional int32 showAnimation = 8;
  optional int32 animationType = 9;
  repeated string subItemList = 10;
  optional DataShortTouchImageLayers imgLayers = 11;
  optional uint32 animationQuota = 12;
  optional string accessibleName = 13;
}
message DataQuizExtra {
  optional string quizInfos = 1;
}
message DataAudioSpeakingImageList {
  optional DataAudioSpeakingImageListSpeakingImage maleSpeakingImage = 1;
  optional DataAudioSpeakingImageListSpeakingImage femaleSpeakingImage = 2;
  optional DataAudioSpeakingImageListSpeakingImage unknownSpeakingImage = 3;
}
message DataAudioSpeakingImageListSpeakingImage {
  optional DataImage speakingLowImage = 1;
  optional DataImage speakingDefaultImage = 2;
  optional DataImage speakingHighImage = 3;
}
message DataShowArea {
  optional int64 x = 1;
  optional int64 y = 2;
  optional int64 h = 3;
  optional int64 w = 4;
}
message DataAnimatedBgInfo {
  optional DataShowArea showarea = 1;
  optional string fileformat = 2;
  optional DataImage animatedbg = 3;
}
message DataAudioBGData {
  optional int64 id = 1;
  optional string imageUri = 2;
  optional int32 imgType = 3;
  optional DataImage image = 4;
  optional DataImage imagethumbnail = 5;
  optional DataImage imageanimatedbg = 6;
  optional DataImage imagenormalavatar = 7;
  optional DataImage imagestartupavatar = 8;
  optional DataImage imagechatjoinicon = 9;
  optional DataImage imagestaticbg = 10;
  optional DataAudioSpeakingImageList speakingimagelist = 11;
  optional string statusColorValue = 12;
  optional string publicScreenColorValue = 13;
  optional int32 timeLimit = 14;
  optional int32 bgType = 15;
  optional string emptyStartColor = 16;
  optional string emptyEndColor = 17;
  optional DataImage imagecoldbg = 18;
  optional string micbgcolorvalue = 19;
  repeated DataImage iconmicnormals = 20;
  optional DataImage iconmiclock = 21;
  optional string colormictext = 22;
  optional string colormicline = 23;
  optional string colormicbg = 24;
  optional string themelabel = 25;
  optional int32 bgstatus = 26;
  optional DataAnimatedBgInfo animateinfo = 27;
  optional string idstr = 28;
  optional int32 playMode = 29;
  optional string themeTag = 30;
  optional int64 startTime = 31;
  optional int64 endTime = 32;
  optional int32 formatType = 33;
}
message DataActivityRoomSkinInfo {
  map<int32, DataImage> verticalScreenMap = 1;
  map<int32, DataImage> horizontalScreenMap = 2;
}
message DataRoomReplayInfo {
  optional int64 replayDuration = 1;
  optional string replayUrl = 2;
  optional string contentUniqId = 3;
}
message DataCommentWallInfo {
  optional string content = 1;
  optional int64 id = 2;
  optional int64 commentMsgId = 3;
  optional int64 commenterId = 4;
  optional string commenterNickname = 5;
  optional int64 eventTime = 6;
  optional int64 msgTime = 7;
  optional int64 endTime = 8;
  optional int32 countdownStyle = 9;
  optional int64 operatorId = 10;
  optional string operatorNickname = 11;
}
message DataCommentWallPosition {
  optional double x = 1;
  optional double y = 2;
  optional int64 eventTime = 3;
}
message DataAnnouncementInfo {
  optional string scheduledTimeText = 1;
  optional string content = 2;
  optional bool subscribed = 3;
}
message DataRoomIMInfo {
  repeated string welcomeMessages = 1;
  optional string roomTag = 2;
  optional string hideGiftMessage = 3;
}
message DataInteractOpenExtra {
  map<string, string> debugInfoMap = 1;
}
message DataPropsBGData {
  optional string imageUri = 1;
  optional int32 imgType = 2;
  optional DataImage image = 3;
  optional DataImage imagethumbnail = 4;
}
message DataLinkerDetail {
  repeated int64 linkerPlayModes = 1;
  optional int32 bigPartyLayoutConfigVersion = 2;
  optional bool acceptAudiencePreApply = 3;
  optional int64 linkerUiLayout = 4;
  optional int32 enableAudienceLinkmic = 5;
  optional string functionType = 6;
  map<string, string> linkerMapStrMap = 7;
  optional string ktvLyricMode = 8;
  optional string initSource = 9;
  optional bool forbidApplyFromOther = 10;
}
message DataPreviewExposeData {
  optional int32 style = 1;
  optional DataPreviewExposeDataPreviewGuide previewGuide = 2;
  repeated DataPreviewExposeDataMeta metas = 3;
  repeated DataPreviewExposeDataChatMessage chatMsgs = 4;
  repeated DataPreviewExposeDataMeta forceInsertion = 5;
  optional int32 scrollAfterMs = 6;
  optional bool needRealtime = 7;
  optional int32 messageScrollAfterMs = 8;
  optional int32 messageScrollIntervalMs = 9;
  optional string previewIntro = 10;
  optional DataPreviewExposeDataPreviewExtendArea previewExtendArea = 11;
  optional int32 showUvPv = 12;
  optional int32 showNameAbbreviation = 13;
  optional DataPreviewExposeDataPreviewSwitch switch = 14;
  optional int32 isPreviewUseWebsocket = 15;
  optional bool isAwemeVideoFeed = 16;
}
message DataPreviewExposeDataPreviewGuide {
  optional DataImage icon = 1;
  optional string tip = 2;
  optional int64 type = 3;
  repeated string rollTips = 4;
  optional int64 couponMateId = 5;
  optional int64 userTagGetCoin = 6;
  optional int64 liveMessionStyle = 7;
  optional string etType = 8;
  optional string extra = 9;
}
message DataPreviewExposeDataMeta {
  optional int32 type = 1;
  optional DataPreviewExposeDataMetaHost host = 2;
  optional string content = 3;
}
message DataPreviewExposeDataMetaHost {
  optional DataImage icon = 1;
  optional string tip = 2;
  optional string color = 3;
}
message DataPreviewExposeDataChatMessage {
  optional string nickName = 1;
  optional string nickNameColor = 2;
  optional string content = 3;
}
message DataPreviewExposeDataPreviewExtendArea {
  optional DataImage extendIcon = 1;
  optional string extendPreText = 2;
  optional string extendText = 3;
  optional int32 extendType = 4;
  optional string extra = 5;
  optional int32 useMarquee = 6;
  optional int32 iconType = 7;
  repeated DataPreviewExposeDataPreviewExtendAreaPart rightPart = 8;
  optional string buttonPart = 9;
  repeated DataPreviewExposeDataPreviewExtendAreaPart midPart = 10;
  optional bool needDelimiter = 11;
}
message DataPreviewExposeDataPreviewExtendAreaPart {
  optional int32 fontsize = 1;
  optional int32 interval = 2;
  optional string text = 3;
  optional bool cuttable = 4;
  optional bool deleted = 5;
  optional string fontColor = 6;
}
message DataPreviewExposeDataPreviewSwitch {
  optional int32 title = 1;
  optional int32 previewGuide = 2;
  optional int32 dynamicLabel = 3;
  optional int32 assistLabel = 4;
  optional int32 extendArea = 5;
}
message DataPaidLiveData {
  optional int32 paidType = 1;
  optional int32 viewRight = 2;
  optional int64 duration = 3;
  optional DataTicketData ticketSession = 4;
  optional DataOrderData orderData = 5;
  optional int32 delivery = 6;
  optional bool needDeliveryNotice = 7;
  optional int32 anchorRight = 8;
  optional int32 payAbType = 9;
}
message DataPaidLivePriceInfo {
  optional int32 startTime = 1;
  optional int32 endTime = 2;
  optional int64 price = 3;
  optional int32 claimDdl = 4;
}
message DataTicketData {
  optional int64 ticketSessionId = 1;
  optional string title = 2;
  optional string subTitle = 3;
  optional string price = 4;
  optional int64 rawReleaseTime = 5;
  repeated string tags = 6;
  optional string ticketExplanationCardJumpUrl = 7;
  optional string ticketPanelJumpUrl = 8;
  optional string ticketSessionIdStr = 9;
  optional int32 sellStatus = 10;
  optional string coverUri = 11;
  optional string coverUriVertical = 12;
  optional string introduction = 13;
  optional int64 rawShowStartTime = 14;
  optional int64 rawShowEndTime = 15;
  optional int64 rawSaleStartTime = 16;
  optional int64 rawSaleEndTime = 17;
  optional int64 rawRefundDeadline = 18;
  optional int64 rawEarlyBirdStartTime = 19;
  optional int64 rawEarlyBirdEndTime = 20;
  optional int64 rawFullPriceStartTime = 21;
  optional int64 rawFullPriceEndTime = 22;
  optional int64 rawActivityStartTime = 23;
  optional int64 rawActivityEndTime = 24;
  optional string earlyBirdPrice = 25;
  optional string activityPrice = 26;
  optional int32 status = 27;
  optional string showStartTime = 28;
  optional string showEndTime = 29;
  optional string saleStartTime = 30;
  optional string saleEndTime = 31;
  optional string earlyBirdStartTime = 32;
  optional string earlyBirdEndTime = 33;
  optional string fullPriceStartTime = 34;
  optional string fullPriceEndTime = 35;
  optional string activityStartTime = 36;
  optional string activityEndTime = 37;
  optional string refundDeadline = 38;
  optional string activityTitle = 39;
  optional string activityJumpUrl = 40;
  optional string releaseTime = 41;
  optional int32 ticketExplanationCardStatus = 42;
  optional int32 lastDuration = 43;
  optional string paidConversionJumpUrl = 44;
  optional string ticketPanelSixJumpUrl = 45;
  optional string ticketPanelNineJumpUrl = 46;
  optional DataImage cover = 47;
  optional int32 iosPayType = 48;
  optional int32 androidPayType = 49;
  optional int32 iosPayPrice = 50;
  optional int32 androidPayPrice = 51;
  optional int32 rightDuration = 52;
  optional DataPaidLivePriceInfo friendPriceinfo = 53;
  optional DataPaidLivePriceInfo helpingPriceinfo = 54;
  map<int64, DataTicketDataPaidLivePriceInfoV2> priceInfoMap = 55;
  optional int64 ticketAnchorId = 56;
  optional string extra = 57;
}
message DataTicketDataPaidLivePriceInfoV2 {
  optional string amount = 1;
  optional string currency = 2;
  optional int64 pos = 3;
  repeated int32 payType = 4;
}
message DataOrderData {
  optional string orderId = 1;
}
message DataAppearance {
  optional DataAppearanceBubble headBubble = 1;
  optional int64 upRightStatsDisplayType = 2;
  optional DataMoreEntrance entrance = 3;
  repeated DataToolbarItemConfig toolbarList = 4;
  optional int64 previewStyle = 5;
  optional DataImage coverGauss = 6;
  repeated DataAppearanceContentTag contentTags = 7;
  optional DataPreviewLabel previewLabel = 8;
  optional DataImage coverDynamicMask = 9;
  optional DataImage horizontalBackground = 10;
}
message DataAppearanceBubble {
  optional int32 type = 1;
  repeated string rollTips = 2;
  optional DataImage icon = 3;
  optional int32 rollAfterMs = 4;
  optional int64 couponMateId = 5;
}
message DataAppearanceContentTag {
  optional string text = 1;
}
message DataEpisodeStageInfo {
  optional int64 episodeId = 1;
  optional int32 stage = 2;
}
message DataGameCPData {
  optional int32 isLiveAPromotedA = 1;
  optional string gameId = 2;
  optional string gameName = 3;
}
message DataGamePlayData {
  optional int32 playType = 1;
  optional int64 playId = 2;
  optional int64 gameId = 3;
}
message DataToolBarComponentData {
  optional int32 groupId = 1;
  optional int32 componentType = 2;
  optional int32 opType = 3;
  optional string text = 4;
  optional string schemaUrl = 5;
  optional DataImage icon = 6;
  optional int64 showType = 7;
  optional int64 dataStatus = 8;
  optional string extra = 99;
}
message DataToolBarData {
  repeated DataToolBarComponentData entranceList = 1;
  repeated DataToolBarComponentData morePanel = 2;
  optional int32 maxEntranceCnt = 3;
  repeated DataToolBarComponentData landscapeUpRight = 4;
}
message DataLifeGrouponInfo {
  optional int64 permissionStatus = 1;
  optional int64 aggCardId = 2;
  optional string iconUrl = 3;
  optional string dynamicUrl = 4;
}
message DataPreviewLabel {
  optional int32 type = 1;
  repeated string labelTips = 2;
  optional int32 labelType = 3;
  optional DataImage labelImage = 4;
  optional bool hitTest = 5;
}
message DataHotRoomInfo {
  optional int64 bitmap = 1;
}
message DataActivityLiveRecommendConfig {
  optional string name = 1;
  optional string level = 2;
  optional int64 startTime = 3;
  optional int64 endTime = 4;
  optional int32 liveType = 5;
  repeated int64 actorUids = 6;
  optional DataActivityLiveRecommendConfigEpisodeInfo episodeInfo = 7;
}
message DataActivityLiveRecommendConfigEpisodeInfo {
  optional int32 contentType = 1;
  optional string content = 2;
}
message DataRoomChannelData {
  optional int32 status = 1;
  repeated DataRoomChannelInfo channelList = 2;
  optional int32 supportRoomChannelMode = 3;
  optional int32 limitOfNum = 4;
  optional bool canCreate = 5;
  optional DataImage background = 6;
}
message DataPackMetaInfo {
  optional string scene = 1;
  optional string env = 2;
  optional string dc = 3;
  optional string traceId = 4;
}
message DataLikeDisplayConfig {
  optional int32 showText = 1;
  optional string displayText = 2;
}
message DataMatchRoomData {
  optional DataMatchDrawer drawer = 1;
  optional DataToutiaoMatchData match = 2;
  optional DataImage drawerLabel = 3;
  optional string pcuStr = 4;
  optional DataImage drawerOfficialLabel = 5;
  optional DataImage matchBackground = 6;
  optional DataMatchUserInfo matchUserInfo = 7;
}
message DataMatchUserInfo {
  optional DataTeamInfo userTeamInfo = 1;
  map<int64, int64> userQuizInfoMap = 2;
  optional bool isActivityAccount = 3;
}
message DataTeamInfo {
  optional int64 teamId = 1;
  optional string teamName = 2;
  optional string schemaUrl = 3;
  optional DataImage teamIcon = 4;
  optional DataImage teamBadge = 5;
  optional DataImage teamBackground = 6;
  optional string systemMsg = 7;
}
message protogoogleprotobufFileDescriptorSet {
  repeated protogoogleprotobufFileDescriptorProto file = 1;
}
message protogoogleprotobufFileDescriptorProto {
  optional string name = 1;
  optional string package = 2;
  repeated string dependency = 3;
  repeated int32 publicDependency = 10;
  repeated int32 weakDependency = 11;
  repeated protogoogleprotobufDescriptorProto messageType = 4;
  repeated protogoogleprotobufEnumDescriptorProto enumType = 5;
  repeated protogoogleprotobufServiceDescriptorProto service = 6;
  repeated protogoogleprotobufFieldDescriptorProto extension = 7;
  optional protogoogleprotobufFileOptions options = 8;
  optional protogoogleprotobufSourceCodeInfo sourceCodeInfo = 9;
  optional string syntax = 12;
}
message protogoogleprotobufDescriptorProto {
  optional string name = 1;
  repeated protogoogleprotobufFieldDescriptorProto field = 2;
  repeated protogoogleprotobufFieldDescriptorProto extension = 6;
  repeated protogoogleprotobufDescriptorProto nestedType = 3;
  repeated protogoogleprotobufEnumDescriptorProto enumType = 4;
  repeated protogoogleprotobufDescriptorProtoExtensionRange extensionRange = 5;
  repeated protogoogleprotobufOneofDescriptorProto oneofDecl = 8;
  optional protogoogleprotobufMessageOptions options = 7;
  repeated protogoogleprotobufDescriptorProtoReservedRange reservedRange = 9;
  repeated string reservedName = 10;
}
message protogoogleprotobufDescriptorProtoExtensionRange {
  optional int32 start = 1;
  optional int32 end = 2;
  optional protogoogleprotobufExtensionRangeOptions options = 3;
}
message protogoogleprotobufDescriptorProtoReservedRange {
  optional int32 start = 1;
  optional int32 end = 2;
}
message protogoogleprotobufExtensionRangeOptions {
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufFieldDescriptorProto {
  optional string name = 1;
  optional int32 number = 3;
  optional int32 label = 4;
  optional int32 type = 5;
  optional string typeName = 6;
  optional string extendee = 2;
  optional string defaultValue = 7;
  optional int32 oneofIndex = 9;
  optional string jsonName = 10;
  optional protogoogleprotobufFieldOptions options = 8;
  optional bool proto3Optional = 17;
}
message protogoogleprotobufOneofDescriptorProto {
  optional string name = 1;
  optional protogoogleprotobufOneofOptions options = 2;
}
message protogoogleprotobufEnumDescriptorProto {
  optional string name = 1;
  repeated protogoogleprotobufEnumValueDescriptorProto value = 2;
  optional protogoogleprotobufEnumOptions options = 3;
  repeated protogoogleprotobufEnumDescriptorProtoEnumReservedRange reservedRange = 4;
  repeated string reservedName = 5;
}
message protogoogleprotobufEnumDescriptorProtoEnumReservedRange {
  optional int32 start = 1;
  optional int32 end = 2;
}
message protogoogleprotobufEnumValueDescriptorProto {
  optional string name = 1;
  optional int32 number = 2;
  optional protogoogleprotobufEnumValueOptions options = 3;
}
message protogoogleprotobufServiceDescriptorProto {
  optional string name = 1;
  repeated protogoogleprotobufMethodDescriptorProto method = 2;
  optional protogoogleprotobufServiceOptions options = 3;
}
message protogoogleprotobufMethodDescriptorProto {
  optional string name = 1;
  optional string inputType = 2;
  optional string outputType = 3;
  optional protogoogleprotobufMethodOptions options = 4;
  optional bool clientStreaming = 5;
  optional bool serverStreaming = 6;
}
message protogoogleprotobufFileOptions {
  optional string javaPackage = 1;
  optional string javaOuterClassname = 8;
  optional bool javaMultipleFiles = 10;
  optional bool javaGenerateEqualsAndHash = 20;
  optional bool javaStringCheckUtf8 = 27;
  optional int32 optimizeFor = 9;
  optional string goPackage = 11;
  optional bool ccGenericServices = 16;
  optional bool javaGenericServices = 17;
  optional bool pyGenericServices = 18;
  optional bool phpGenericServices = 42;
  optional bool deprecated = 23;
  optional bool ccEnableArenas = 31;
  optional string objcClassPrefix = 36;
  optional string csharpNamespace = 37;
  optional string swiftPrefix = 39;
  optional string phpClassPrefix = 40;
  optional string phpNamespace = 41;
  optional string phpMetadataNamespace = 44;
  optional string rubyPackage = 45;
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufMessageOptions {
  optional bool messageSetWireFormat = 1;
  optional bool noStandardDescriptorAccessor = 2;
  optional bool deprecated = 3;
  optional bool mapEntry = 7;
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufFieldOptions {
  optional int32 ctype = 1;
  optional bool packed = 2;
  optional int32 jstype = 6;
  optional bool lazy = 5;
  optional bool deprecated = 3;
  optional bool weak = 10;
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufOneofOptions {
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufEnumOptions {
  optional bool allowAlias = 2;
  optional bool deprecated = 3;
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufEnumValueOptions {
  optional bool deprecated = 1;
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufServiceOptions {
  optional bool deprecated = 33;
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufMethodOptions {
  optional bool deprecated = 33;
  optional int32 idempotencyLevel = 34;
  repeated protogoogleprotobufUninterpretedOption uninterpretedOption = 999;
}
message protogoogleprotobufUninterpretedOption {
  repeated protogoogleprotobufUninterpretedOptionNamePart name = 2;
  optional string identifierValue = 3;
  optional uint64 positiveIntValue = 4;
  optional int64 negativeIntValue = 5;
  optional double doubleValue = 6;
  optional bytes stringValue = 7;
  optional string aggregateValue = 8;
}
message protogoogleprotobufUninterpretedOptionNamePart {
  optional string namePart = 1;
  optional bool isExtension = 2;
}
message protogoogleprotobufSourceCodeInfo {
  repeated protogoogleprotobufSourceCodeInfoLocation location = 1;
}
message protogoogleprotobufSourceCodeInfoLocation {
  repeated int32 path = 1;
  repeated int32 span = 2;
  optional string leadingComments = 3;
  optional string trailingComments = 4;
  repeated string leadingDetachedComments = 6;
}
message protogoogleprotobufGeneratedCodeInfo {
  repeated protogoogleprotobufGeneratedCodeInfoAnnotation annotation = 1;
}
message protogoogleprotobufGeneratedCodeInfoAnnotation {
  repeated int32 path = 1;
  optional string sourceFile = 2;
  optional int32 begin = 3;
  optional int32 end = 4;
}
message ImToastMessage {
  optional ImCommon common = 1;
  optional string content = 2;
}
message ImToolBarControlMessage {
  optional ImCommon common = 1;
  optional int32 eventType = 2;
  optional int32 groupId = 3;
  optional int32 componentType = 4;
  optional int32 opType = 5;
  optional string text = 6;
  optional string schemaUrl = 7;
  optional DataImage icon = 8;
  optional int64 showType = 9;
  optional string extra = 99;
}
message ImBubbleConfig {
  optional string content = 1;
  optional int64 duration = 2;
  optional DataText richText = 3;
  optional string schemeUrl = 4;
  optional ImFlexImageStruct backgroundImage = 5;
  optional DataImage arrowImage = 6;
}
message ImToolbarItemBehaviourParam {
  optional int32 behaviourType = 1;
  optional string values = 2;
}
message ImToolbarItemBehaviourParams {
  optional string key = 1;
  repeated ImToolbarItemBehaviourParam params = 2;
}
message ImToolbarItemMessage {
  optional ImCommon common = 1;
  optional int32 toolbarItemId = 2;
  optional int32 actionType = 3;
  optional ImBubbleConfig bubbleConfig = 4;
  map<string, string> extraMap = 5;
  optional int32 messageType = 6;
  optional ImToolbarItemBehaviourParams behaviourParams = 7;
}
message ImTopLeftBubbleMessage {
  optional ImCommon common = 1;
  optional ImCommonBubbleConfig bubbleConfig = 2;
  map<string, string> extraMap = 3;
}
message ImTurntableBurstMessage {
  optional ImCommon common = 1;
  optional int64 burstTimeRemainSeconds = 2;
  optional int64 multiple = 3;
  optional int64 propertyDefinitionId = 4;
  optional DataImage propertyIcon = 5;
}
message ImAppointmentNumberUpdateMessage {
  optional ImCommon common = 1;
  optional ImAppointmentNumberUpdateMessageData data = 2;
}
message ImAppointmentNumberUpdateMessageData {
  optional int64 currentnumber = 1;
  optional int64 anchoruid = 2;
}
message ImUpdateFanTicketMessage {
  optional ImCommon common = 1;
  optional string roomFanTicketCountText = 2;
  optional int64 roomFanTicketCount = 3;
  optional bool forceUpdate = 4;
}
message ImUploadCoverMessage {
  optional ImCommon common = 1;
  optional int64 msgType = 2;
  optional DataText title = 3;
  optional DataText content = 4;
  optional DataText tipsTitle = 5;
  optional string tipsUrl = 6;
}
message ImUpperRightWidgetDataMessage {
  optional ImCommon common = 1;
  repeated DataUpperRightWidgetData upperRightWidgetDataList = 2;
}
message ImUserPrivilegeChangeMessage {
  optional ImCommon common = 1;
  optional int32 userPrivilegeType = 2;
  optional int64 userId = 3;
  optional DataImage avatarBorder = 4;
  optional DataImage thumbAvatarBorder = 5;
}
message ImUserStatsMessage {
  optional ImCommon common = 1;
  optional string content = 2;
  optional int64 userId = 3;
  optional int64 actionType = 4;
}
message ImVerificationCodeMessage {
  optional ImCommon common = 1;
  optional int64 id = 2;
  optional int64 duration = 3;
}
message ImVIPInfoMessage {
  optional ImCommon common = 1;
  optional DataUserVIPInfo userVipInfo = 2;
  optional int64 action = 3;
}
message ImVIPSeatMessage {
  optional ImCommon common = 1;
  repeated DataUser topUsers = 2;
  optional int64 totalCount = 3;
}
message ImVsInteractiveMessage {
  optional ImCommon common = 1;
  optional string extra = 2;
}
message ImVSLinkRoomMessage {
  optional ImCommon common = 1;
  optional DataVSLinkInfo linkInfo = 2;
  optional bool allInfo = 3;
  optional int64 scatterTime = 4;
}
message ImVsPanelMessage {
  optional ImCommon common = 1;
  optional string extra = 2;
}
message ImWebcastBattleBonusMessage {
  optional ImCommon common = 1;
  optional ImWebcastBattleBonusMessageMvpMessage mvpInfo = 2;
  repeated ImWebcastBattleBonusMessagePlayerMessage playerList = 3;
}
message ImWebcastBattleBonusMessageMvpMessage {
  optional int64 userId = 1;
  optional string userName = 2;
  optional DataPropSummary propInfo = 3;
}
message ImWebcastBattleBonusMessagePlayerMessage {
  optional int64 userId = 1;
  optional string userName = 2;
  optional int64 diamondCount = 3;
}
message ImWebcastBattlePropertyMessage {
  optional ImCommon common = 1;
  repeated ImWebcastBattlePropertyMessageRoomPropDesc roomPropList = 2;
}
message ImWebcastBattlePropertyMessageRoomPropDesc {
  optional int64 roomId = 1;
  repeated DataPropSummary propDescList = 2;
}
message ImWebcastBattlePropertyMessageRoomPropDescPropertyDesc {
  optional DataPropSummary propInfo = 1;
  optional int64 startTime = 2;
  optional int64 duration = 3;
  optional int64 fromUserId = 4;
}
message ImInteractOpenAppStatusMessage {
  optional ImCommon common = 1;
  optional string appId = 2;
  optional int32 status = 3;
  optional string displayText = 4;
  optional string anchorText = 5;
}
message ImInteractOpenChatMessage {
  optional ImCommon common = 1;
  repeated ImInteractOpenChatMessageChatItem items = 2;
}
message ImInteractOpenChatMessageChatItem {
  repeated DataAppUserInfo appUserInfo = 1;
  optional string secNickName = 2;
  optional string secAvatarUrl = 3;
  optional string content = 4;
  optional int32 timestamp = 5;
}
message ImInteractOpenDiamondMessage {
  optional ImCommon common = 1;
  optional string appId = 2;
  optional int64 startId = 3;
  optional int32 diamonds = 4;
}
message ImInteractOpenFollowingMessage {
  optional ImCommon common = 1;
  repeated ImInteractOpenFollowingMessageFollowItem items = 2;
}
message ImInteractOpenFollowingMessageFollowItem {
  repeated DataAppUserInfo appUserInfo = 1;
  optional string secNickName = 2;
  optional string secAvatarUrl = 3;
  optional int32 action = 4;
  optional int32 timestamp = 5;
}
message ImPerformanceFinishMessage {
  optional ImCommon common = 1;
  optional string appId = 2;
  optional string taskId = 3;
}
message ImInteractOpenRewardMessage {
  optional ImCommon common = 1;
  optional string appId = 2;
  optional int64 startId = 3;
  optional int32 rewardId = 4;
  optional int32 rewardCount = 5;
  optional int32 rewardDiamonds = 6;
  optional string rewardName = 7;
}
message ImInteractScreenshotMessage {
  optional ImCommon common = 1;
  optional string appId = 2;
  optional int64 recallId = 3;
}
message ImInteractOpenViolationMessage {
  optional ImCommon common = 1;
  optional string roomId = 2;
  optional string appId = 3;
  optional int32 violationType = 4;
  optional string anchorTipsTitle = 5;
  optional string anchorTipsContent = 6;
  optional string audienceTipsTitle = 7;
  optional string audienceTipsContent = 8;
}
message ImWebcastPopularCardMessage {
  optional ImCommon common = 1;
  optional ImWebcastPopularCardMessagePopularCardInfo popularCardInfo = 2;
}
message ImWebcastPopularCardMessagePopularCardInfo {
  optional int32 status = 1;
  optional int64 startTime = 2;
  optional int64 endTime = 3;
  optional int32 enterNumber = 4;
}
message ImWelfareProjectOperateMessage {
  optional ImCommon common = 1;
  optional int64 opType = 2;
  optional DataWelfareProjectInfo project = 3;
}
message ImWishFinishMessage {
  optional ImCommon common = 1;
  optional DataImage gestureImageSingle = 2;
  optional DataImage gestureImageDouble = 3;
  optional int64 displaySeconds = 4;
  optional int64 effectId = 5;
}
message ImVideoLiveGoodsRcmdMessage {
  optional ImCommon common = 1;
  optional int64 rcmdGoodsId = 2;
}
message ImVideoLiveCouponRcmdMessage {
  optional ImCommon common = 1;
  optional int64 rcmdCouponId = 2;
}
message ImVideoLiveGoodsOrderMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional ImVideoLiveGoodsOrderMessageGoodsOrder goodsOrder = 3;
}
message ImVideoLiveGoodsOrderMessageGoodsOrder {
  optional int64 goodsRoomOrder = 1;
  optional int64 orderNum = 2;
  optional int64 orderMoney = 3;
  optional string orderId = 4;
}
message ImLinkMicAudienceKtvMessage {
  optional ImCommon common = 1;
  optional int64 messageType = 2;
  repeated ImLinkMicAudienceKtvMessageListInfo listInfo = 3;
  optional int64 wantSingCount = 4;
  optional int64 wantSingSongThreshold = 5;
}
message ImLinkMicAudienceKtvMessageListInfo {
  optional DataKtvSongStruct music = 1;
  optional bool isSelfSeeing = 2;
}
message ImLinkmicProfitMessage {
  optional ImCommon common = 1;
  optional int32 msgType = 2;
  optional ImLinkmicProfitBidPaidLinkmicBidContent bidPaidLinkmicBidContent = 21;
  optional ImLinkmicProfitBidPaidLinkmicDealContent bidPaidLinkmicDealContent = 22;
  optional ImLinkmicProfitBidPaidLinkmicAbortContent bidPaidLinkmicAbortContent = 23;
  optional ImLinkmicProfitBidPaidLinkmicStartContent bidPaidLinkmicStartContent = 24;
  optional ImLinkmicProfitBidPaidLinkmicTerminateContent bidPaidLinkmicTerminateContent = 25;
  optional ImLinkmicProfitNormalPaidLinkmicOpenContent normalPaidLinkmicOpenContent = 26;
  optional ImLinkmicProfitNormalPaidLinkmicCloseContent normalPaidLinkmicCloseContent = 27;
  optional ImLinkmicProfitNormalPaidLinkmicConfigUpdateContent normalPaidLinkmicConfigUpdateContent = 28;
  optional ImLinkmicProfitBidPaidLinkmicTurnOnContent bidPaidLinkmicTurnOnContent = 29;
  optional ImLinkmicProfitBidPaidLinkmicTurnOffContent bidPaidLinkmicTurnOffContent = 30;
  optional ImLinkmicRoomBattleInviteContent roomBattleInviteContent = 31;
  optional ImLinkmicRoomBattleReplyContent roomBattleReplyContent = 32;
  optional ImLinkmicProfitNormalPaidLinkmicAddPriceContent normalPaidLinkmicAddPriceContent = 33;
}
message ImLinkmicProfitBidPaidLinkmicBidContent {
  optional DataBidPaidLinkmicBidInfo bidInfo = 1;
  repeated DataBidPaidLinkmicBidRecord bidRecords = 2;
  optional bool hasMore = 3;
}
message ImLinkmicProfitBidPaidLinkmicDealContent {
  optional DataBidPaidLinkmicDealInfo dealInfo = 1;
  repeated DataLinkmicPositionItem positions = 2;
}
message ImLinkmicProfitBidPaidLinkmicStartContent {
  optional string startToast = 1;
  repeated DataLinkmicPositionItem positions = 2;
  optional bool waitingUserNeedLeave = 3;
  optional string waitingUserToast = 4;
}
message ImLinkmicProfitBidPaidLinkmicAbortContent {
  optional int64 winUserId = 1;
  optional string anchorToast = 2;
  optional string winUserToast = 3;
  optional string otherBidUsersToast = 4;
}
message ImLinkmicProfitBidPaidLinkmicTerminateContent {
  optional string bidUserToast = 1;
  optional string otherBidUsersToast = 2;
}
message ImLinkmicProfitNormalPaidLinkmicOpenContent {
  optional DataNormalPaidLinkmicInfo normalPaidLinkmicInfo = 1;
  optional bool waitingUserNeedLeave = 2;
  optional string waitingUserToast = 3;
  optional int32 source = 4;
}
message ImLinkmicProfitNormalPaidLinkmicCloseContent {
  optional bool waitingUserNeedLeave = 1;
  optional string waitingUserToast = 2;
}
message ImLinkmicProfitNormalPaidLinkmicConfigUpdateContent {
  optional bool waitingUserNeedLeave = 1;
  optional string waitingUserToast = 2;
  optional DataNormalPaidLinkmicInfo normalPaidLinkmicInfo = 3;
}
message ImLinkmicProfitNormalPaidLinkmicAddPriceContent {
  optional int64 addPriceUserId = 1;
  optional int64 addPriceValue = 2;
  optional DataText text = 3;
}
message ImLinkmicProfitBidPaidLinkmicTurnOnContent {
  optional DataBidPaidLinkmicContent bidPaidLinkmicInfo = 1;
  optional string prompts = 2;
  optional bool waitingUserNeedLeave = 3;
  optional string waitingUserToast = 4;
}
message ImLinkmicProfitBidPaidLinkmicTurnOffContent {
  optional string prompts = 1;
}
message ImLinkmicRoomBattleInviteContent {
  optional DataUser inviter = 1;
  optional DataInviteRoomInfo roomInfo = 2;
  optional int32 startType = 3;
  optional string inviteTips = 4;
}
message ImLinkmicRoomBattleReplyContent {
  optional int32 replyType = 1;
  optional int32 startType = 2;
  optional int64 inviteeRoomId = 3;
  optional int64 inviteeAnchorId = 4;
  optional int64 followStatus = 5;
  optional int64 replyUserId = 6;
  optional string replyToast = 7;
  optional int32 replyOperate = 8;
}
message ImLinkmicReviewMessage {
  optional ImCommon common = 1;
  optional int32 msgType = 2;
  optional ImLinkmicReviewNormalPaidDescContent normalPaidDescContent = 21;
}
message ImLinkmicReviewNormalPaidDescContent {
  optional int32 status = 1;
  optional string toast = 2;
}
message ImLinkmicTeamfightMessage {
  optional ImCommon common = 1;
  optional int32 msgType = 2;
  optional DataLinkmicTeamfightInfo teamfightInfo = 3;
  optional ImLinkmicTeamfightFinishContent finishContent = 100;
  optional ImLinkmicTeamfightCreateContent createContent = 101;
  optional ImLinkmicTeamfightSettleContent settleContent = 102;
}
message ImLinkmicTeamfightFinishContent {
  optional string finishToast = 1;
  optional string guestFinishToast = 2;
  optional int32 reason = 3;
  optional int64 finishRoomId = 4;
}
message ImLinkmicTeamfightCreateContent {
  optional int32 reason = 3;
}
message ImLinkmicTeamfightSettleContent {
  optional string disableShowToast = 1;
}
message ImLinkmicTeamfightScoreMessage {
  optional ImCommon common = 1;
  optional DataLinkmicTeamfightInfo teamfightInfo = 2;
  optional DataLinkmicQuickInteract quickInteract = 3;
}
message DataRoomChannelInfo {
  optional int64 channelId = 1;
  optional string token = 2;
  optional bool isOwner = 3;
  optional int64 memberCount = 4;
  repeated DataUser topUser = 5;
  optional string channelName = 6;
  optional int32 roomChannelMode = 7;
  optional DataUser needApprovalUser = 8;
  optional DataUser owner = 9;
  optional int64 maxMemberCount = 10;
  optional DataRtcExtInfo rtcExtInfo = 200;
}
message DataRtcExtInfo {
  optional string linkMicIdStr = 1;
  optional string rtcExtInfo = 2;
  optional string liveCoreExrInfo = 3;
  optional string rtcStrategy = 4;
  optional string publicStreamId = 5;
}
message DataVsEpisodeHighLight {
  optional int64 location = 1;
  optional string description = 2;
  optional DataImage image = 3;
}
message DataEpisodePremierePlay {
  repeated DataVsEpisodeHighLight highlights = 1;
  optional int32 playType = 2;
  optional int64 startTime = 3;
}
message DataVSWatermark {
  optional int64 position = 1;
  optional int64 landscapeDis = 2;
  optional int64 verticalDis = 3;
  repeated DataVSWatermarkIcon watermarkIcon = 4;
}
message DataVSWatermarkIcon {
  optional DataImage icon = 1;
  optional int64 iconWidth = 2;
  optional int64 iconType = 3;
  optional int64 landscapeDis = 4;
  optional int64 verticalDis = 5;
}
message DataVSBar {
  optional DataVSItemBar itemComment = 1;
  optional DataVSItemBar itemBar = 2;
}
message DataVSItemComment {
  optional DataImage itemCommentIconDark = 1;
  optional DataImage itemCommentIconLight = 2;
}
message DataVSItemBar {
  optional DataImage iconDark = 1;
  optional DataImage iconLight = 2;
  optional string title = 3;
  optional string seperator = 4;
  optional string detail = 5;
  optional int64 watchInfoPv = 6;
  optional string watchInfoHeat = 7;
  optional int64 collectionId = 8;
  optional int32 tabId = 9;
}
message DataEpisodePreviewImage {
  optional DataImage previewUriUp = 1;
  optional DataImage previewUriDown = 2;
  optional int32 previewType = 3;
  optional string previewWordUp = 4;
  optional string previewWordDown = 5;
}
message DataVSGiftPannel {
  repeated string backgroundColors = 1;
  optional DataImage background = 2;
  optional DataImage selected = 3;
}
message DataEpisodePreviewBottom {
  optional string watchPeriodStr = 1;
  optional string latestPeriodStr = 2;
}
message DataVSPannelIcon {
  optional DataImage spLandscapeIcon = 1;
  optional DataImage spVerticalIcon = 2;
  optional DataImage landscapeVerticalSwitchIcon = 3;
  optional DataImage lockScreenIcon = 4;
  optional DataImage landscapeMoreIcon = 9;
  optional DataImage verticalMoreIcon = 10;
  optional DataImage landscapeCommentIcon = 11;
  optional DataImage verticalCommentIcon = 12;
  optional DataImage verticalLandscapeSwitchIcon = 13;
  optional DataImage verticalLockScreenIcon = 14;
}
message DataMultiCameraBasicInfo {
  optional DataImage icon = 1;
  optional string iconBackgroundColor = 2;
  optional string panelBackgroundColor = 3;
  optional DataImage iconPad = 4;
  optional bool banXgs = 5;
}
message DataCollectionItem {
  optional string collectionId = 1;
  optional int32 collectionType = 2;
  optional string title = 3;
  optional DataImage coverImg = 4;
  optional string originalVid = 5;
  optional string videoDuration = 6;
  optional string collectionTiming = 7;
  optional string tmplVid = 8;
  repeated int32 reflowTagList = 10;
  optional string roomId = 11;
  optional int32 collectionSource = 12;
  optional string originalVidUrl = 13;
  optional int32 collectionTag = 14;
  optional string episodeId = 15;
  optional string shareInfo = 16;
  optional int64 createTime = 17;
}
message DataShareInfo {
  optional string effectPanel = 100;
  optional string effectCategory = 101;
  optional string effectId = 102;
  optional string enterFrom = 103;
  optional string title1 = 104;
  optional string title2 = 105;
  optional string itemId = 106;
  repeated string backgroundImageUrlList = 107;
  optional bool useGradientBackground = 108;
  repeated string urlList = 109;
  repeated string videoVidList = 110;
  optional float duration = 111;
  optional float width = 112;
  optional float height = 113;
  optional float fps = 114;
  optional float bitrate = 115;
  optional string currentPlayingUrlKey = 116;
  optional string musicId = 117;
  optional string jumpUrl = 118;
  map<string, string> jumpParamsMap = 119;
  map<string, string> extraInfoMap = 120;
  optional string landingStrategy = 121;
  optional string shareFromType = 122;
  optional string shareFromKey = 123;
  optional string anchor = 124;
  optional string hashTagStickerConfigs = 125;
}
message DataSharePosterInfo {
  optional DataSharePosterInfoPosterData data = 1;
}
message DataSharePosterInfoPosterData {
  repeated DataImage poster = 1;
  repeated DataImage decorator = 2;
}
message DataPlayByPlayItemInfo {
  optional int64 timestamp = 1;
  optional int64 playerId = 2;
  optional int64 refPlayerId = 3;
  optional int32 incidentType = 4;
  optional double elapsed = 5;
  optional double elapsedPlus = 6;
  optional string playerName = 7;
  optional string refPlayerName = 8;
  optional string playerIdStr = 9;
  optional string refPlayerIdStr = 10;
  optional int64 startTimePts = 11;
  optional int64 endTimePts = 12;
  optional int64 startTimeSei = 13;
  optional int64 endTimeSei = 14;
}
message DataPlayByPlayInfo {
  optional int64 matchId = 1;
  repeated DataPlayByPlayItemInfo eventList = 2;
}
message DataPlayerInfo {
  optional int64 id = 1;
  optional string name = 2;
  optional int32 shirt = 3;
  optional string position = 4;
  optional int32 lineupType = 5;
  optional DataImage portrait = 6;
  optional DataPlayByPlayItemInfo lastEvent = 7;
  optional double xAxis = 8;
  optional double yAxis = 9;
  optional int32 positionNum = 10;
  optional double playingTime = 11;
  optional DataPlayerStats playerStats = 12;
  optional string playerIdStr = 13;
  optional DataPlayByPlayItemInfo lastUpEvent = 14;
  repeated DataPlayByPlayItemInfo eventList = 15;
  optional int32 age = 16;
  optional double worth = 17;
  optional string clubName = 18;
  optional bool superstarFlag = 19;
  optional DataImage superstarImg = 20;
  optional string superstarName = 21;
  optional string superstarDesc = 22;
}
message DataGoalStageDetail {
  optional string firstHalfGoal = 1;
  optional string secondHalfGoal = 2;
  optional string overtime = 3;
  optional string shots = 4;
  optional string total = 5;
}
message DataAgainst {
  optional string leftName = 1;
  optional DataImage leftLogo = 2;
  optional string leftGoal = 3;
  repeated DataPlayerInfo leftPlayers = 4;
  optional DataGoalStageDetail leftGoalStageDetail = 5;
  optional string rightName = 6;
  optional DataImage rightLogo = 7;
  optional string rightGoal = 8;
  repeated DataPlayerInfo rightPlayers = 9;
  optional DataGoalStageDetail rightGoalStageDetail = 10;
  optional int64 timestamp = 11;
  optional int64 version = 12;
  optional int64 leftTeamId = 13;
  optional int64 rightTeamId = 14;
  optional int64 diffSei2absSecond = 15;
}
message DataToutiaoMatchData {
  optional int64 matchId = 1;
  optional string matchTitle = 2;
  optional DataAgainst against = 3;
  optional string startedTime = 4;
  optional string city = 5;
  optional string venueName = 6;
  optional string referee = 7;
  optional DataTeamStats teamStats = 8;
  repeated DataPlayerStats playerStats = 9;
  optional string matchGroup = 10;
  optional string matchRound = 11;
  optional string matchPhaseName = 12;
  optional bool canSubscribe = 13;
  optional int32 displayStatus = 14;
  optional string bjtFormat = 15;
  optional string localTimeFormat = 16;
  optional int32 liveStatus = 17;
  optional int32 matchStatus = 18;
  optional string matchIdStr = 19;
  optional int64 startedTimeUnix = 20;
}
message DataTeamStats {
  optional int64 teamId = 1;
  optional double possession = 2;
  optional double shotOn = 3;
  optional double shotOff = 4;
  optional double freeKick = 5;
  optional double corner = 6;
  optional double counter = 7;
  optional double saves = 8;
  optional double offside = 9;
  optional double foulCommit = 10;
  optional double yellowCards = 11;
  optional double redcards = 12;
  optional double pass = 13;
  optional double keyPass = 14;
  optional double passesCompleted = 15;
  optional double steal = 16;
  optional double intercept = 17;
  optional double shots = 18;
  optional double possessionFiveMin = 19;
}
message DataPlayerStats {
  optional int64 playerId = 1;
  optional int64 teamId = 2;
  optional double minutesPlayed = 3;
  optional double goals = 4;
  optional double assists = 5;
  optional double shots = 6;
  optional double shotsOn = 7;
  optional double yCards = 8;
  optional double rCards = 9;
  optional double offsides = 10;
  optional double foulsCommitted = 11;
  optional double ownGoals = 12;
  optional double saves = 13;
  optional double caughtBall = 14;
  optional double cleanSheets = 15;
}
message DataMatchShareBackground {
  optional DataImage verticalImg = 1;
  optional DataImage horizontalImg = 2;
}
message DataMatchTitle {
  optional string roomTitle = 1;
  optional DataMatchTitleTitleIcon titleIcon = 2;
}
message DataMatchTitleTitleIcon {
  optional string url = 1;
  optional int32 sizeType = 2;
}
message DataMatchTab {
  optional string title = 1;
  optional string schema = 2;
  optional int64 id = 3;
}
message DataMatchDrawer {
  optional string entryName = 1;
  optional DataImage entryIcon = 2;
  optional string drawerTitle = 3;
  optional DataImage drawerBackground = 4;
  optional string returnBtnText = 5;
}
message DataTeamBaseInfo {
  optional string teamName = 1;
  optional DataImage teamFlagUrl = 2;
  optional string teamColor = 3;
  optional int64 teamId = 4;
  optional string teamIdStr = 5;
}
message ImMatchAgainstScoreMessage {
  optional ImCommon common = 1;
  optional DataAgainst against = 2;
  optional int32 matchStatus = 3;
  optional int32 displayStatus = 4;
}
message ImMatchCollectionMessage {
  optional ImCommon common = 1;
  optional DataCollectionItem collectionItem = 2;
}
message ImMatchHighLightPointMessage {
  optional ImCommon common = 1;
  repeated DataEpisodeHighLight points = 2;
}
message ImMatchHostChangeMessage {
  optional ImCommon common = 1;
  optional int64 teamId = 2;
  optional string teamName = 3;
  optional string schemaUrl = 4;
  optional DataImage teamIcon = 5;
  optional DataImage teamBadge = 6;
  optional DataImage teamBackground = 7;
  optional string systemMsg = 8;
}
message ImMatchHotMessage {
  optional ImCommon common = 1;
  optional int32 msgType = 2;
  optional string content = 3;
  optional int64 count = 4;
  optional int64 sequenceId = 5;
  optional int32 group = 6;
  optional int64 iconindex = 7;
  optional int64 triggertimestamp = 8;
}
message ImVideoSize {
  optional int32 height = 1;
  optional int32 width = 2;
}
message ImAvatar {
  optional string urlBig = 1;
  optional string urlMid = 2;
  optional string urlSmall = 3;
}
message ImTeam {
  optional string teamName = 1;
  optional string countryCode = 2;
  optional int32 score = 3;
  optional string flag = 4;
  optional string teamId = 5;
}
message ImVenueInfo {
  optional int32 stage = 1;
  optional int64 targetTime = 2;
  optional int64 currentTime = 3;
  optional string roomId = 4;
  optional int64 pollingInterval = 5;
  optional int64 updateTime = 6;
  optional int64 distributeTime = 7;
}
message ImVideoCard {
  optional int32 cardType = 1;
  optional string coverUrl = 2;
  optional string schema = 3;
  optional string title = 4;
  optional string subTitle = 5;
  optional string uid = 6;
  optional string rid = 7;
  optional string epid = 8;
  optional string tag = 9;
  optional string creatorId = 10;
  optional ImVideoSize size = 11;
  optional string backgroundUrl = 12;
  optional string cardId = 13;
  optional string videoResource = 14;
  optional int32 linkType = 15;
}
message ImMatchCard {
  optional int32 matchType = 1;
  optional int32 status = 2;
  optional string title = 3;
  optional string description = 4;
  optional string startTime = 5;
  optional string uid = 6;
  optional ImTeam teamLeft = 7;
  optional ImTeam teamRight = 8;
  optional bool reserved = 9;
  optional string schema = 10;
  optional string epid = 11;
  optional string reservationId = 12;
  optional string cardId = 13;
  optional string roomId = 14;
  optional string matchId = 15;
}
message ImProfile {
  optional int32 status = 1;
  optional ImAvatar avatarUrl = 2;
  optional string nickName = 3;
  optional string description = 4;
  optional bool followed = 5;
  optional int64 startTime = 6;
  optional string roomId = 7;
  optional string uid = 8;
  optional string reservationId = 9;
  optional string cardId = 10;
  optional int64 followCount = 12;
  optional int32 color = 13;
  optional int64 srcId = 14;
}
message ImStarProfile {
  optional int32 status = 1;
  optional ImAvatar avatarUrl = 2;
  optional string nickName = 3;
  optional string description = 4;
  optional bool followed = 5;
  optional string roomId = 6;
  optional string uid = 7;
  optional int64 startTime = 8;
  optional string reservationId = 9;
  optional string cardId = 10;
  optional int64 followCount = 11;
  optional int32 color = 12;
}
message ImHotVideoCard {
  optional string title = 1;
  optional string coverUrl = 2;
  optional string schema = 3;
  optional string cardId = 4;
  optional string subTitle = 5;
}
message ImVideoCardModule {
  optional int64 moduleId = 1;
  optional int64 moduleVersion = 2;
  optional int32 updateType = 3;
  repeated ImVideoCard updateList = 4;
  repeated string deleteList = 5;
}
message ImMatchReservationModule {
  optional int64 moduleId = 1;
  optional int64 moduleVersion = 2;
  optional int32 updateType = 3;
  repeated ImMatchCard updateList = 4;
  repeated string deleteList = 5;
}
message ImFootballTalkingModule {
  optional int64 moduleId = 1;
  optional int64 moduleVersion = 2;
  optional int32 updateType = 3;
  repeated ImProfile updateList = 4;
  repeated string deleteList = 5;
}
message ImPopularStarModule {
  optional int64 moduleId = 1;
  optional int64 moduleVersion = 2;
  optional int32 updateType = 3;
  repeated ImStarProfile updateList = 4;
  repeated string deleteList = 5;
}
message ImHotLiveModule {
  optional int64 moduleId = 1;
  optional int64 moduleVersion = 2;
  optional int32 updateType = 3;
  repeated ImHotVideoCard updateList = 4;
  repeated string deleteList = 5;
}
message ImMatchVenueMessage {
  optional ImVideoCardModule videoCard = 1;
  optional ImMatchReservationModule matchReservation = 2;
  optional ImFootballTalkingModule footballTalking = 3;
  optional ImPopularStarModule popularStar = 4;
  optional ImHotLiveModule hotLive = 5;
  optional ImVenueInfo venueInfo = 6;
  optional ImMatchReservationModule teamReservation = 7;
  optional ImCommon common = 8;
}
message ImProfitGameMessage {
  optional ImCommon common = 1;
  optional int64 gameId = 2;
  optional bytes frames = 3;
}
message ImProfitInteractionScoreAnchorInfo {
  optional string score = 1;
  optional DataProfitInteractionSetting interactionSetting = 2;
  optional bool reachScoreDisplayThreshold = 3;
}
message ImProfitInteractionScoreMessage {
  optional ImCommon common = 1;
  map<int64, ImProfitInteractionScoreAnchorInfo> anchorInfosMap = 2;
  optional int32 interactionScoreStatus = 3;
  optional int64 channelId = 4;
  optional int64 startTime = 5;
  optional int32 interactionScoreAction = 6;
  optional string extra = 7;
}
message ImRanklistHourEntranceMessage {
  optional ImCommon common = 1;
  optional DataRanklistHourEntrance info = 2;
}
message ImRoomChannelAccessMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional DataUser inviter = 3;
}
message ImRoomChannelAssetMessage {
  optional ImCommon common = 1;
  optional int64 assetId = 2;
}
message ImRoomChannelChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional string content = 3;
  optional DataText rtfContent = 4;
}
message ImRoomChannelEmojiChatMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 emojiId = 3;
  optional DataText emojiContent = 4;
  optional string defaultContent = 5;
}
message ImRoomChannelDisbandMessage {
  optional ImCommon common = 1;
  optional string toast = 2;
}
message ImRoomChannelKickOutMessage {
  optional ImCommon common = 1;
  optional string toast = 2;
  repeated DataRoomChannelInfo onlineChannelList = 3;
}
message ImReplyRoomChannelMessage {
  optional ImCommon common = 1;
  optional bool permit = 2;
  optional DataRoomChannelInfo channelInfo = 3;
  optional string toast = 4;
}
message ImRoomChannelStateMessage {
  optional ImCommon common = 1;
  optional int64 memberCount = 2;
  repeated DataUser topUserList = 3;
  optional string channelName = 4;
  optional DataUser needApprovalUser = 5;
  optional DataUser owner = 6;
}
message ImRoomChannelSystemMessage {
  optional ImCommon common = 1;
}
message ImRoomChannelRoleMessage {
  optional ImCommon common = 1;
  optional int32 newRole = 2;
}
message ImRoomRankMessage {
  optional ImCommon common = 1;
  repeated ImRoomRankMessageRoomRank ranks = 2;
}
message ImRoomRankMessageRoomRank {
  optional DataUser user = 1;
  optional string scoreStr = 2;
  optional bool profileHidden = 3;
}
message ImRoomUserSeqMessage {
  optional ImCommon common = 1;
  repeated ImRoomUserSeqMessageContributor ranks = 2;
  optional int64 total = 3;
  optional string popStr = 4;
  repeated ImRoomUserSeqMessageContributor seats = 5;
  optional int64 popularity = 6;
  optional int64 totalUser = 7;
  optional string totalUserStr = 8;
  optional string totalStr = 9;
  optional string onlineUserForAnchor = 10;
  optional string totalPvForAnchor = 11;
  optional string upRightStatsStr = 12;
  optional string upRightStatsStrComplete = 13;
}
message ImRoomUserSeqMessageContributor {
  optional int64 score = 1;
  optional DataUser user = 2;
  optional int64 rank = 3;
  optional int64 delta = 4;
  optional bool isHidden = 5;
  optional string scoreDescription = 6;
  optional string exactlyScore = 7;
}
message ImSharePosterMessage {
  optional ImCommon common = 1;
  optional ImSharePosterMessagePosterData data = 2;
}
message ImSharePosterMessagePosterData {
  repeated DataImage poster = 1;
  repeated DataImage decorator = 2;
}
message ImShowDouPlusNotifyMessage {
  optional ImCommon common = 1;
  optional int32 eventType = 2;
  optional int64 orderId = 10;
  optional string orderWishWord = 11;
  optional int64 enterCount = 30;
}
message ImSkyEyeAnchorSetMessage {
  optional ImCommon common = 1;
  optional DataImage titleImage = 2;
  optional string title = 3;
  optional string topTip = 4;
  optional string bottomTip = 5;
}
message ImSportsQuizOption {
  optional int64 optionId = 1;
  optional string optionDesc = 2;
  optional int64 betAmount = 3;
  optional string betAmountStr = 4;
  optional double rate = 5;
  optional string rateStr = 6;
}
message ImSportsQuiz {
  optional int64 quizId = 1;
  optional string title = 2;
  optional int32 type = 3;
  optional int32 quizStatus = 4;
  optional int64 totalReward = 5;
  repeated ImSportsQuizOption options = 6;
  optional int64 winOption = 7;
  optional int64 endTime = 8;
  optional int64 betGoldBall = 9;
  optional int64 selectedOption = 10;
  optional int64 bonus = 11;
}
message ImSportsQuizMessage {
  optional ImCommon common = 1;
  optional string matchId = 2;
  optional int32 quizMsgType = 3;
  repeated ImSportsQuiz quiz = 4;
}
message ImUnionGeneralMessage {
  optional ImCommon common = 1;
  repeated int32 payload = 2;
  optional int64 timestamp = 3;
  optional int64 authType = 4;
}
message ImVideoShareMessage {
  optional ImCommon common = 1;
  optional DataUser user = 2;
  optional int64 itemId = 3;
  optional string itemIdStr = 4;
  optional int64 itemType = 5;
  optional string itemTypeStr = 6;
  optional string title = 7;
  optional int64 authorId = 8;
}
message ImFreshmanSupportMessage {
  optional ImCommon common = 1;
  optional int64 number = 2;
  optional int64 status = 3;
  optional string icon = 4;
}
message protopushprotoPushHeader {
  optional string key = 1;
  optional string value = 2;
}
message protopushprotoPushFrame {
  optional uint64 seqid = 1;
  optional uint64 logid = 2;
  optional uint64 service = 3;
  optional uint64 method = 4;
  repeated protopushprotoPushHeader headers = 5;
  optional string payloadEncoding = 6;
  optional string payloadType = 7;
  optional bytes payload = 8;
}
message ImResponse {
  repeated ImMessage messages = 1;
  optional string cursor = 2;
  optional int64 fetchInterval = 3;
  optional int64 now = 4;
  optional string internalExt = 5;
  optional int32 fetchType = 6;
  map<string, string> routeParamsMap = 7;
  optional int64 heartbeatDuration = 8;
  optional bool needAck = 9;
  optional string pushServer = 10;
  optional string liveCursor = 11;
  optional bool historyNoMore = 12;
}
message ImMessage {
  optional string method = 1;
  optional bytes payload = 2;
  optional int64 msgId = 3;
  optional int32 msgType = 4;
  optional int64 offset = 5;
  optional bool needWrdsStore = 6;
  optional int64 wrdsVersion = 7;
}
message protogoogleprotobufAny {
  optional string typeUrl = 1;
  optional bytes value = 2;
}
message DataPriceInfo {
  repeated DataStandardMoney pricelist = 1;
}
message DataItemDetail {
  optional int32 ordertype = 1;
  optional int32 itemtype = 2;
  optional string itemid = 3;
  optional string itemsku = 4;
  optional string itemtitle = 5;
  optional string itemiconuri = 6;
  optional string description = 7;
  optional string isforbidrefund = 8;
  optional int64 refundstarttime = 9;
  optional int64 refundendtime = 10;
  optional int64 salerefundstarttime = 11;
  optional int64 salerefundendtime = 12;
  optional int64 validity = 13;
  optional int64 validstarttime = 14;
  optional int64 validendtime = 15;
  optional int32 status = 16;
  optional string extra = 17;
  map<int32, DataPriceInfo> platformpricelistMap = 18;
  optional DataMarkDetail markinfo = 19;
  optional DataImage itemicon = 20;
  optional int64 itemsaletype = 21;
}
message DataMarkDetail {
  repeated string itemMarkListV1 = 1;
  repeated string itemMarkListV2 = 2;
}
message DataLikeIconInfo {
  repeated DataImage icons = 1;
}
message DataChatEmojiGuideInfo {
  repeated DataChatEmojiGuideInfoEmojiGuideConf emojis = 1;
}
message DataChatEmojiGuideInfoEmojiGuideConf {
  optional string emoji = 1;
  repeated string triggerWords = 2;
  optional int64 beginTime = 10;
  optional int64 endTime = 11;
}
message DataChatImageGuideInfo {
  repeated DataChatImageGuideInfoImageGuideConf images = 1;
}
message DataChatImageGuideInfoImageGuideConf {
  optional string imageId = 1;
  optional DataImage image = 2;
  optional string text = 3;
  repeated string triggerWords = 4;
  optional int64 beginTime = 10;
  optional int64 endTime = 11;
}
message DataMatchChatInfo {
  optional DataImage mainGroupIcon = 1;
  optional DataImage mainGroupBackground = 2;
  optional DataImage guestGroupIcon = 3;
  optional DataImage guestGroupBackground = 4;
  repeated DataImage aggregateIcon = 5;
}
message DataSelfDisciplineUserBase {
  optional int64 id = 1;
  optional string nickname = 2;
  optional DataImage avatarThumb = 3;
  optional DataSelfDisciplineUserBaseFollowInfo followInfo = 4;
  optional int32 secret = 5;
  optional string secUid = 6;
  optional int32 mysteryman = 7;
}
message DataSelfDisciplineUserBaseFollowInfo {
  optional int64 followStatus = 1;
  optional string remarkName = 2;
}
message DataLotteryUserCondition {
  optional bool isWatching = 1;
  optional bool hasCommand = 2;
  optional bool hasFollow = 3;
  optional bool isFansclubMember = 4;
  optional bool hasGift = 5;
  optional int64 fansLevel = 6;
  optional bool fansclubStatusActive = 7;
  optional bool hasShared = 8;
  optional bool hasHelpWish = 9;
  optional bool hasActivated = 10;
  optional bool isSubscribeMember = 11;
}
message DataCandidateUser {
  optional int64 userId = 1;
  optional string userName = 2;
  optional string avatarUrl = 3;
  optional string secUserId = 4;
}
message DataLotteryDefaultConfig {
  optional int64 countDown = 1;
  optional int64 userNum = 2;
  optional int64 prizeCount = 3;
  optional int64 giftId = 4;
  optional int64 giftCount = 5;
  optional int64 isFirstLottery = 6;
  optional string command = 7;
  optional string prizeName = 8;
  repeated int32 conditionTypes = 9;
  optional int64 prizeAverage = 10;
  optional string prizeDescription = 11;
  optional int64 minFansLevel = 12;
  optional string phoneNum = 13;
}
message DataGiftInfo {
  optional int64 giftId = 1;
  optional string giftName = 2;
  optional string giftImgUrl = 3;
  optional int64 diamondCount = 4;
}
message DataLotteryConfig {
  repeated int64 countDowns = 3;
  repeated int64 userNums = 1;
  repeated int64 prizeCounts = 2;
  optional DataLotteryDefaultConfig defaultConfig = 4;
  optional int32 prizeType = 5;
  optional string prizeName = 6;
  repeated int32 userConditionTypes = 7;
  repeated int32 lotteryConditionTypes = 8;
  repeated DataGiftInfo giftInfoList = 9;
  repeated int64 giftCounts = 10;
  repeated int64 whiteList = 11;
  repeated int64 blackList = 12;
  optional int64 enable = 13;
  repeated int64 prizeAverages = 14;
  optional int64 lotteryConfigType = 15;
  optional string prizeDescription = 16;
  repeated DataLotteryFansLevelConfig fansLevelConfigList = 17;
  optional int64 accountScores = 18;
  optional int64 needRechargeAmount = 19;
  optional bool rechargeSwitch = 20;
  repeated DataLotteryExpandActivityInfo expandActivityInfoList = 21;
}
message DataLotteryRewardDetail {
  optional int64 prizeType = 1;
  optional string prizeName = 2;
  optional int64 grantCount = 3;
  optional int64 expireTime = 4;
}
message DataLotteryExpandActivityInfo {
  optional int64 bizId = 1;
  optional string expandActivityId = 2;
  optional string ruleText = 3;
  optional string tipsText = 4;
  optional int64 expandLuckyCount = 5;
  optional int64 expandGrantCount = 6;
  map<string, string> extraMap = 7;
}
message DataExpandLotteryConfig {
  optional int64 expandPrizeType = 1;
}
message DataLotteryFansLevelConfig {
  optional int64 level = 1;
  optional int64 dailyLimit = 2;
  optional int64 dailySendNum = 3;
}
message DataLotteryInfo {
  optional int64 lotteryId = 1;
  optional int64 ownerUserId = 2;
  optional int64 anchorId = 3;
  optional int32 ownerType = 4;
  optional int64 roomId = 5;
  optional int32 status = 6;
  optional DataLotteryPrize prizeInfo = 7;
  repeated DataLotteryCondition conditions = 8;
  optional int64 prizeCount = 9;
  optional int64 luckyCount = 10;
  optional int64 countDown = 11;
  optional int64 startTime = 12;
  optional int64 drawTime = 13;
  optional string extra = 14;
  optional int64 realLuckyCount = 15;
  optional int64 totalGrantCount = 16;
  optional int64 withdrawCount = 17;
  optional int64 realDrawTime = 18;
  repeated DataLotteryLuckyUser luckyUsers = 19;
  optional int64 currentTime = 20;
  optional int64 candidateNum = 21;
  optional string lotteryIdStr = 22;
  optional string roomIdStr = 23;
  optional string secAnchorId = 24;
  optional string secOwnerUserId = 25;
  repeated DataLotteryExpandActivityInfo expandActivityInfoList = 26;
  optional bool useNewDrawInteraction = 27;
}
message DataLotteryPrize {
  optional int64 prizeId = 1;
  optional int32 type = 2;
  optional string name = 3;
  optional string image = 4;
  optional string prizeDescription = 5;
}
message DataLotteryCondition {
  optional int64 conditionId = 1;
  optional int32 type = 2;
  optional string content = 3;
  optional int32 status = 4;
  optional string description = 5;
  optional int64 giftId = 6;
  optional int64 giftCount = 7;
  optional string giftName = 8;
  optional int64 needDiamondCount = 9;
  optional int64 minFansLevel = 10;
}
message DataLotteryLuckyUser {
  optional int64 luckyId = 1;
  optional int64 lotteryId = 2;
  optional int64 roomId = 3;
  optional int64 userId = 4;
  optional string userName = 5;
  optional string avatarUrl = 6;
  optional int64 grantCount = 7;
  optional string userExtraInfo = 8;
  optional string orderInfo = 9;
  optional string secUserId = 10;
  optional int64 prizeType = 11;
  optional string prizeName = 12;
  optional int64 expireTime = 13;
}
message DataLotteryGiftGuide {
  optional int64 giftId = 1;
  optional int64 giftDiamondCount = 2;
  optional string giftName = 3;
}
message DataProfitInteractionSetting {
  optional bool showInteractionScoreClose = 1;
}